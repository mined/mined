.ds <- \(<-
.if c\C'u2192' \{.ds <- \(<- 
'\}
.ds -> \(->
.if c\C'u2192' \{'ds -> \(-> 
'\}
.ds 10 [U+010D]
.if c\[u010D] \{.ds 10 \[u010D]
'\}
.ds 11 [U+0153]
.if c\[u0153] \{.ds 11 \[u0153]
'\}
.ds 12 [U+02BB]
.if c\[u02BB] \{.ds 12 \[u02BB]
'\}
.ds 13 [U+20AC]
.if c\[u20AC] \{.ds 13 \[u20AC]
'\}
.ds 14 [U+21AF]
.if c\[u21AF] \{.ds 14 \[u21AF]
'\}
.ds 15 [U+23CE]
.if c\[u23CE] \{.ds 15 \[u23CE]
'\}
.ds 16 [U+2713]
.if c\[u2713] \{.ds 16 \[u2713]
'\}
.ds 17 [U+2717]
.if c\[u2717] \{.ds 17 \[u2717]
'\}
.ds 18 [U+5434]
.if c\[u5434] \{.ds 18 \[u5434]
'\}
.ds 19 [U+548F]
.if c\[u548F] \{.ds 19 \[u548F]
'\}
.ds 20 [U+709C]
.if c\[u709C] \{.ds 20 \[u709C]
'\}
.ds 21 [U+FFFD]
.if c\[uFFFD] \{.ds 21 \[uFFFD]
'\}
.TH mined 1 "November 2022" "mined 2022.26" "Unicode text editor"
.SH NAME
MinEd - powerful text editor with extensive Unicode and CJK support
.PP
.SH SYNTAX
mined 
[ -/+options ]
[ +line ]
[ +/search ]
[ files ... ]
.PP
xmined ...
.br
umined ...
.PP
wined ...
.PP
minmacs ...
.br
mstar ...
.br
mpico ...
.PP
.PP
Note: Mined suppresses backup file names from the command line 
file list if they appear after their base version name 
as generated by command line auto-completion, in order to prevent 
their accidental editing; thus after file name "x" the following 
would be excluded from the file list (where N is a number):
"x~", "x;N", "x.~N~", 
so that, e.g., mined x* edits x and x1 but not x~.
.SH DESCRIPTION
(Note: if there is no dotted line below, use 8 bit terminal environment 
for proper display of manual page.)
.br
ииииииииииииииииииииииииииииииииииииииииииииииииииииии
.PP
Mined is a text editor with
.SS 	Security and safety features
.RS
.IP \(bu
\(->NEW\(-> Transparent editing of encrypted files, 
using filters configurable by file type
.IP \(bu
Systematic text and file handling safety, avoiding loss of data
.IP \(bu
Backup features, supporting simple or versioned backup
.IP \(bu
Hard link preservation
.IP \(bu
Optional password hiding
.RE
.SS 	Interactive features
.RS
.IP \(bu
Intuitive user interface
.IP \(bu
Logical and consistent concept of navigating and editing text 
(without ancient line-end handling limitations or insert/append confusion)
.IP \(bu
Supports various control styles:
.RS
.IP \(bu
Editing with command control, function key control, or menu control
.IP \(bu
Navigation by cursor keys, control keys, mouse or scrollbar
.RE
.IP \(bu
Concise and comprehensive menus (driven by keyboard or mouse)
.IP \(bu
\fIHOP\fR key paradigm doubles the number of navigation functions 
that can be most easily reached and remembered by 
intuitively amplifying or expanding the associated function
.IP \(bu
Interactive file chooser and interactive file switcher
.IP \(bu
Proper handling of window size changes in any state of interaction
.RE
.SS 	Versatile character encoding support
.RS
.IP \(bu
Extensive Unicode support, including double-width and combining characters,
script highlighting, 
various methods of character input support 
(mapped keyboard input methods, mnemonic and numeric input),
supporting CJK, Vietnamese, Hebrew, Arabic, and other scripts
.IP \(bu
Character information from recent Unicode version
.IP \(bu
Extensive accented character input support, including 
multiple accent prefix keys
.IP \(bu
Support for Greek (monotonic and polytonic)
.IP \(bu
Support for Cyrillic accented characters
.IP \(bu
Support of bidirectional terminals
.IP \(bu
Support of Arabic ligature joining on all terminals
.IP \(bu
East Asian character set support: handling of major CJK encodings 
(including GB18030 and JIS encodings with combining characters)
.IP \(bu
Support for a large number of 8 bit encodings 
(with combining characters for Vietnamese, Thai, Arabic, Hebrew)
.IP \(bu
Support of CJK input methods by enhanced keyboard 
mapping including multiple choice mappings (handled by a pick list menu);
characters in the pick list being sorted by relevance of Unicode ranges
.IP \(bu
Han character information with description and pronunciation
.IP \(bu
Auto-detection of text character encoding, edits files with 
mixed character encoding sections (e.g. mailboxes),
transparent handling and auto-detection of UTF-16 encoded files
.IP \(bu
Auto-detection of UTF-8 / CJK / 8 bit terminal mode and detailed features
(like different Unicode width and combining data versions)
.IP \(bu
Comprehensive and flexible (though standard-conformant) set of 
mechanisms to specify both text and terminal encodings 
with useful precedences
.IP \(bu
Flexible combination of any text encoding with any terminal encoding
.IP \(bu
Encoding support tested with: xterm, mlterm, rxvt, 
cxterm, kterm, hanterm, 
KDE konsole, gnome-terminal, Linux console, 
cygwin console, mintty, PuTTY
.RE
.SS 	Text editing features
.RS
.IP \(bu
Text layout features:
.RS
.IP \(bu
Paragraph wrapping, also justifying item lists
.IP \(bu
Auto-indentation and Undent function (smart Backspace)
.IP \(bu
Smart quotes (with quotation marks style selection 
and auto-detection) and smart dashes
.IP \(bu
\(->NEW\(-> Advanced list support (bullet and numbered lists)
.RE
.IP \(bu
Search and replacement patterns can have multiple lines
.IP \(bu
\(->NEW\(-> Search and replacement patterns can contain substitution references 
like \\1 to matching sub-expressions like \\(...\\) (can be nested)
.IP \(bu
Cross-session paste buffer (copy/paste between multiple 
- even subsequent or remote - invocations of mined)
.IP \(bu
Optional Unicode paste buffer mode with implicit conversion
.IP \(bu
Marker stack for quick return to previous text positions
.IP \(bu
Multiple paste buffers (emacs-style)
.IP \(bu
Optional rectangular copy/paste area
.IP \(bu
Interactive selection highlighting (with mouse or keyboard selection), 
standard dual-mode Del key behaviour
.IP \(bu
Program editing features, HTML support and syntax highlighting, 
identifier and function definition search, also across files; 
structure input support
.IP \(bu
Visible indications of special text contents 
(TAB characters, different line-end types, character 
codes that cannot be displayed in the current mode)
.IP \(bu
Full binary transparent editing with visible indications 
(illegal UTF-8 or CJK, mixed line end types, NUL characters, ...)
.IP \(bu
Print function that works in all text encodings
.IP \(bu
Optional emacs command mode
.RE
.SS 	Small-footprint operation, portability and interworking
.RS
.IP \(bu
Plain text mode (terminal) operation
.IP \(bu
Optimized use of terminal features for a wide range of terminals,
including large terminal support (2015x2015) of recent xterm and mintty
.IP \(bu
Instant start-up
.IP \(bu
Runs on many platforms (including legacy systems):
Linux, Android, Raspberry Pi,
Unix (SunOS, BSD, Mac OS X, QNX, GNU Hurd, HP-UX, IBM AIX, Irix, SCO UnixWare, Ultrix, Tru64),
DOS (djgpp), Windows (cygwin, Interix, MSYS), 
OpenVMS, Haiku
.RE
.PP
This manual contains the main topics
.RS
.IP \(bu
Command line options
.IP \(bu
Editing text with mined, an overview
.RS
.IP \(bu
Keypad layout
.IP \(bu
The HOP function
.IP \(bu
Mouse control and Menus
.IP \(bu
Paste buffers
.IP \(bu
Visual selection and Keypad modes
.IP \(bu
Rectangular copy/paste
.IP \(bu
Text position marker stack
.IP \(bu
Paragraph justification
.IP \(bu
Auto indentation and Structure input support
.IP \(bu
List support (bullet and numbered lists)
.IP \(bu
Search and replace multiple lines
.RE
.IP \(bu
Overview: input support features
.IP \(bu
Handling files with mined
.RS
.IP \(bu
Tags file support
.IP \(bu
\(->NEW\(-> 
Encrypted files
.IP \(bu
Data safety and security, 
Backup and recovery files and File locking
.IP \(bu
Line end modes and binary-transparent editing
.IP \(bu
File info: Memory of file position and editing style parameters
.IP \(bu
File chooser and File switcher
.IP \(bu
Backup integration
.IP \(bu
Version control integration
.IP \(bu
Printing
.RE
.IP \(bu
Working with mined
.RS
.IP \(bu
Quick Options (Mode indication) flags
.IP \(bu
Structured editing support
.IP \(bu
Password hiding
.IP \(bu
Visible indication of line contents
.RE
Language support
.IP \(bu
Character handling support
.RS
.IP \(bu
Combining characters
.IP \(bu
Character information display
.IP \(bu
Character conversion features
.IP \(bu
Smart quotes
.RE
.IP \(bu
Character input support
.RS
.IP \(bu
Accented and mnemonic input support
.IP \(bu
Combining character input
.IP \(bu
Special character input shortcuts
.IP \(bu
Character input mnemonics
.IP \(bu
Keyboard Mapping and Input Methods
.RE
.IP \(bu
Character encoding support
.RS
.IP \(bu
Auto-detected character encodings
.IP \(bu
CJK and mapped 8 bit encoding support
.IP \(bu
Combining characters
.RE
.IP \(bu
Unicode support
.RS
.IP \(bu
Character input support
.IP \(bu
Encoding conversion support
.IP \(bu
Bidirectional terminal support
.IP \(bu
Joining characters
.RE
.IP \(bu
CJK support
.RS
.IP \(bu
CJK input method support
.IP \(bu
Han character information display
.RE
.IP \(bu
Terminal encoding support
Mined Command reference (command and key function assignments)
.RS
.IP \(bu
Generic command modifiers (esp. HOP key)
.IP \(bu
Cursor and screen motion
.IP \(bu
Entering text
.RS
.IP \(bu
Input support commands
.RE
.IP \(bu
Modifying text
.IP \(bu
Text block and buffer operations
.IP \(bu
Search
.IP \(bu
File operations
.IP \(bu
Menu
.IP \(bu
Miscellaneous
.IP \(bu
MSDOS keyboard functions
.IP \(bu
Emacs mode
.IP \(bu
Windows keyboard mode
.IP \(bu
WordStar mode
.RE
.IP \(bu
Configuration of user preferences
.IP \(bu
Environment interworking and configuration hints
.RS
.IP \(bu
Mined runtime support library
.IP \(bu
PC versions
.IP \(bu
VMS version
.IP \(bu
Android version
.IP \(bu
Terminal environment
.RS
.IP \(bu
Locale configuration
.IP \(bu
PC terminals
.IP \(bu
Terminal setup and configuration
.IP \(bu
Terminal interworking problems
.RE
.IP \(bu
Keyboard Mapping / Input Method preselection
.IP \(bu
Smart Quotes style configuration
.IP \(bu
Han info configuration
.IP \(bu
Common paste buffer configuration
.IP \(bu
Keypad configuration
.IP \(bu
Printing configuration
.IP \(bu
Mined configuration
.RE
.IP \(bu
Environment variables
.IP \(bu
Author and Acknowledgements
.RE
.PP
Interactive help is available with F1.
.PP
.PP
.SH Command line options
Mined can be invoked
.RS
.IP \(bu
with or without list of file names
.IP \(bu
reading from a pipe (reading text from standard input)
.IP \(bu
writing into a pipe (writing edited text to standard output)
.IP \(bu
using a script that starts it in a new window
.RE
.SS Examples
.TP
mined x
edits the file x
.TP
mined x y z
edits files x, y, and z
.TP
cmd | mined
edits the output of program cmd; 
a file name for saving can be given later
.TP
mined x > y
takes the contents of file x and edits it 
for writing into y
.TP
mined | mail nn
edits a text to be mailed
.TP
cmd1 | mined | cmd2
modifies text within a pipe between 
program cmd1 (output) 
and cmd2 (as input)
.TP
minmacs ...
runs mined in emacs-compatible command mode (like mined -e)
.TP
mstar ...
runs mined in WordStar-compatible command mode (like mined -W)
.TP
mpico ...
runs mined in pico-compatible command mode (alpha)
.TP
xmined ...
starts a new terminal window (xterm or rxvt, depending on 
current TERM variable setting) and invokes mined in it
.TP
umined ...
starts a new terminal window in UTF-8 mode (xterm or rxvt, 
depending on font availability and usage capabilities) 
and invokes mined in it
.TP
wined ...
(in cygwin) starts mined in a window (using the mintty 
terminal, applying Windows look-and-feel)
.TP
wined.bat ...
(in Windows) starts mined in a window, using Windows 
keyboard emulation mode
.PP
.SS Startup options
.TP
+number
Mined positions to the given line number.
.TP
+/expr
Mined initially searches for the given search expression.
\(->NEW\(-> 
The search can be repeated with F9.
.TP
-v
Mined starts in view only mode. The text cannot be modified.
.TP
--
Restricted mode (tool mode): no other files can be edited 
or otherwise affected.
(Also triggered if programm name starts with "r", e.g. rmined).
.TP
++
End of options; subsequent file name can start with 
"-" or "+".
.TP
+@
Apply extended grooming to file info file; drop entries 
for files that are not accessible.
See File info: Memory of file position and editing style parameters
for details.
.PP
.SS File handling
.TP
+x
Make new files executable (Unix).
When cloning a file (with Save As or a similar feature), 
or if permissions are restricted by the environment 
(umask setting in Unix), executable permission is set 
only where also read permission is set.
.TP
+bX
Select backup mode, where X is one of:
.RS
.IP \(bu
-: no backup files
.IP \(bu
s: simple backup files (F~)
.IP \(bu
e: emacs style numbered backup files (F.~N~)
.IP \(bu
v: VMS style numbered backup files (F;N)
.IP \(bu
n: numbered backup files (whichever style occurs)
.IP \(bu
a: automatic backup files (whichever style occurs)
.RE
See Backup files for details.
.TP
+zX
Preselect file chooser sort options, where X is one of:
.RS
.IP \(bu
x: sort by file name extensions
.IP \(bu
d: list directories first
.RE
.PP
.SS Line end handling (transparent and transforming)
.TP
-r
Convert MSDOS line ends (CR LF) to Unix line ends (LF)
(stripping CR at line ends).
Can be combined with -R
or +R.
Also sets line end type for new files to LF for the djgpp 
version (which defaults to CR LF).
.TP
+r
Convert Unix line ends (LF) to MSDOS line ends (CR LF)
(adding CR at line ends).
Can be combined with -R
or +R.
Also sets line end type for new files to CR LF.
.TP
-R
Convert Mac line ends (CR) to Unix line ends (LF).
Can be combined with -r
or +r.
.TP
+R
Recognise Mac line ends (CR) and indicate them on display;
nothing is transformed with this option.
Can be combined with -r
or +r.
.TP
+u-u
Interpret Unicode line separator and paragraph separator 
as normal characters, not line ends (handling them as 
line ends was previously enabled with 
-uu and is now on by default).
.PP
.SS Character set and character handling
.TP
-u	\fI(character set)\fR
Interprets edited text as UTF-8, 
disables UTF and CJK auto detection.
.br
Synonym of -EU.
.TP
-l	\fI(character set)\fR
Interprets edited text as Latin-1, 
disables UTF and CJK auto detection.
.br
Synonym of -EL.
.TP
+u-u	\fI(character handling)\fR
Interpret text as UTF-8, but interpret Unicode line 
separator and paragraph separator as normal 
characters, not line ends.
.TP
-c	\fI(character handling)\fR
Selects separated display mode for combined characters 
(separating base character and combining characters).
This mode can also be toggled from the Options menu or 
by clicking on the Combining flag (next to the 
character encoding flag) in the flags area.
.TP
-b	\fI(character handling)\fR
Toggle "poor man's bidi" mode: 
input support for right-to-left scripts, based on 
Unicode script ranges.
(Enabled by default unless the terminal is detected to 
be in bidi mode; so e.g. in mlterm, poor man's bidi 
is disabled by default.)
.TP
-EX	\fI(character set)\fR
Where X is one of B/G/C/J/S/K/H: Selects one of the 
supported CJK character encodings for text interpretation 
and disables auto-detection of CJK encodings.
For details, see CJK encoding support.
For more details on supported encodings, see the 
Character encoding flags listing 
in the Quick Options (Mode indication) flags section.
.TP
-EX	\fI(character set)\fR
Where X is one of U/L or another 1-letter character 
encoding tag: Selects Unicode/UTF-8, Latin-1, or one 
of the other supported character encodings for 
text interpretation.
For details on supported encodings, see the 
Quick Options (Mode indication) flags listing.
.TP
-E=charmap	\fI(character set)\fR
Where charmap is a character encoding name (as 
reported by the locale charmap command):
Selects the respective character encoding for 
text interpretation.
For details on locale-related character encoding configuration, 
see Locale configuration.
.TP
-E.suffix	\fI(character set)\fR
Where suffix is a character encoding suffix ("codeset") 
as used in locale names:
Selects the respective character encoding for 
text interpretation.
For details on locale-related character encoding configuration, 
see Locale configuration.
.TP
-E:flag	\fI(character set)\fR
Where flag is a 2-letter indication used by mined to 
indicate the respective text encoding in the Encoding flag:
Selects the respective character encoding for 
text interpretation.
For details on supported encodings and their flags, 
see the Quick Options (Mode indication) flags listing.
.TP
-Eu	\fI(buffer encoding)\fR
Enables Unicode buffer mode which always maintains the 
Copy/Paste buffer in Unicode, thus facilitating conversion 
between different encodings being edited.
For details, see 
Unicode Copy/Paste buffer conversion.
.TP
-E?	\fI(character set)\fR
Determine the encoding(s) of the text file(s) given 
as parameters by auto-detection, print out the 
information and quit.
.TP
-E \fIor\fR -E-
\(->NEW\(-> 
Disable text encoding auto-detection and derive it 
from the locale environment.
.TP
-KX	\fI(input method handling)\fR
Configure the Space key to perform a certain function 
in keyboard mapping selection menus 
("CJK input method pick lists"), where X is one of:
 'n' to navigate to the next choice (like cursor-right), 
 'r' to navigate to the next row (like cursor-down), 
 's' to select the current choice (like Enter).
.TP
-K=im-im	\fI(input method selection)\fR
Select input method and/or standby input method (for 
quick switching with Alt-k).
The syntax is the same as for the optional environment 
variable MINEDKEYMAP (see below).
.PP
.SS Terminal mode
.TP
-U	\fI(terminal mode)\fR
Toggles UTF-8 screen handling assumption, i.e. selects 
UTF-8 screen handling unless UTF-8 keyboard input is 
already selected (by another -U 
option or environment setting).
In the latter case, -U 
deselects UTF-8 terminal operation.
This option should normally not be used as the mode should 
be configured in the environment (see 
Locale configuration).
.TP
+U	\fI(terminal mode)\fR
Selects UTF-8 screen handling.
Note that none of the options -U 
or +U needs to be used if 
the environment is correctly configured to indicate 
UTF-8 as it should (see 
Unicode handling / Terminal environment).
.br
Also, mined performs auto-detection of UTF-8 terminal 
encoding and UTF-8 terminal features (different width 
data versions, handling of double-width, combining and 
joining characters), so even if the environment is 
not correctly configured, mined should work without 
this explicit terminal mode parameter.
.TP
+UU	\fI(terminal mode)\fR
Selects bidirectional terminal support. 
This mode implies UTF-8 and also assumes that Arabic 
ligature joining (of LAM/ALEF combinations) is 
applied; it will be handled by mined accordingly.
.TP
+UU-U	\fI(terminal mode)\fR
Selects bidirectional terminal support 
without Arabic ligature joining (like mintty).
.TP
-cc	\fI(terminal mode)\fR
Assumes that the terminal does not support combining characters.
By default - unless otherwise detected - mined assumes 
that combining characters work on UTF-8 terminals and 
do not work in CJK terminals.
.TP
+c	\fI(terminal mode)\fR
Assumes that the terminal supports combining characters.
This is enabled by default for UTF-8 terminals, and 
disabled by default for CJK terminals, unless otherwise 
detected.
.TP
+EX	\fI(terminal mode)\fR
Where X is one of B/G/C/J/X/S/x/K/H: Assumes a CJK encoded 
terminal in one of the supported CJK character encodings.
For details, see CJK encoding support.
.TP
+EX	\fI(terminal mode)\fR
Where X is one of g/c/j: Assumes a CJK encoded terminal 
in one of the CJK character encodings like G/C/J and 
also assumes that the terminal cannot display GB18030 
4-byte encodings, CNS 4-byte encodings, EUC-JP 3-byte 
encodings, respectively.
.TP
+EX	\fI(terminal mode)\fR
Where X is one of U/L or another 1-letter character 
encoding tag: Assumes a Unicode/UTF-8 or Latin-1 
encoded terminal, respectively, or an 8-bit terminal 
running one of the other supported character encodings.
For details on supported encodings, see the 
Quick Options (Mode indication) flags listing.
For details on terminal encoding support, see 
Terminal encoding support.
.TP
+E=charmap	\fI(terminal mode)\fR
Where charmap is a character encoding name (as 
reported by the locale charmap command):
Assumes the terminal to have the respective encoding.
For details on locale-related character encoding configuration, 
see Locale configuration.
.TP
+E.suffix	\fI(terminal mode)\fR
Where suffix is a character encoding suffix ("codeset") 
as used in locale names:
Assumes the terminal to have the respective encoding.
For details on locale-related character encoding configuration, 
see Locale configuration.
.TP
+E:flag	\fI(terminal mode)\fR
Where flag is a 2-letter indication used by mined to 
indicate the respective encoding as text encoding in 
the Encoding flag:
Assumes the terminal to have the respective encoding.
For details on supported encodings and their flags, 
see the Quick Options (Mode indication) flags listing.
.TP
+E?	\fI(terminal mode)\fR
Determine the terminal encoding and further terminal 
encoding features and properties by auto-detection, 
print out the information and quit.
.TP
-C	\fI(character set and terminal mode)\fR
(Deprecated.)
Turns a subsequent -E option 
(with a single-letter CJK tag) effectively into a 
combined -E and 
+E option.
So mined assumes the given CJK encoding for both 
terminal encoding (unless overridden by UTF-8 terminal 
auto-detection) and text encoding.
Can be used for quick indication of CJK terminals 
(e.g. cxterm, kterm, hanterm) if locale environment 
is not properly set.
.TP
+C	\fI(terminal mode)\fR
Displays unknown characters on CJK terminal:
Assumes a CJK encoded terminal (e.g. cxterm, kterm, hanterm; 
more specific encoding specification is advisable), and 
characters encoded in a CJK encoding format are 
displayed transparently even if they do not map to a 
valid Unicode character.
.TP
+CC	\fI(terminal mode)\fR
Displays invalid characters on CJK terminal:
Implies +C, but even 
character codes that do not match the encoding scheme 
(e.g. wrt. to specified byte ranges) are written 
transparently to the terminal.
.TP
+CCC	\fI(terminal mode)\fR
Displays extended characters on CJK terminal:
Implies +CC and overrides 
auto-detection of the terminal capability to display 
CJK 3-byte / 4-byte codes which would by default 
suppress their display if the terminal does not support them.
.TP
+D	\fI(keyboard assignment)\fR
Setup xterm (by sending dynamic configuration codes) to 
apply two useful keyboard handling modes:
Del key on small keypad sends DEL character rather 
than an escape sequence and can thus be distinguished 
from the Del key on the big (numeric) keypad.
Prepend ESC to character if pressed with the Alt or Meta 
key in order to enable Alt-commands (e.g. Alt-f to 
open the file menu, Alt-Shift-H to enter HTML markers etc).
(Unfortunately this cannot be done by default as it cannot 
be undone because the previous state cannot be detected.)
(This xterm setting should rather be configured permanently 
as suggested in the sample file Xdefaults.mined 
in the Mined runtime support library.)
.TP
+#
\(->NEW\(-> 
Assume dark terminal background and adjust some colours 
accordingly.
.TP
-nc
Suppress usage of terminal colour attributes.
.PP
.SS Information display
.TP
+H
Enable syntax highlighting for HTML/XML and server scripting.
.TP
-H
Disable HTML/XML syntax highlighting.
.TP
+?c
Enable character code information display on status line.
.TP
+?X
Enable character code information display (implies +?c) 
with additional information, where X is one of:
.RS
.IP \(bu
s: Unicode script
.IP \(bu
n: Unicode character name
.IP \(bu
\(->NEW\(-> 
q: Unicode named sequence
.IP \(bu
d: Unicode character decomposition
.IP \(bu
m: mined input mnemonics available for this character
.RE
Note: setting any of these options may disable some others 
as not all combinations are considered useful.
.TP
+?h
Enable full Han character information display as a popup.
In addition to the character description, a set of 
pronunciations can be selected with the variable MINEDHANINFO.
.TP
+?x
Enable compact Han character information on status line.
In addition to the character description, a set of 
pronunciations can be selected with the variable MINEDHANINFO.
.TP
+?f
Enable file and position information display on status line 
(enabled by default).
Note that when editing a file that does not fit 
completely in memory (e.g. large file on old system), 
this option may cause considerable swapping. In that 
case, disable the feature with -?f.
.TP
-?X
Deselect the respective +? option.
.PP
.SS Editing behaviour
.TP
-q
Derive quotation marks style from locale information 
(environment variables LANGUAGE, TEXTLANG, LC_ALL, LC_CTYPE, LANG).
See Smart quotes for details.
Note: if either LANGUAGE or TEXTLANG is used, 
-q is assumed implicitly.
.TP
-q=locale
Derive quotation marks style from given locale.
(-q:locale works too.)
.TP
+q \fIor\fR +q=locale
Like -q but exchange primary and secondary style.
.TP
-q:style
Set given quotation marks style if available for any language,
e.g. -q:"Ф╗".
(-q=style works too.)
.TP
-w
Recognise fewer places as word boundaries for word skip 
and delete commands.
.TP
-a
Append mode: Append to text buffer or external file for 
copy/delete commands instead of replacing it.
.TP
+j
Set justification level 1 (or increment level 
previously set by environment variable to 1 or 2):
Level 1 initially enables automatic word wrap at line 
end when typing over right margin.
Can be changed by clicking on the j/J flag.
.TP
+jj
Set justification level 2:
Level 2 initially enables automatic word wrap at line 
end when typing within paragraph; buggy.
Can be changed by clicking on the j/J flag.
.TP
-j
Set justification level 1 or 2 (other than previously 
set).
Can be changed by clicking on the j/J flag.
.TP
-T
When moving vertically over a Tab character, stay 
left of the Tab column range (on the Tab character).
The default depends on the previous position.
Also, stay left on a wide character when moving 
vertically over it.
.TP
+T
When moving vertically over a Tab character, stay right of 
the Tab column range (behind the Tab character).
The default depends on the previous position.
.TP
-V
Place cursor before pasted region after paste commands.
(If this option is enabled already, -V acts like -VV.)
.TP
-VV
Like -V, and disable emacs-style paste buffer 
functions for "delete word" and "delete to end of 
line" commands (^T, ^K).
.TP
+V
Place cursor behind pasted region after paste commands.
(If this option is enabled already, +V acts like +VV.)
.TP
+VV
Like +V, and enable emacs-style paste buffer functions 
for "delete word" and "delete to end of line" commands 
(^T, ^K).
.TP
+[
Initially enable rectangular paste buffer mode.
See Rectangular copy/paste.
.TP
-[
Initially disable rectangular paste buffer mode.
.TP
+V:X \fIor\fR -V:X
Enable/disable visual selection behaviour, where X is one of
.RS
.IP \(bu
k: keep selection when searching
.IP \(bu
c: automatically copy after mouse selection
.RE
.PP
.SS Keyboard function mode selection
.TP
+eX
Select emulation mode, especially control key function 
mapping, where X is one of
.RS
.IP \(bu
e: emacs mode
.IP \(bu
s: WordStar mode
.IP \(bu
w: Windows keyboard mode
.IP \(bu
W: Windows behaviour (keyboard mode, CRLF for new files, cmd.exe with ESC !)
.IP \(bu
p: pico mode
.IP \(bu
m: mined default
.RE
.TP
-e
Select emacs mode. This assigns 
functions to control keys, M-X commands (ESC commands, 
using the "meta" key as emacs calls the Alt prefix) 
and C-X commands as defined by the emacs editor. Also 
the emacs paste buffer ring and cut/paste behaviour is 
enabled.
.TP
-W
Select WordStar mode. This 
configures WordStar command key layout and enables 
many functions of the ^K, ^O, and ^Q menus.
.TP
-kX
Select keypad modes, where X is one of
.RS
.IP \(bu
m: mined keypad mode.
.IP \(bu
s \fIor\fR S: Shift-select mode:
Shifted keypad keys (cursor keys, PgUp/PgDn/Home/End)
start or extend text selection (with visual 
highlighting) and visual selection behaviour is 
slightly adapted to common usage; in addition, 
Shift-HOP is mapped to the Copy function.
Unshifted keypad keys retain their default mined functions.
.IP \(bu
w: Windows keypad mode; implies -kS 
(also implied by +ew):
.IP \(bu
c: Home and End keys of small ("editing") keypad invoke 
Mark/Copy to paste buffer (overriding selected mode for them)
.IP \(bu
C: Home and End keys of big ("numeric") keypad invoke 
Mark/Copy to paste buffer (overriding selected mode for them)
.RE
.TP
+t
(Deprecated.) Windows keypad mode, like -kw.
.TP
+tt
(Deprecated.) Shift-select mode, like -kS.
.TP
-k \fI(as single-letter option)\fR
Switch the Home and End key functions of the two 
keypads (small keypad, numeric keypad), i.e. exchange 
the two keypads with respect to these keys.
This assigns the more usual functions "goto line 
beginning", "goto line end" to the Home and End keys 
of the right keypad.
The (assumedly more useful) mined default is to assign 
the frequently used paste buffer functions (mark, 
copy) to these keys.
.br
In turn, the assigned functions of the Home and End keys 
of the small keypad ("editing keypad") are exchanged to 
provide the other function than on the right keypad, 
respectively - provided the terminal and its configuration 
support this distinction.
.br
Also Alt-Home/End are assigned the respective other 
functions on each keypad so the most useful keypad 
functions should always be quite easily available.
.br
Regardless of this switching, mined tries to map 
fixed functions to modified Home and End keys:
Ctrl-Home/End for line begin/end movement (both keypads), 
Shift-Home/End for the paste buffer copy functions 
(small keypad) - provided the terminal, its mode and 
configuration support distinction of modified keypad keys.
.br
See also the section on Keypad layout 
for a motivating overview of the mined keypad 
assignment features and options.
.br
About terminal support and configuration, see 
Keypad configuration for further hints.
.TP
+k
Enforce usage of terminal "keypad mode" which switches 
the numeric keypad to send "application keypad" escape 
sequences. This is normally not needed. On certain 
terminals, mined will automatically use this mode (e.g. 
Linux console), and in terminal emulators it is usually 
not needed unless you are running a misconfigured 
X windows system in which case you can enable 
distinguished keypad functions by using the NumLock 
function of the keyboard and switching on this option.
.TP
+Bp
\(->NEW\(-> 
Backspace should apply "plain backspacing" rather than 
"smart backspacing", i.e. no auto-undent and only delete 
one combining character of a combined character;
without this option, use Control-Backspace for the "plain" function;
with this option, use Shift-Control-Backspace for the "smart" function.
.TP
-B
(Deprecated.)
Enforce the Del control character to delete left, 
Backspace to move left.
Should normally not be used, see 
"Automatic backspace mode adaptation" below.
.PP
.SS Appearance
.TP
-QX
Select menu border style, where X is one of
.RS
.IP \(bu
s: simple border, 
.IP \(bu
r: rounded corners, 
.IP \(bu
f: fat border, 
.IP \(bu
d: double border, 
.IP \(bu
a: ASCII border (can be combined with another option -Qs or -Qr), 
.IP \(bu
v: VT100 alternate character set graphics border, 
.IP \(bu
@: block border (deprecated), 
.IP \(bu
1: (or another digit) add a margin between menu 
borders and contents (can be combined with any 
other -Q option),
.IP \(bu
B: \(->NEW\(-> 
full menu background
.IP \(bu
b: \(->NEW\(-> 
transparent menu background
.IP \(bu
p: \(->NEW\(-> 
plain menu borders (no lines)
.IP \(bu
P: \(->NEW\(-> 
very plain: no menu borders
.IP \(bu
Q: stylish selection bar for navigating menu items, see image
(can be combined with another option 
-Qs or 
-Qr or 
-Qf or 
-Qd).
.IP \(bu
q: disable stylish selection bar
.RE
Mined sets an appropriate default based on its 
assumptions of the terminal capabilities.
.TP
-O
Disable script colour highlighting (for Greek, Cyrillic...).
.TP
+O
Enable script colour highlighting (for Greek, Cyrillic...).
(Disabled by default in dark terminals.)
.TP
-f
Restrict usage of graphic characters: use cell-grained 
scrollbar, simple menu borders, no fancy menu bar for 
highlighting the selected menu item.
.TP
-ff
Further restrict usage of graphic characters: 
no Unicode box drawing graphic characters for menu borders.
.TP
-fff
Further restrict usage of graphic characters: 
no graphic characters (including VT100 graphics) 
for menu borders.
.TP
-F
Assume a screen font with limited coverage of special 
symbols and restrict usage of special marker 
characters for display of line indications. (This is 
needed e.g. for KDE konsole or for xterm using 
TrueType fonts.)
.br
Interpretation of the MINEDUTF* environment variables is suppressed.
.TP
-FF
Assume a screen font with even more limited coverage 
of special symbols and restrict usage of special characters 
for indication of selected menu items.
Also, trigger substitution display of a number of special 
characters in text (like in non-Unicode terminals).
.TP
+F
Revert the effect of one -F 
option (e.g. preconfigured in the environment variable 
MINEDOPT) or a corresponding assumption of mined about 
the specific terminal which would limit font usage.
.TP
+FF
Fully enable usage of characters for special indications.
.PP
.SS Further mode selection, interface and display behaviour
.TP
-N
Set Tab size to either value of 8, 4, 2.
The effective Tab size can be changed while editing 
with the ESC T command or from the Options menu.
.TP
-+N
Set Tab spacing expansion mode to either size or 8, 4, 2.
In this mode, a TAB input character will be expanded 
to an appropriate number of spaces.
To enter a real Tab character, type Ctrl-V Tab (^V^I).
The effective Tab size can be changed while editing 
with the ESC T command or from the Options menu.
Tab expansion mode can be changed while editing 
with the HOP ESC T command or from the Options menu.
.TP
-P
Hide passwords; enables hidden display of one word 
behind the string "assword" in a line (to accommodate 
for "password" or "Password"): hidden characters are 
indicated by reverse "*" characters.
By default, this mode is activated when editing a file 
whose name starts with ".".
.TP
+P
Unhide passwords; always display them.
.TP
+ZZ
Virtual bold stropping: displays keywords of Algol-like 
programming languages in bold while transparently 
editing them in all-capital letters ("upper stropping"), 
which is started with entering only one capital letter.
Implicitly enabled on file name suffix .a68 (disable with -ZZ).
.TP
+Z_
Underline strop style: use underlined instead of bold for stropping.
To activate virtual underline stropping, use both options: +ZZZ_.
.TP
-LN
(N is a number) Define mouse wheel movement to scroll 
by N lines (default 3).
Ctrl-mouse-wheel always scrolls by 1 line.
Shift-mouse-wheel scrolls by 1 page.
Mouse-wheel on the scrollbar scrolls by half a page.
.TP
+M:
Enable file tabs header display (above menu line which 
is also enabled).
.TP
-M:
Disable file tabs header display.
.TP
-M
Suppress display of menu header line (including flags).
Pull-down and pop-up menus can still be opened with 
keyboard commands.
Mouse control remains enabled.
.TP
-MM
Suppress display of menu header line (including flags) 
and disable quick menu (right-click on text).
Pull-down and pop-up menus can still be opened with 
keyboard commands, the quick menu can still be opened with 
Alt-space or ESC space.
.TP
-MM+M
Disable quick menu but leave menu header and flags line enabled.
.TP
+*
Enable enhanced mouse control:
Menu items can be navigated with the mouse without 
button pressed.
Enabled by default for mintty, xterm, gnome-terminal,
cygwin console.
.TP
-*
Disable enhanced mouse control (if enabled by default 
or by previous option), otherwise disable mouse support 
altogether.
.TP
-**
Disable mouse support altogether.
.TP
-oN
Select scrollbar display mode.
N=0 disables the scrollbar (may speed up editing on 
slow remote lines), N=1 enables cell-grained 
scrollbar display, N=2 (default) enables finer-grained 
scrollbar display on a UTF-8 terminal.
.TP
-oo
Selects old (until 2000.14) left/right click behaviour on scrollbar.
.TP
-o
Disables the scrollbar.
.TP
+o
Enables the scrollbar.
.TP
-p
Enables distinguished display of line ends and 
paragraph ends with different symbols.
.TP
-X
Disables display of the filename in the window title bar.
.TP
-s
Stay with cursor in top line after page down 
or bottom line after page up instead of center line.
.TP
-S
Use scrolling for page up/down.
.TP
-dN
Apply delay between lines of page output to achieve 
visually effective display build-up which may help to quickly 
focus on the new cursor position (the screen output is 
displayed starting from the cursor position, proceeding 
to the screen edges).
.br
	If N lies between '0' and '9', the respective number of 
milliseconds is applied between display of two lines.
If N='0', still an output flush is performed.
If N='-', no delay at all is applied though still the order 
of display output is from cursor position to edges.
.br
	\fIDefault:\fR '-'; configuration is currently disabled 
in the Unix version as 'usleep' doesn't seem to be very 
portable.
.TP
+p
Enables support for proportional display fonts. 
This does not really work, however, with e.g. xterm or 
SunOS shelltool as they do not reliably position characters 
after using control sequences.
.PP
All options are also looked for in the environment variable 
MINEDOPT (or MINED for compatibility).
.br
On the command line, options containing wildcard characters ("?", "*") 
may need to be quoted (if matching files starting with "-" or "+" exist).
.PP
.PP
.PP
.SH Editing text with mined
Mined is always in insert mode. Commands are single control 
characters, double key commands starting with ESCAPE, and a 
collection of function keys (for various types of keyboards and 
terminals). As a specialty, note the prefixing 'HOP KEY' which 
amplifies or expands the effect of certain commands "just as 
you would expect"; this provides for more command flexibility 
without having to remember too many keys. It is described in a 
separate section below.
.SS Keypad layout
Control key layout for basic movement functions is topographic 
on the left-hand side of the keyboard (an idea originating 
from early editors, when keyboards didn't have cursor keypads).
(Although using a cursor block is more comfortable, a simple 
set of control key assignments is useful as a fallback on 
terminals or remote connections with reduced functionality.)
.PP
The right-hand cursor block of typical keyboards is assigned 
the most important movement and paste buffer functions.
.TP
\fBKeypad assignment features:\fR
.RS
.IP \(bu
Mined optimizes keypad usage for most frequently used functions, 
especially \fIpaste buffer functions\fR in addition to 
\fInavigation functions\fR, by making them easily accessible on 
the keypad.
.RS
.IP \(bu
For this purpose, mined distinguished between 
Home/End keys on the numeric keypad and on the small 
keypad (whenever possible with the terminal) in order 
to avoid the waste of resources by the usually redundant 
mapping of these two keypad blocks.
.IP \(bu
Note: this means that on the big ("numeric") keypad 
the mined keypad function assignment for Home/End deviates 
from their more usual meanings.
This is deliberately designed to enhance support of 
quick copy/paste with these easily reachable keys, 
while line movement can also easily be achieved with 
HOP cursor-left or HOP cursor-right, respectively.
.br
This keypad function assignment gives you the 
\fIbest benefit of keypad usage\fR and is thus considered 
much more useful than the "standard assignment".
.IP \(bu
The Del and Backarrow keys perform their usual 
dual-mode function; if a visual selection is active, 
they delete the selection (with a Cut to the paste 
buffer), if there is no visual selection, they delete 
the next or previous character, respectively.
.RE
.PP
\fIsmall ("editing") keypad and big ("numeric") keypad:\fR
\fC
.ne 13
.DS
.br
+-------+-------+-------+    +-------+-------+-------+
.br
| Insert| Home  | PgUp  |    | (7)   |  (8)  | (9)   |
.br
| Paste |LineBeg|       |    | Mark  |   \(ua   | PgUp  |
.br
+-------+-------+-------+    +-------+-------+-------+
.br
| Delete| End   | PgDn  |    | (4)   |  (5)  | (6)   |
.br
|Del/Cut|LineEnd|       |    |  \*(<-   |  HOP  |  \*(->   |
.br
+-------+-------+-------+    +-------+-------+-------+
.br
                             | (1)   |  (2)  | (3)   |
.br
                             | Copy  |   \(da   | PgDn  |
.br
                             +-------+-------+-------+
.br
                             | (0)           | (.)   |
.br
                             | Paste         |Del/Cut|
.br
                             +-------+-------+-------+
.br
.DE
\fR
.IP \(bu
The centrally placed \fIHOP key\fR is a prefix modifier 
that can be used for intuitive modification of navigation 
functions and for useful alternatives of paste buffer functions.
.PP
\fIbig ("numeric") keypad after HOP:\fR
\fC
.ne 13
.DS
.br
                             +-------+-------+-------+
.br
                             | (7)   |  (8)  | (9)   |
.br
                             |go Mark|Scr top|FileBeg|
.br
                             +-------+-------+-------+
.br
                             | (4)   |  (5)  | (6)   |
.br
                             |LineBeg|       |LineEnd|
.br
                             +-------+-------+-------+
.br
                             | (1)   |  (2)  | (3)   |
.br
                             |Append |Scr bot|FileEnd|
.br
                             +-------+-------+-------+
.br
                             | (0)           | (.)   |
.br
                             |Cross-paste    |+Append|
.br
                             +-------+-------+-------+
.br
.DE
\fR
.TP
See The HOP function below for alternative keys to trigger it.
.IP \(bu
Mined offers additional function mappings for modified 
keypad keys, both for providing unambiguous mappings in any 
case and to handle the deviation of its benefit-optimized 
Home/End keypad mapping from frequent expectations, and an 
option to customize Home/End:
.RS
.IP \(bu
Alt-Home/End are mapped to the Home/End functions 
of the other keypad, respectively. So by default, on 
the numeric keypad they invoke the line navigation 
functions.
.IP \(bu
The -k option exchanges 
Home/End functions of the small and numeric keypads  
with each other, and switches Alt-Home/End to also 
invoke the "other" function, respectively:
keypad function assignments:
.IP \(bu
\fI(cf Windows keypad mode below)\fR 
Ctrl-Del is always mapped to character deletion, 
while Shift-Del is mapped to the paste buffer Cut function, 
regardless of the visual selection.
.IP \(bu
\fI(cf Windows keypad mode below)\fR 
Ctrl-Home/End are always mapped to line 
navigation, while Shift-Home/End are mapped to the 
paste buffer functions Mark/Copy, regardless of the 
-k option.
.IP \(bu
Alt-Del is mapped to the respective "other" function, 
depending on visual selection.
.IP \(bu
\fINote:\fR Keypad function assignments as 
described depend on terminal support to distinguish 
all involved keys and modifiers which is unfortunately 
not always the case.
.br
Terminal support for proper distinction of 
different keypads and modified keys may be enhanced by 
appropriate terminal configuration, see the section 
on Keypad configuration.
.br
\(->NEW\(-> 
With xterm since 280, all desired distinctions between 
different keypads as well as modified keypad keys are 
achieved (by using the modifyKeyboard resource mode in 
combination with VT220 Keyboard and Application Keypad modes).
.RE
.IP \(bu
Two Keypad modes (see below) change the 
function assignment of the keypads.
.RS
.IP \(bu
In Shift-select mode (option -kS), 
Shift-modified keypad keys activate or extend a visual text selection;
also Shift-5 \fI(on keypad)\fR performs Copy to paste buffer.
.IP \(bu
In Windows keypad mode (option -kw), 
additionally non-shifted keypad keys are changed to perform the 
more common functions, at the price of losing the easy Home/End 
assignment to invoke Mark/Copy to paste buffer (which can however 
be overridden with options -kc and -kC).
See Keypad modes below for an overview.
.RE
.RE
.SS The HOP function
This function, triggered by any of the HOP keys, amplifies or 
expands functions as listed below. To achieve the combined 
function, first press any key that is assigned the HOP function, 
then any key assigned the base function from the table below.
.br
\fINote:\fR To enable using the HOP function also on 
keyboards that do not support the keypad "5" or "*" keys (e.g. 
small notebooks without numeric keypad), a few alternative HOP 
keys are provided:
Control-Q, Shift-TAB, the Menu or Windows keys (if running Linux), 
or (providing a dual-mode function) the Control-G and ESC keys.
.TP
HOP \fIchar left\fR
move cursor to beginning of current line
.TP
HOP \fIchar right\fR
move cursor to end of current line
.TP
HOP \fIline up\fR
move cursor to top of screen
.TP
HOP \fIline down\fR
move cursor to bottom of screen
.TP
HOP \fIscroll up\fR
scroll half a screen up
.TP
HOP \fIscroll down\fR
scroll half a screen down
.TP
HOP \fIpage up\fR
move to beginning of file
.TP
HOP \fIpage down\fR
move to end of file
.TP
HOP \fIword left\fR
move cursor to previous ";" or "."
.TP
HOP \fIword right\fR
move cursor to next ";" or "."
.TP
HOP \fIdelete tail of line/line end\fR
delete whole line
.TP
HOP \fIdelete whole line\fR
delete tail of line
.TP
HOP \fIdelete previous character\fR
delete beginning of line
.TP
HOP \fIset mark\fR
go to mark
.TP
HOP \fIsearch\fR
search for current identifier
.TP
HOP \fIsearch next\fR
repeat previous (last but one) search
.TP
HOP \fIcopy/cut\fR
copy or cut, but append to buffer
.TP
HOP \fIsave buffer\fR
save buffer, but append to file
.TP
HOP \fIpaste buffer\fR
paste "inter-window buffer", 
which is the last saved buffer by any invocation 
of mined on the same machine by the same user.
.TP
HOP \fIedit next file\fR
edit last file
.TP
HOP \fIedit previous file\fR
edit first file
.TP
HOP \fIexit current file\fR
exit mined
.TP
HOP \fIsuspend\fR
suspend without writing file
.TP
HOP \fIshow status line\fR
toggle permanent status line
.TP
HOP \fIenter HTML tag\fR
embed copy area in HTML tags
.PP
While a pull-down or pop-up menu is open, any HOP key or the 
Space key or the middle mouse button toggles the HOP 
amplifier/expander for a function subsequently invoked in the 
menu; the menu redisplays with function names changed where 
applicable.
.SS Character-oriented navigation and editing
From the traditional restriction of Unix tools to the line as a 
unit of operation, other editors are stuck in a line-oriented 
movement and insertion paradigm which implies some weird and 
counter-intuitive behaviour.
.br
	Mined handles the end-of-line position like any ordinary 
character during movement and editing operations.
Also search and replacement strings can contain line ends.
.SS Mouse control and menus
All versions of mined (Unix, DOS/Windows) support mouse operation.
.br
	Mouse control operates on pull-down and pop-up menus, flags, 
the text area, the bottom line, and the scroll bar, 
in order to provide the most useful functions and menu-driven 
command selection at hand.
.PP
\fISummary of mouse functions:\fR
.RS
.TP
In text area:
.RS
.IP \(bu
left click
moves the text cursor to the mouse position
.IP \(bu
Shift-left click
\fI(works in mintty)\fR
extends the selection
.IP \(bu
left click-drag-release
selects a text area and (with option 
auto-copy) copies it to the paste buffer;
using Alt while dragging (moving the mouse) 
toggles rectangular selection
.IP \(bu
double-click
\fI(actually click on current position)\fR
word selection (within timeout)
.IP \(bu
middle click
display the text status line or, 
if permanent file status is enabled, 
display character information
.IP \(bu
right click
pops up the quick menu
.IP \(bu
mouse wheel scroll
scrolls by N lines (default 3, adjust 
with option -L)
Ctrl-mouse-wheel always scrolls by 1 line.
Shift-mouse-wheel scrolls by 1 page.
Note: Mouse-wheel on the scrollbar scrolls by half a page.
.RE
.TP
On scroll-bar:
.RS
.IP \(bu
left click
moves one page towards the mouse position (as seen 
from the current scrollbar position marker)
.br
or (with option -oo)
moves one page down
.IP \(bu
middle click
moves to text position in file corresponding to 
relative mouse position on scrollbar
.IP \(bu
left click-drag
moves text position in file by moving relative 
mouse position on scrollbar
.IP \(bu
right click
moves one page away from the mouse position (as seen 
from the current scrollbar position marker)
.br
or (with option -oo)
moves one page up
.IP \(bu
mouse wheel scroll
scrolls by half a page
.RE
.TP
On bottom line (status line):
.RS
.IP \(bu
left click
moves one page down
.IP \(bu
middle click
displays the text status line or, 
if permanent file status is enabled, 
display character information
.IP
.IP \(bu
right click
moves one page up
.RE
.TP
On pull-down menu header (in left menu area of upper line):
.RS
.IP \(bu
left or right click or mouse wheel scroll
opens menu
.IP \(bu
middle click
opens menu with HOP-modified functions
.RE
.TP
On flag indication (in right flag area of upper line):
.RS
.IP \(bu
middle click
toggles flag
.IP \(bu
left click
opens flag menu
\fIif menu is open:\fR toggles flag
(effectively allowing double-click to toggle)
.IP \(bu
right click or mouse wheel scroll
opens flag menu
.RE
.TP
On file tab area
.RS
.IP \(bu
left or middle click or mouse drag
opens selected file
.IP \(bu
\(->NEW\(-> right click or mouse wheel scroll
opens file switcher menu (like Alt-F3)
.IP \(bu
\(->NEW\(-> control-right click
opens file opening menu (like F3)
.IP \(bu
\(->NEW\(-> control-mouse wheel scroll
switches to next/previous file tab
.RE
.TP
On open menu
.RS
.IP \(bu
mouse wheel scroll
navigates in menu
.IP \(bu
mouse movement \fI(without holding button)\fR
navigates in menu
\fI- enabled by default in mintty, xterm, 
gnome-terminal, cygwin console;
may be controlled with -* 
/ +* command line options\fR
mouse movement right/left \fI(well beyond menu border)\fR
navigates to neighbour menu
mouse movement right \fI(a few positions)\fR
on submenu item opens submenu
.IP
.IP \(bu
left click
invokes menu item pointed to with the mouse
.IP \(bu
left or right drag \fI(holding button down after opening the menu)\fR
navigates in menu
.IP \(bu
left or right release \fI(after mouse dragging)\fR
invokes selected menu item
.IP \(bu
middle click
toggles HOP modifier
.IP \(bu
Ctrl-mouse-wheel
switches to next or previous menu
.RE
.RE
.PP
.PP
.PP
	\fIConfiguration hint:\fR To enable mouse operation in a 
Windows console window, deactivate "QuickEdit mode" in the 
properties menu.
.SS Menus
Mined provides three kinds of menus, all can be opened with 
either mouse clicks or commands.
The menus offer the most important editing functions (apart 
from simple movement).
Some menus have their items grouped into sections, some of which 
have subtitles.
.br
The HOP flag can be toggled while a menu is open with any 
of the HOP key, ^G, Space, or the middle mouse button.
When a pull-down menu is opened with the middle mouse button, 
the HOP variation is initially triggered, offering the HOP 
variations of the menu items.
.br
The three menu groups are used as follows:
.RS
.IP \(bu
A \fIpull-down menu\fR is opened by clicking the mouse 
on the menu header (in the left part of the top screen line) 
or scrolling the mouse wheel on this header.
.br
\fIShortcut:\fR Each pull-down menu can also be opened 
with ESC or Alt and the small initial letter of the menu 
header (Alt-f or ESC f for the file menu etc.).
.IP \(bu
A \fIflag menu\fR is opened by clicking the 
right mouse button on a flag indication in the flags area 
(right part of the top screen line) 
or scrolling the mouse wheel on it.
The flag menus have optional markers in front of each item 
showing which items are currently active.
.br
\fIShortcut:\fR The Info menu, Input Method (Keyboard 
Mapping) menu, Smart Quotes menu, Encoding menu can also be 
opened with Alt-F10, Alt-I, Alt-K, Alt-Q, or Alt-E, respectively 
(or use an ESC prefix instead of an Alt- modifier respectively).
.IP \(bu
The \fIpop-up menu\fR is placed above the text area and 
can be opened with a right-click or Alt-Space (ESC Space).
.RE
.PP
.SS 	Menu navigation
When a menu is open, the cursor-left or cursor-right keys 
cycle through the pull-down and flag menus.
Alt-cursor-left and Alt-cursor-right navigate quickly between 
the two sets of menus (pull-down or flag menus).
.br
When a submenu is open, cursor-left goes back to the 
parent menu, cursor-right opens its next menu to the right.
.PP
	There are three methods to navigate within a menu:
.RS
.IP \(bu
With the keyboard: open menu as described above, navigate 
with cursor keys or by typing the first letter of the desired 
menu item (which cycles through all items starting with that 
letter, or containing a word starting with that letter);
activate menu item with Enter key.
.IP \(bu
With mouse clicks: open menu with click (and release) 
mouse button, switch to other menu with another click, click 
on item to activate it. The mouse wheel may be used to navigate 
menu items.
.IP \(bu
With mouse dragging: open menu with mouse button (left or 
right), browse menus and items with button held down, activate 
selected item with releasing mouse button.
.RE
Methods may be mixed, e.g. open a menu with either mouse click 
or keyboard, navigate with mouse wheel, then select with Enter.
.PP
When selecting a menu item, in most cases the associated function 
is carried out and the menu closed afterwards.
In some cases, an option is toggled and the menu stays open 
(esp. in Info menu: Han info pronunciation selection, 
character information "with" attributes selection).
.PP
.PP
.PP
	\fIScrollable menus:\fR In a low-height terminal (e.g. 24 lines), 
longer menus (especially the Encoding menu and the Input Method 
menu) may not fit on the terminal. All menus are scrollable 
with cursor keys, including Page Down/Up, Home, End keys.
.br
When the window size is changed, open menus are closed in 
order to prevent resizing and repositioning problems; this is 
planned to be enhanced in a future version.
.SS 	Hints
.PP
	\fINote:\fR Your mouse driver or Windows system may be 
configured to generate multiple (e.g. 3) mouse wheel events on 
one mouse wheel movement (e.g. with Windows). An option 
-L1 could compensate for that 
scaling (as mined applies a mouse wheel factor by itself which 
is 3 by default).
.PP
	\fILayout configuration:\fR See Menu 
display below for configuration of menu appearance.
.PP
	\fIConfiguration hint:\fR On Unix, in order to make Alt work 
as a modifier, set the xterm resource metaSendsEscape to true 
and the rxvt resource meta8 to false as suggested in the 
example file Xdefaults.mined in the 
Mined runtime support library.
(With older versions of xterm, setting eightBitInput to false 
may be required instead; this xterm option doesn't actually 
disable 8 bit input as its name might suggest.)
With xterm, this setting can also be enforced dynamically with 
the +D option.
.SS Interoperable and multiple paste buffers
.SS 	System paste buffer / Clipboard
In the Windows/cygwin version, Shift-Ins inserts the Windows 
clipboard rather than the mined paste buffer. Copy to paste 
buffer always fills paste buffer and the clipboard, too.
In this case, the lineend type is not copied from the clipboard 
(i.e. typically CRLF) but adapted to the current line.
.SS 	Inter-window paste buffer
Mined can perform copy/paste operations within different 
editing sessions (parallel or subsequent invocations of mined): 
The command HOP Ins (e.g. ^G ^P) will insert the most 
recent paste buffer copied or cut in any of the user's mined 
sessions.
This can also work remotely in a network; to configure this 
features, see 
Common paste buffer configuration.
.SS 	Multiple paste buffers
Mined provides emacs-style multiple paste buffers that 
are organised as a buffer ring. Every buffer cut or copy 
operation (that places the text between the marked and the 
current position to the buffer) creates a new buffer and 
stacks it to the list of buffers.
If the feature "deleted word/line appends to buffer" is enabled 
(+VV) the commands delete-end-of-line 
(^K), delete-word (^T) and delete-end-of-sentence (currently 
emacs mode only) append to the top buffer (disabled with the 
option -VV).
.br
To paste a non-top-most buffer, paste the most recent buffer 
first as usual, then use the buffer-ring command 
(Alt-Ins or Ctrl-F4, or M-y in emacs mode) to 
exchange the pasted text with the previous buffer. This 
can be repeated, going down the stack of buffers, and at 
its bottom, starting over from the top again.
.SS Keypad modes and Visual selection
Mined highlights text selection visually, with both 
mouse selection and keyboard selection.
.SS 	Keypad modes
.RS
.IP \(bu
In Shift-select mode (enabled with option -kS), 
Shift-modified keypad keys start or extend visual text selection;
otherwise the keypad functions are not modified, so that e.g. 
the useful quick Mark/Copy selection with Home/End keys can 
still be used.
.br
\fINote:\fR terminal support to report Shift-modified 
cursor keys is required to enable this feature.
.br
The option adjusts some other interactive responses as well 
to match common selection practice:
.RS
.IP \(bu
auto-copy (after click-and-drag) is disabled
.IP \(bu
Shift-mouse-left-click extends the selection (if supported by terminal)
.IP \(bu
mouse-right-click does not extend the selection 
before opening the menu
.IP \(bu
in addition, Shift-HOP is mapped to the Copy function
.RE
Shift selection keypad functions are as follows:
.TP
Shift-Left
select character left
.TP
Shift-Right
select character right
.TP
Shift-Control-Left
select word left
.TP
Shift-Control-Right
select word right
.TP
Shift-Up
select line up
.TP
Shift-Down
select line down
.TP
Shift-Control-Up
select to previous beginning of paragraph
.TP
Shift-Control-Down
select to next beginning of paragraph
.TP
Shift-Home
select to beginning of line
.TP
Shift-End
select to end of line
.TP
Shift-Control-Home
select to beginning of text
.TP
Shift-Control-End
select to end of text
.TP
Shift-PgUp
select to previous page
.TP
Shift-PgDn
select to next page
.TP
Shift-5 \fI(on keypad)\fR
copy selected text to paste buffer
.PP
.IP \(bu
In Windows keypad mode 
(enabled with option -kw, also 
implied by Windows emulation option +ew),
additionally non-shifted keypad keys are changed to perform the 
more common functions, at the price of losing the easy Home/End 
assignment to invoke Mark/Copy to paste buffer (which can however 
be overridden with options -kc for the 
small ("editing") keypad and -kC for the 
big ("numeric") keypad).
Also, some Control-modified keys change their function 
assignment to match more common usage.
.br
Keypad functions include the Shift selection functions above 
and add the following functions:
.TP
Home
move cursor to previous beginning of line
.TP
End
move cursor to next end of line
.TP
Control-Left
move cursor to previous beginning of word
.TP
Control-Right
move cursor to next end of word
.TP
Control-Up
move cursor to previous beginning of paragraph
.TP
Control-Down
move cursor to next beginning of paragraph
.TP
Control-Home
move cursor to beginning of text
.TP
Control-End
move cursor to end of text
.TP
Control-Backarrow
delete word left
.TP
Control-Del
delete word right
.TP
HOP Control-Backarrow
delete to beginning of line
.TP
HOP Control-Del
delete to end of line
.PP
.RE
Shift-select mode (-kS) 
may become the default in a future version.
.PP
Visual selection is toggled by the following actions:
.RS
.IP \(bu
Start visual selection highlighting:
.RS
.IP \(bu
mouse click (then drag)
.IP \(bu
Mark command (Home key, Control-space, or Mark/Select from quick menu or Edit menu)
.IP \(bu
(in Shift-select mode) Shift-cursor keys
.RE
.IP \(bu
Extend visual selection highlighting:
.RS
.IP \(bu
mouse drag
.IP \(bu
keyboard navigation
.IP \(bu
(in Shift-select mode) Shift-cursor keys
.IP \(bu
mouse click
.IP \(bu
(in Shift-select mode) Shift-mouse-click
.RE
.IP \(bu
Hide visual selection highlighting:
.RS
.IP \(bu
modify text
.IP \(bu
(unless in Windows keypad mode) Copy (End key or from quick menu or Edit menu)
.IP \(bu
Mark twice (e.g. press Home Home)
.IP \(bu
(unless in Windows keypad mode) mouse release (after drag, with auto-copy option)
.IP \(bu
Find (except Find matching parenthesis) (except with "keep on search" option)
.IP \(bu
Goto text position
.IP \(bu
Open file
.RE
.IP \(bu
Re-enable selection highlighting and continue previous selection:
.RS
.IP \(bu
"continue Select" from menu
.IP \(bu
(in Shift-select mode) Shift-cursor keys
.IP \(bu
(in Shift-select mode) Shift-mouse-click
.RE
.RE
Selection behaviour can be tuned with a few options in the 
Paste buffer menu.
.PP
\fINote:\fR The actual behaviour of the paste buffer functions 
acting on the text selection (Copy, Cut) are not affected by the 
visual selection; they work alike even if the selection is hidden.
.br
The Delete key is the only function 
that is actually modified by visual selection, following a 
dual-mode behaviour consistent with most contemporary text editors:
if a non-empty visual selection is active, it deletes the 
selected area (Cut to paste buffer),
otherwise, it deletes the next character.
.SS 
Rectangular copy/paste
Rectangular copy/paste area mode can be toggled on the 
Paste buffer flag (see also description of 
Quick Options (Mode indication) flags), 
in the Paste buffer menu, with HOP Mark while already on marked position, 
or preselected with the option +[.
.br
Rectangular selection can also be toggled temporarily by using 
Alt with the left mouse button while moving the mouse for 
drag-selection.
Note, however, that a subsequent paste will apply the untoggled mode.
.br
\fINote:\fR Rectangular area is a property of the 
copy/paste function, not of the paste buffer.
.br
\fINote:\fR The result of rectangular paste may not be 
quite as expected in these cases:
.RS
.IP \(bu
The paste buffer contains lines of different length.
.IP \(bu
The border of the paste area (in either the text or the 
paste buffer) contains characters of different width, like 
TAB, double-width, or isolated combining characters, or even 
incomplete character codes.
.RE
.SS Text position markers
A default marker for quick use and additional 
16 numbered text markers are available. 
.br
Marker 0 has a special function: 1. it is set when opening a 
file at the memorized position, 2. whenever a new current 
marker is set, the previous one is pushed to marker 0.
.br
For keyboard commands to set and move to markers, 
see Text marker navigation
in the Command reference below.
.SS Text position marker stack
In addition to the explicit text markers, 
mined implicitly maintains a marker stack to support navigation 
and orientation when browsing files.
Whenever a command moves the position by a far distance 
(Go to marker, Go to line, Go to file beginning/end, 
Go to next/previous file, Search functions including Search 
identifier definition across files, Replace with confirm), the 
current position is first pushed to this stack.
Later, in order to return to the previous position, use 
the command ESC Enter (Alt-Enter) to move along the positions 
in the marker stack.
The command HOP ESC Enter (HOP Alt-Enter) moves again forward 
along the stack.
.SS Paragraph justification / word wrap
Manual paragraph line/word wrap is invoked with the 
justify command (ESC j or ESC J); it justifies the current 
paragraph (wraps its lines/words) according to the effective 
margins and paragraph termination mode.
.br
\fIClever justification:\fR With ESC j, mined automatically 
determines left margins depending on the current paragraph and 
line contents. Heuristic detection of numbered items will trigger 
automatic indentation.
.br
\fINormal justification:\fR With ESC J, mined justifies 
strictly according to the margin values currently configured.
.br
See commands listing below "ESC j" 
for margin setting commands.
.PP
\fIParagraph termination modes:\fR
Two different definitions of paragraph end are available.
.RS
.IP \(bu
The primary mode is to add a space at the end of each line 
when the paragraph continues and to end the line without 
space where the paragraph ends. This seems an intuitive 
way and as a big advantage over other approaches, it is 
transparent with respect to visual formatting, i.e. no 
text property is required that would affect visual layout 
of the text.
.br
\fINote:\fR Additional visual support of paragraph end 
detection is available with the mined option -p that 
distinguishes paragraph/line end display.
.IP \(bu
The other word-wrap mode is to add an empty (blank-only) 
line after each paragraph. Obviously this imposes more 
additional requirements on text formatting discipline and 
reduces freedom of text layout.
.RE
The mode in effect is indicated in the Quick Options (Mode indication) flags display; 
see description of Quick Options (Mode indication) flags.
.SS Auto indentation
By default, mined acts in auto-indent mode: When you enter a 
newline, the following line will be filled with the same 
prefix of space characters (Space or Tab) as the current one.
This option can be toggled from the Options menu.
A new line without auto indentation can be entered 
with the ^O command.
.PP
	Auto indentation is automatically suppressed if text is entered 
very fast (by heuristic detection of input speed) in order to 
allow unmodified copy and paste using terminal mouse functions.
.SS \(->NEW\(-> Advanced list support (bullet and numbered lists)
A new paragraph (according to the currently selected 
paragraph end mode, or considering Unicode paragraph separators) 
after a bullet or numbered item will clone the bullet or 
auto-increment the numbering.
The undent function (smart Backspace) considers list bullets 
or numberings, removing the last level.
.br
\fINote:\fR An item paragraph is considered to start at 
a bullet or numbering even if the previous line does not 
terminate a paragraph.
.SS 	Structure input commands
A pair of parentheses with matched indentation can be entered 
by prefixing a parenthesis character with HOP.
For example, HOP "{" would enter a pair of "{" "}", both 
auto-indented on their respective new line. Other pairs are 
"(" ")", "[" "]", "<" ">".
.br
	HOP "/" enters an indented Javadoc comment frame.
.SS 	Back-Tab (Undent function / reverse indent)
\fISmart backspacing:\fR A Backarrow key from a position that is 
only preceded by white space on the line and on the line above 
will revert the input position to the previous matching 
indentation level.
To avoid auto-undentation ("Delete single"), use 
Ctrl-Backarrow or F5 Backarrow to delete only one character left, 
or toggle auto-indentation off from the Options menu.
.br
\fINote:\fR In xterm, Ctrl-Backarrow only works if configured 
in your X configuration, see the example configuration file 
Xdefaults.mined in the 
Mined runtime support library.
.br
\fINote:\fR\(->NEW\(-> 
Configuration option plain_BS (command line 
option +Bp) switches the Backarrow key 
from smart backspacing to plain backspacing, i.e. no auto-undent 
and only delete one combining character of a combined character.
Use Shift-Control-Backarrow to perform smart backspacing then.
.SS 	Tab expansion
With one of the options -+8, 
-+4, -+2, 
a Tab key input will be expanded to an appropriate number of 
Space characters instead of inserting a Tab character. You can 
still insert a literal Tab character with Ctrl-V Tab.
.SS Search and replace multiple lines
Mined has overcome the typical Unix tool limitation of line 
orientation in search operations.
Search and replacement patterns can contain embedded newlines. 
Enter a newline (linefeed character) in the search string with 
^V^J or \\n (or \\r to match CRLF newlines).
.br
\fINote:\fR If combining multi-line substitution with 
substitution references (&, \\1, etc), lineend types are not 
strictly preserved.
.SS \(->NEW\(-> Substitution references
Mined supports 10 substitution references (like sed), 
a full match reference "&" and 
\(->NEW\(-> 
numbered references "\\1" through 
"\\9" to refer to the corresponding 
matching sub-expressions marked "\\(...\\)" 
in the search pattern. Sub-expressions can be nested.
.SS Header line underlining
The command HOP "-" (e.g. Ctrl-G -) underlines the 
header line before the cursor position with as many "-" 
characters as needed; it applies to the current line unless 
the cursor is at a line beginning in which case it applies to 
the previous line.
.SS Automatic backspace mode adaptation
There is much confusion about what character codes are delivered 
by the Backarrow and Del keyboard keys in different 
operating environments and configurations.
For proper operation, the "stty erase CHAR" configuration should 
generally be set correctly to reflect the actual code emitted 
by the terminal.
Mined detects this setting and adjusts its handling accordingly, 
so that the "Backarrow" key should normally work as expected 
(delete a character left).
.PP
.PP
.SH Overview: input support features
.SS Character input
Mined provides several methods to support input of special 
characters that may not be easily available on the keyboard.
.RS
.IP \(bu
Accented and mnemonic input support
defines Accent prefix keys 
to compose accent combinations with subsequently entered characters.
.IP \(bu
It also provides 
Character input mnemonics for 
easily memorisable input of a wide range of characters, 
including most composed Unicode characters.
.IP \(bu
Input support commands 
include a quick shortcut for two-character mnemonics.
.IP \(bu
Input support commands 
also provide for character input by hexadecimal / octal / decimal 
character code or Unicode value, including support for 
subsequent entry of multiple numeric characters according to 
ISO 14755.
.IP \(bu
Keyboard mapping switching the keyboard 
to support another script.
This feature also provides \fICJK input methods\fR.
.RE
.SS Structured input
.RS
.IP \(bu
HTML tag input
(starting/closing or embedding marked text).
.IP \(bu
Auto indentation and Back-Tab.
.IP \(bu
Structure input commands: 
Input of indented matching parentheses and Javadoc frames.
.IP \(bu
Paragraph justification (line/word wrap).
.IP \(bu
Header line underlining
.RE
.SS Special features
.RS
.IP \(bu
Smart quotes
automatic transformation of entered straight quote marks into 
typographic quotation marks (style can be selected in flags area) 
or apostrophe, separate accents as appropriate typographic symbols, 
as well as smart dashes and other smart text replacements.
.IP \(bu
Right-to-left script input support.
.RE
.PP
.PP
.SH Handling files with mined
.SS Tags file support / Identifier and file lookup
The ESC t command moves to the definition of an identifier 
(on which the cursor should be placed) using the tags file 
(generated by the ctags command). 
HOP ESC t prompts for an identifier. (Also available from 
search or popup menu.)
If a new file is opened for this purpose, the current 
file is saved automatically.
.br
As a special function, if ESC t is typed on an include statement 
(line beginning with "#include" or "include"), 
the included file will be opened.
.br
\fINote:\fR Like with a number of positioning commands, 
ESC t places the current position on the position marker stack 
before going to the location of the identifier definition. The 
command ESC Enter (Alt-Enter) moves back to that position, 
also saving the current file if needed first.
.SS \(->NEW\(-> Encrypted files
Mined edits encrypted files transparently.
.br
For reading or writing an encrypted file, a respective filter is 
used as configured in the runtime configuration file 
$HOME/.minedrc. See the sample configuration 
file in the Mined runtime support library 
for details. It contains pre-configured entries for using 
GnuPG (for files ending with ".gpg" or 
".pgp") or openssl (for files ending with 
".ssl").
.br
Mined does not currently provide handling for passwords or 
passphrases for file encryption. Therefore, any passwords or 
passphrases needed for encrypted file access will either have to be 
entered on every access, or password or passphrase files may be 
used as offered by the respective decryption and encryption commands 
of GnuPG and openssl. See the sample configuration file for examples.
.br
\fINote:\fR If manual password input is used with openssl, 
be careful to remember the password which is newly assigned every 
time the file is written.
.br
\fINote:\fR When editing an encrypted file, the backup file 
will be encrypted, too. Decrypted content is exchanged with the 
filters using pipes, so no intermediate decrypted version is stored 
on the file system. Copy/paste text blocks are not encrypted, though, 
but they are readable for the current user only anyway (on any 
nontrivial file system). The same applies for a recovery file 
that mined writes in emergency cases to save the edited text.
.SS Data safety and security
Mined has a robust and defensive concept of handling edited 
text and file contents in case of any kind of program or 
system errors.
.SS 	Backup files
With command line option(s) +b, 
mined saves a backup copy of any file being overwritten 
(like saving the file being edited, saving to a different file, 
copying the paste buffer to a file).
It supports three backup file name conventions and a few 
combined modes to select among them:
.TP
+b-
no backup files
.TP
+bs
simple backup files: \fIfilename\fR~
.TP
+be
emacs style numbered backup files: \fIfilename\fR.~N~
where N are increasing version numbers
.TP
+bv
VMS style numbered backup files: \fIfilename\fR;N
(using the original notation of the VMS operating system)
where N are increasing version numbers
.TP
+bn
numbered backup files, either emacs or VMS syntax, 
whichever already exists (with a higher version number)
.TP
+ba
automatic backup files, either numbered if numbered 
backups (either style) already exist, or simple
.PP
\fINote:\fR In order to preserve possibly existing hard links 
to the file being edited, it is actually copied, not just 
renamed for the backup version 
(like with joe, vim, or emacs with option backup-by-copying).
\fINote:\fR In mined 2011.19, 
+ba (automatic simple/numbered backup) is the default, and
+b is a shortcut for +ba.
This is subject to change in a future version, however.
\fINote:\fR To select your preference, use the 
runtime configuration file $HOME/.minedrc, 
or include the respective option in the environment variable 
MINEDOPT, or set the environment variable 
VERSION_CONTROL (compatible with usage 
by emacs and cp), with the following mapping:
.TP
VERSION_CONTROL
$HOME/.minedrc
command line option
.TP
none \fIor\fR off
backup_mode -
+b- - no backups
.TP
numbered \fIor\fR t
backup_mode e
+be - emacs style numbered backups
.TP
existing \fIor\fR nil
backup_mode a
+ba - automatic backup mode
.TP
simple \fIor\fR never
backup_mode s
+bs - simple backups
.TP
backup_mode n
+bn - numbered backups (automatic style)
.TP
backup_mode v
+bv - VMS style numbered backups
.PP
\fINote:\fR To place backup files in a different directory 
than the original file, use the environment variable 
BACKUP_DIRECTORY or BACKUPDIR.
It can be either an absolute pathname (e.g. 
$HOME/.backups) or a relative pathname 
(e.g. .~) in which case backup files 
are stored relative to the respective working directory of 
mined.
\fINote:\fR On VMS, backup options are ignored as VMS handles 
backup files natively.
.SS 	File locking
Mined checks and maintains interoperable lock files, which are 
symbolic links mentioning the user and machine currently 
editing the file (not on MSDOS and VMS).
If the user tries to modify the text of a file locked by somebody 
else, mined informs the user and changes editing mode to view-only.
The lock can be overridden (removed or ignored) from the File menu.
.br
Mined implements workarounds for network file systems that do 
not support handling lock files or symbolic links properly: 
cygwin symbolic links that appear as plain text files on 
Samba/CIFS mounted file shares,
and lock files that could be created but cannot be deleted due 
to weird permission configuration of a network file share.
.SS 	Edited text / Recovery files
Every care has been taken to prevent loss of the edited text 
in case of save errors or accidental quit commands etc; mined 
always prompts before discarding any modified text, even when 
editing without an associated filename (in which case other 
popular editors ignore loss of edited text).
.br
There are three cases, however, in which edited text would be lost:
.RS
.IP \(bu
if the user explicitly discards edited text (e.g. ESQ q and 
not answering the "Save?" question with "y")
.IP \(bu
if mined is sent an external terminating signal
(e.g. on terminal I/O error); two exceptions are the SIGKILL signal 
(which cannot be caught by a program) and SIGTERM (see below)
.IP \(bu
in the rare case that mined should fail with an internal signal
(e.g. if out of memory)
.RE
In these cases, mined can save the edited text in a recovery file 
dir/#name# (when editing file 
dir/name); in the explicit case, this 
is only done if the answer to the "Save?" question is "r" 
(to "recover later").
If the edited file is later opened, and a recovery file still 
exists (which is newer than the file being opened), mined will 
display a notice. In the File menu, there is the option to 
recover the text from the recovery file.
\fINote:\fR The recovery file is interoperable with emacs 
(as are the use cases); however, mined is superior here 
because emacs mangles non-ASCII characters in recovery files.
Mind, though, that interoperability with respect to recognising 
recovery files depends on consistent configuration of their 
location; see the directory configuration option below.
\fINote:\fR If mined is sent an explicit SIGTERM signal 
it tries to terminate normally instead, writing modified text 
to the file being edited, including interactive handling if needed.
\fINote:\fR After catching a signal, mined also tries an 
emergency save of the edited text into a "panic file" 
in one of the directories $TMPDIR, 
$TMP, $TEMP, 
/usr/tmp, or /tmp 
(whichever variable is defined first and directory is writable 
in this order; or similar directories under VMS or MSDOS).
The file contains the edited text, identical to the recovery file.
It is written first, before the recovery file, to provide a quick 
save attempt e.g. if the system is crashing and the file system 
of the edited file is no longer available.
\fINote:\fR If possible, mined also tries to continue 
normally after panic handling (unless multiple external signals 
are nested).
\fINote:\fR To place recovery files in a different directory 
than the original file, use the environment variable 
AUTO_SAVE_DIRECTORY or AUTOSAVEDIR 
or BACKUP_DIRECTORY or BACKUPDIR 
as described for backup files above.
.SS 	Overwriting files and Change monitoring
If any command is issued to write to a file not previously 
read in (after change of file name or working directory, or 
with a Copy to file command), mined prompts for confirmation.
.br
Also, if mined detects that the file being edited has been changed, 
it displays a notice and asks for confirmation before saving.
To this aim, mined checks the modification time, 
\(->NEW\(-> file size, 
device and inode (in case the file got replaced by 
rename/move/mount operations).
This is checked if mined is notified of refocussing the window 
(if supported by the terminal), and after shell commands 
(ESC !, ESC c, ESC z).
.SS 	File access permissions
When creating a new file, its access permissions are set 
according to the default behaviour set in the user 
environment (umask setting in Unix).
However, when cloning a file (with Save As / Set Name / ESC n 
/ ESC d), file access permissions of the originally opened file 
are preserved and cloned.
.br
The +x command line option adds 
executable permission to newly created files
but only to those users that are also given read permission 
by the rules above.
.SS Special file types
.SS 	Character or block device files
Mined rejects reading from or writing to a device file in order 
to prevent being blocked.
Exception: /dev/clipboard on cygwin.
.SS 	FIFO files
Mined can edit a FIFO file (named pipe) like any other file.
Before mined can finish loading from the pipe, another process 
needs to have written to it and then close it.
Before mined can finish saving to the pipe, another process 
needs to have opened it for reading.
.SS 	Pipe input
When invoked within a pipe, redirecting input, mined loads its 
text buffer from standard input.
\(->NEW\(-> 
Mined does not manipulate the screen mode before data is available 
from the pipe, so to some extent it can interwork even with 
screen programs providing its input.
.SS 	Pipe output
In the "Editing for standard output" mode (i.e. when invoked 
within a pipe, redirecting output), only one "file save" 
operation can be performed writing to standard output.
If more than one such operations are issued (e.g. using the 
ESC w / F2 , F3, or suspend command) only the first one 
will write the text buffer to standard output; any subsequent 
one is treated as usual (with empty file name).
\(->NEW\(-> 
If mined exits after writing to a pipe, it does not manipulate 
the screen mode after beginning to write, so to some extent it 
can interwork even with screen programs taking its output.
.SS Line end modes and binary-transparent editing
Mined is binary transparent. It can handle all types of 
line ends (Unix (LF), DOS (CRLF), Mac (CR, with option 
+R), 
\(->NEW\(-> 
ISO 8859/EBCDIC Next Line (NL, not after auto-detection of 
text encoding), and Unicode separators (LS, PS)) 
simultaneously in the same editing session. They are indicated 
by different visible line end indications. Files without 
trailing line end can be edited and created (using the delete 
character right function on the last line end). NUL characters 
are handled as virtual line ends. Lines too long for internal 
handling are split transparently (with a "none" virtual 
line end).
.br
	Character codes that are illegal in the currently selected 
text encoding are maintained transparently and are clearly 
indicated (e.g. illegal UTF-8 sequences in Unicode text).
.br
	Files with mixed encoding (e.g. UTF-8 / 8 bit sections) can 
be edited comfortably.
.br
	\fIInput:\fR To enter a NUL character, use ^V # 0 or 
^V NUL or ^V Ctrl-Space (if the keyboard supports Ctrl-Space).
.SS File info: Memory of file position and editing style parameters
On every file saving command, mined remembers the last text position, 
paragraph justification margins (only if automatic paragraph 
justification is active), selected Smart Quotes style and 
Input Method (Keyboard Mapping), and TAB display width.
File info memory is relative to the working directory, 
using a hidden file info file (.@mined -
mined also handles its DOS short name @MINED~1 
where it occurs, to provide some interoperability with the DOS 
version of mined); previously used file marker files 
(@mined.mar) will be migrated and 
cleared from duplicate entries.
.PP
	\fINote:\fR File information is stored every time the user 
invokes a command to save the file (even if no write is 
performed because the text has not been edited).
When editing that file again (from the same working 
directory), mined will automatically move to that position 
(and set text marker 0 to it).
.SS 	File info grooming
Mined checks and removes duplicate entries (from previous versions) 
in the file info file.
With option +@, mined also 
checks whether file info entries correspond to actual files 
that exist and are visible to the user; 
it will otherwise remove such entries.
Mined can be called with this option alone and will then exit after 
file info grooming. Mind, however, that files may be invisible 
only temporarily (e.g. due to unmounted file systems, or unplugged 
USB drives), and will get their info entries removed then, too.
.SS 
File chooser
To select a filename for a file operation (e.g. open, save, insert, 
write buffer), mined opens an interactive file chooser that presents 
a listing of files and directories in the current directory 
(for the change directory command, only directories are shown).
The list can be navigated and manipulated in these ways:
.RS
.IP \(bu
cursor keys (including page down/up, end/begin)
.IP \(bu
mouse movement and scroll
.IP \(bu
entering a filename prefix which navigates to the first file 
matching it
.IP \(bu
TAB will usually copy the current filename into the editing 
field (if it was partially matching a file name, it is thus 
completed, similar to file completion on the command line but 
case-insensitively)
.IP \(bu
TAB on a directory will navigate the file chooser into it
.IP \(bu
TAB or HOP while the filename editing field is containing 
wildcards interprets the entered file name as a pattern and 
switches to a filtered file listing (recognising
"*", "?", 
"[abc-x]", "[^abc-x]" 
wildcard expressions, no escapes)
.IP \(bu
Enter on a directory will navigate the file chooser into it 
(unless for the ESC d command in which case it is selected)
.IP \(bu
Enter on a selected (or entered) filename will choose the name
.RE
Also, a filename can be typed in directly (being interpreted as 
a filename prefix interactively). The filename or prefix is 
displayed in the title bar of the popup file chooser menu.
When entering file or directory names, the leading ~ notation 
to refer to one's home directory is accepted.
\fINote:\fR The full path name of the currently displayed 
directory is shown as the first entry in the file chooser menu.
\fINote:\fR A few sorting options are offered in the 
"Options" - "File sort options..." submenu.
They can also be preselected with the command line option 
+zX. See the 
file chooser options for details.
\fINote:\fR In the file chooser, filenames are interpreted 
in Unicode (UTF-8 encoding) while file name parameters given on the 
command line are interpreted in the terminal encoding. This may 
lead to inconsistent handling of non-ASCII filenames. Use the 
ESC ? command to display the file name using native encoding.
\fINote:\fR On some file systems, retrieving directory 
information can be slow.
Mined handles this and provides feedback about delayed operation, 
retrieves directory information lazy by page being displayed, 
and flushes display of the file chooser by line to provide 
visual feedback about the file information being retrieved.
.SS 
File tabs
Mined provides virtual file tabs above the header line, listing 
file names as opened via command line or file chooser. By clicking 
a file name in the file tabs panel, or hold-and-move the mouse 
over them, you can change the file being edited. If the current 
file has been modified it will be saved first.
.br
Right-clicking opens the file switcher menu (like Alt-F3),
control-right click opens the file opening menu (like F3),
control-mouse wheel scroll switches to the next/previous file tab.
.SS 
File switcher
The File switcher presents a list of active files to select from, 
comprising files supplied on the command line, and files 
opened or saved later.
Invoke the File switcher with Alt-# or ESC #, or Alt-F3 or ESC F3, 
or from the File menu. The Close file command (from the File menu) 
closes the current file and removes its name from the list.
The list can be navigated and manipulated in these ways:
.RS
.IP \(bu
cursor keys (including page down/up, end/begin)
.IP \(bu
mouse movement and scroll
.IP \(bu
entering a filename prefix which navigates to the first file 
matching it
.IP \(bu
Enter on a selected (or entered) filename will choose the name
.RE
To reload the current file and stay (approximately) at the 
current position, use ESC Enter (Alt-Enter) after reloading.
.SS Page length
The command ESC P sets the number of lines that mined assumes 
to be on a page. So the status line can contain the page 
number to make finding the current position in a print-out 
easy. Also the Goto Line/% command (^G etc.) accepts a final 
 'p' or 'P' in which cases it positions to the top of the given 
page.
This information will be associated and stored with the file 
name if file position memory is enabled; see 
File info: Memory of file position and editing style parameters
above.
.SS Restricted mode (tool mode)
Restricted mode is triggered with
\fC
.DS
.br
		<code>mined -- [ filenames ... ]
.br
.DE
\fR
or (if installed)
\fC
.DS
.br
		<code>rmined [ filenames ... ]
.br
.DE
\fR
In restricted mode, only the file opened when mined was started can 
be edited, no commands changing file name reference, involving other 
files (copy/paste), or escaping to a shell command will be allowed.
.SS Backup integration
From the File menu, a backup command is available that invokes a 
"bu" script (which must reside in the user's command search path).
.SS Version control integration
From the File menu, checkout and checkin commands are 
available that invoke "co" or "ci" scripts, respectively 
(which must reside in the user's command search path).
This offers a gateway to ClearCase or other version control 
systems; mined applies automatic save or screen update 
as appropriate.
.SS Printing
From the File menu, a print command is available that 
prints the text currently being edited.
If the script uprint is installed and configured 
properly, printing works in any selected character encoding.
See Printing configuration for further 
details.
.PP
In Windows, mined uses notepad /p for printing.
.br
\fINote:\fR The font size interactively configured in 
notepad also affects the print size; with a 
fixed-width font, a font size of not more than 10pt gives you 
at least 80 characters per line; if 72 characters per line are 
enough, you can use 11pt font size.
.PP
.PP
.SH Working with mined
.SS Quick Options (Mode indication) flags
The right side of the top menu bar displays a number of 
one-letter or two-letter indications for certain modes; 
the associated flag menus can be opened from here with a 
mouse right-click, or the modes can be toggled quickly with 
a middle-click.
(Keyboard shortcuts for handling flags and menus are also 
available.)
.RS
.IP \(bu
Information display mode
.RS
.IP \(bu
	"?": this flag menu offers options 
for permanent File info, Char info, or 
Han character information display.
For Char info and Han info, further options 
can be selected to configure the information shown.
.br
(Note that in extreme situations, permanent 
File info display might cause swappping (when 
editing a file that does not fit completely in 
memory, e.g. large file on old system). In 
that case, disable the feature.)
.RE
.IP \(bu
(In non-Latin-1 text and terminal mode only) 
Input Method (Keyboard Mapping)
.RS
.IP \(bu
	"--": no keyboard mapping 
is active.
.IP \(bu
	"...": a two-letter 
input method tag indicates that an according 
keyboard mapping is active, 
mapping keyboard input to characters of 
the selected Unicode script range, or 
using a more complex CJK input method involving 
"pick list" selection menus.
See Keyboard Mapping and Input 
Methods below.
.RE
.RS
.IP \(bu
	Right mouse button on this indication opens a 
menu for selection of the desired keyboard mapping.
.IP \(bu
	Left mouse button on this indication toggles between 
the current and the previous selected keyboard mapping.
.RE
.TP
\fINote:\fR In the open Input method menu, 
the last column indicates the source of the input method 
with a short tag as follows:
.RS
.IP \(bu
	"U":
generated from Unicode data file UnicodeData.txt
.IP \(bu
	"H":
generated from Unihan database Unihan.txt
.IP \(bu
	"C":
transformed from cxterm input table
.IP \(bu
	"M":
transformed from input method of the m17n project
.IP \(bu
	"Y":
transformed from yudit keyboard mapping file
.IP \(bu
	"V":
transformed from vim keymap file
.IP \(bu
	"X":
transformed from X keyboard mapping file
.RE
.IP \(bu
Smart Quotes
.RS
.IP \(bu
	Two quote marks are displayed that act as 
automatic "smart quotes": When you type a Ф"╗ 
or Ф'╗ character (straight double or single quote), 
it is replaced by an opening or closing typographic 
quote mark (double or single, respectively), 
depending on the text context.
.IP \(bu
	Right mouse button on these indications opens a 
menu for selection of the desired quotation 
marks style.
.IP \(bu
	Left mouse button on this indication toggles 
between the current and the previous style 
selected with the menu.
.RE
.IP \(bu
Character encoding (used for text interpretation)
.RS
.IP \(bu
	A two-letter character encoding tag indicates 
the text encoding currently assumed for display.
Changing the encoding changes the interpretation 
of the text which is otherwise handled 
transparently; it does not recode the text.
.IP \(bu
	Right mouse button on these indications opens 
a menu for selection of the desired quotation 
marks style.
.IP \(bu
	Left mouse button on this indication toggles 
between the current and the previous selected 
encoding.
.RE
.TP
\fINote:\fR See 
Character encoding support below for a list of 
encodings that are auto-detected.
.TP
\fINote:\fR For hints on preselecting preferred 
text encoding (as well as terminal encoding) and a note 
on adjusting the available encodings and configuring 
the Encoding menu, see 
Locale configuration.
.RS
.IP \(bu
	"U8": 
Unicode/ISO 10646 character set / UTF-8 encoding
.IP \(bu
	"16" \fIor\fR "61": 
Unicode character set / UTF-16 encoding
(big-endian or little-endian, respectively)
.br
In contrast to the other encodings, UTF-16 
has no separate entry in the Character encoding 
menu as its internal handling is UTF-8 and 
cannot be switched while editing; these two 
flag values only indicate that the file being 
edited was found to be encoded and will be 
saved in UTF-16.
.IP \(bu
	"L1": Western 
"Latin-1" character set / ISO 8859-1
.IP \(bu
	"WL": 
Windows Latin character set / "codepage" 1252 
(superset of Latin-1)
.IP \(bu
	"L9": Western 
"Latin-9" character set (with Euro sign) / ISO 8859-15
.IP \(bu
	"Cy": 
Cyrillic character set / KOI8-RU encoding
(Russian, Ukrainian, Byelorussian)
.RE
\fIsubmenu more NE Eurasian:\fR
.RS
.IP \(bu
	"Ru": 
Cyrillic / Russian KOI8-R encoding;
used if locale environment indicates this as 
terminal encoding, not in menu, use 
"Cy" instead 
which combines KOI8-R and KOI8-U
.IP \(bu
	"Uk": 
Cyrillic / Ukrainian KOI8-U encoding;
used if locale environment indicates this as 
terminal encoding, not in menu, use 
"Cy" instead 
which combines KOI8-R and KOI8-U
.IP \(bu
	"I5": 
Cyrillic / ISO 8859-5 encoding
.IP \(bu
	"WC": 
Cyrillic / Windows Cyrillic encoding
.IP \(bu
	"Tj": 
Cyrillic / Tadjikistan encoding
.IP \(bu
	"Kz": 
Cyrillic / Kazachstan encoding
.IP \(bu
	"GP": 
Georgian character set (not Cyrillic) / 
Georgian-PS encoding
.IP \(bu
	"AR": 
\(->NEW\(-> 
Armenian character set / ARMSCII encoding
.RE
\fIsubmenu Greek/Semitic:\fR
.RS
.IP \(bu
	"I7": 
Greek / ISO 8859-7 encoding
.IP \(bu
	"I6": 
Arabic / ISO 8859-6 encoding
.IP \(bu
	"Ar": 
Arabic / MacArabic encoding (superset of ISO 8859-6)
.IP \(bu
	"I8": 
Hebrew / ISO 8859-8 encoding
.IP \(bu
	"He": 
Hebrew / Windows codepage 1255 (superset of ISO 8859-8)
.RE
\fIsubmenu more Latin:\fR
.RS
.IP \(bu
	"MR": 
Mac-Roman character encoding
.IP \(bu
	"PC": 
PC DOS character encoding ("codepage 437")
.IP \(bu
	"PL": 
PC Latin character encoding ("codepage 850")
.IP \(bu
	"LN"
where N is 2..8 or 0:
Latin-N or Latin-10 encodings / ISO 8859-2/3/4/9/10/13/14/16
.RE
\fICJK encodings:\fR
.RS
.IP \(bu
	"B5": 
Traditional Chinese character set / 
Big5 encoding with HKSCS extensions, extends CP950
.IP \(bu
	"GB": 
Simplified Chinese character set / 
GB18030 encoding, extends CP936, includes GBK encoding, 
includes GB 2312 / EUC-CN encoding
.IP \(bu
	"CN": 
Traditional Chinese character set / 
CNS / EUC-TW encoding (including 4-byte code points)
.IP \(bu
	"JP": 
Japanese character set / 
EUC-JP encoding (including 3-byte code points)
.IP \(bu
	"JX": 
\(->NEW\(-> 
Japanese character set / 
EUC-JIS-2004 (X 0213) encoding
.IP \(bu
	"32": 
\(->NEW\(-> 
Japanese character set / 
Windows "Shift_JIS" encoding / CP932
(including single-byte mappings to Halfwidth Forms)
.IP \(bu
	"SX": 
\(->NEW\(-> 
Japanese character set / 
Shift_JIS-2004 (X 0213) encoding
.IP \(bu
	"KR": 
Korean Unified Hangul character set / 
UHC encoding / CP949, 
includes KS C 5601 / KS X 1001 / EUC-KR encoding
.IP \(bu
	"Jh": 
Korean Johab character set and encoding
.RE
\fIFurther Asian encodings:\fR
.RS
.IP \(bu
	"VI": 
Vietnamese character set / VISCII encoding
.IP \(bu
	"TV": 
Vietnamese character set / TCVN encoding
.IP \(bu
	"WV": 
\(->NEW\(-> 
Vietnamese character set / CP1258 encoding
.IP \(bu
	"TI": 
Thai character set / TIS-620 encoding
.RE
.IP \(bu
Combining display (available only if the current text encoding 
contains combining characters)
.RS
.IP \(bu
	"у": combined display mode
.IP \(bu
	"`": separated display mode:
combining characters are separated from their 
base character and displayed with coloured background
.RE
.IP \(bu
HOP key active
.RS
.IP \(bu
	"H": HOP applies to next command
.IP \(bu
	"h": HOP not active
.RE
.IP \(bu
Edit mode vs. View only mode
.RS
.IP \(bu
	"E": text is being edited
.IP \(bu
	"V": text is being viewed (modification inhibited)
.IP \(bu
	\fINote:\fR this is not related to a file being 
read-only; if you "edit" and modify the text 
of a read-only file, you will have to save 
to a different file name (or discard)
.RE
.IP \(bu
Paste buffer (double flag)
.RS
.IP \(bu
	"%": normal copy/paste mode
.IP \(bu
	"[": rectangular copy/paste mode
.IP \(bu
	"=": cut/copy replaces (overwrites) paste buffer
.IP \(bu
	"+": cut/copy appends to paste buffer
.IP \(bu
	"%" or "[", "=" or "+": as above, and indicates Unicode paste buffer mode (in non-Unicode text encoding)
.RE
.IP \(bu
Auto-indent mode
.RS
.IP \(bu
	"╗": auto-indentation enabled: entering a newline 
indents the following line like the current one
.IP \(bu
	"д": auto-indentation disabled
.RE
.IP \(bu
TAB expand mode and TAB width
\(->NEW\(-> 
.RS
.IP \(bu
	"N":
\fI(where N is 2 or 4 or 8)\fR
TAB is inserted literally, TAB width is as indicated
.IP \(bu
	"N":
\fI(where N is 2 or 4 or 8)\fR
TAB is expanded to spaces, TAB width is as indicated
.RE
.IP \(bu
Automatic paragraph justification levels
.RS
.IP \(bu
	"j": justification only on request (ESC j command)
.IP \(bu
	"j": justification is performed whenever 
text is entered beyond the right margin
.IP \(bu
	"J": justification is performed whenever 
text is inserted and the line exceeds the 
right margin (slightly buggy)
.RE
.IP \(bu
Paragraph termination definition effective for justification
.RS
.IP \(bu
	"\ ": non-blank line end terminates 
paragraph (blank space at line end continues paragraph)
.IP \(bu
	"Ф": empty line terminates paragraph
.RE
.RE
.SS Scrollbar
By default, mined displays a scrollbar at the right side. It 
may be used for position indication within the text and for 
relative or absolute positioning with the three mouse buttons.
.br
In a UTF-8 terminal, mined uses Unicode character cell 
vertical eighths characters U+2581..U+2587 for a fine-grained 
scrollbar display. If your Unicode font doesn't include those 
block characters, you may switch to the cell-grained scrollbar 
with the -o1 option.
.SS Text position marker stack
On commands that jump away from the current position (HOP Mark, 
File Begin/End, Search, Search identifier definition, Search 
current character, Goto Line/%, Goto Next/Previous File), 
the current position is remembered in a position stack. 
The command ESC Enter goes backward, HOP ESC Enter forward 
in this "stack", even if this means switching the file 
being edited.
.SS Structured editing support
.SS 	HTML support: syntax highlighting and tag entry/matching
\fIHTML tag entry:\fR With the ESC H commands,
opening and closing HTML tags can be entered or (with HOP) a 
marked area can be enclosed into HTML tags.
.br
\fISyntax highlighting:\fR HTML tags and comments, 
attributes and values can be highlighted, or dimmed to set 
them back from the actual text contents; if mined detects a 
dark terminal background (works with xterm and mintty), it 
adds a highlighting background to improve the contrast.
Other highlighting modes apply to HTML comments and JSP code.
This option is activated if the file name suffix is
one of .html, .htm, .xhtml, .shtml, .mhtml, .sgml, 
\ .xml, .eml, .xul, .xsd, .xsl, .xslt, .wsdl, .dtd;
it can be toggled from the Options menu.
Additional highlighting of embedded server-side scripting is 
activated if the file name suffix is one of
\ .jsp, .php, .asp, .aspx.
.br
HTML/XML syntax highlighting can be enabled with option 
+H or using 
Preference configuration per file-type.
.br
\fIHTML tag matching:\fR With the ESC ( or ESC ) command, 
mined searches for the opening / closing HTML tag 
corresponding to the current one.
.br
\fINote:\fR While you edit within a line and change its HTML 
ending status (by entering or deleting '<' or '>'), the 
display status of subsequent lines is not changed. (You may 
refresh the display with ESC ".")
.br
\fIConfiguration hint:\fR The colour used for displaying HTML 
tags can be configured with the environment variable MINEDHTML 
using an ANSI sequence, e.g. MINEDHTML=34 (the default).
.SS 	Search structure match
With the ESC ( or ESC ) commands, mined searches for a matching 
end of various structures, like opening/closing HTML/XML tags 
(see above), matching parentheses or brackets, matching 
comments (/* */), matching conditional macros (#if...), 
mail messages (in a mailbox file), MIME attachments.
See the ESC ( command in the command 
reference for details.
.SS 	Structure input
A structure template with opening and closing ends can be 
inserted with the structured input feature. HOP followed by 
one of { , ( , [ , < enters a corresponding bracket pair, 
HOP / enters a Javadoc comment frame. HOP - enters an 
underlining line matching the previous line.
.PP
Visual structure input is supported by 
Auto indentation
.SS Password hiding
With the option -P, mined hides 
one word (separated by white space) behind the string 
"assword" in a line (to accommodate for "password" or 
"Password") and displays reverse "*" instead.
Password hiding can be disabled with +P.
.br
By default (without any P option), 
password hiding is activated when editing a file whose 
file name starts with "." (Unix "hidden" file convention).
.SS Virtual bold/underline stropping
With the option +ZZ, mined displays 
all-capital words in bold lower-case and supports their input 
using only a first capital letter, then small letters to input 
a word in all-upper-case.
This is to support editing computer programs in Algol-like 
languages in their typical publication look.
Use +Z_ for underline stropping,
disable with -ZZ. Enabled by default 
if the filename ends with ".a68".
.SS Long line splitting
Mined has an internal line length limit (> ca. 1024 characters).
When opening a file, longer lines are split. This is handled 
transparently as virtual "none" line ends are used and indicated.
When saving the file, lines will be joined again.
.SS Visible indication of line contents and display
Various options are available to indicate line control characters 
(Tab and line-feed) as well as shifted line display (of lines 
longer than the screen width). 
(So you can see how many dummy blank spaces there are before the 
line ends or how many superfluous blank spaces precede a Tab 
character.)
.br
	Environment variables can be used to modify these indications. 
See Display layout for details.
.br
	Default indications and according configuration variables:
.TP
Ф
/ \*(15
LF (Unix-type line end)
.br
customize indication with MINEDRET or MINEDUTFRET 
(may contain up to 3 characters to configure different 
appearance behind the line end)
.TP
Ф
/ \*(15
CRLF (MSDOS-type two-character line end)
.br
(х on black and white terminals)
.br
customize indication with MINEDDOSRET or MINEDUTFDOSRET
.TP
Ф
/ \*(15
CR (Mac-type line end)
.br
(@ on black and white terminals)
.br
customize indication with MINEDMACRET or MINEDUTFMACRET
.br
transparently handled and displayed with 
+R command line option
.TP
║
NUL character (pseudo line end)
.TP
г
"none" line end (virtual line end as used to split 
input lines too long for internal handling; will be 
joined into a single line when saving the file)
.TP
Ф
\(->NEW\(-> 
NL (U+0085, ISO 8859/EBCDIC Next Line)
.TP
Ф
/ \*(15
LS (U+2028, Unicode line separator)
.TP
Х
PS (U+2029, Unicode paragraph separator)
.br
customize indication with MINEDPARA or MINEDUTFPARA
.TP
Х
end of paragraph (if enabled by -p)
.br
customize indication with MINEDPARA or MINEDUTFPARA
.TP
и
no-break space (Unicode character U+00A0)
.TP
╗
line extending the end of the screen line
.br
(move cursor right to shift line display)
.br
customize indication with MINEDSHIFT or MINEDUTFSHIFT
.TP
Ф
line shifted out left of the screen line
.br
(move cursor left to shift line display back)
.br
customize indication with MINEDSHIFT or MINEDUTFSHIFT
.TP
и
position spanned by Tab character
.br
customize indication with MINEDTAB or MINEDUTFTAB 
(may contain up to 3 characters to configure different 
appearance within the Tab span)
.PP
.PP
\fIConfiguration:\fR Display colour of the indications is 
by default red or a dimmed foreground colour; this can be changed 
with the environment variable MINEDDIM, 
display colour for Unicode line end indications and other 
special (esp. invalid) character indications with <span 
class=env>MINEDSPECIAL. Their values should be the 
numeric part of an ANSI terminal control sequence, e.g. 31 for 
red, "33;44" for yellow text on blue background.
MINEDDIM can also be set to an integer 
percentage value (e.g. MINEDIM="50%") 
to have mined apply dim colour to the indications; the colour 
value is computed from the current foreground and background 
colours (if the terminal supports their detection).
.br
For more details and recommended settings see the example 
script file profile.mined in the 
Mined runtime support library.
Default values are compiled in and can be overridden by setting 
the variables to empty values.
.PP
\fINote:\fR With the -F option, 
mined limits usage of special characters for line indication 
and suppresses the interpretation of the MINEDUTF* environment 
variables.
.SS Function key help bars
For quick reference of functions attached to function keys, 
modified function keys, and other modified keys (as used for 
accent prefix functions), a number of help bars can be 
displayed in the bottom line.
.br
F1 followed by another F1, optionally modified by a combination 
of Control/Shift/Alt, displays a help line with function 
attachments to the respectively modified function keys; F1 followed 
by Ctrl-1/Alt-1/Alt-Ctrl-1 or Control with a punctuation key 
(e.g. Ctrl-,) displays a help line for the respective accent 
prefix functions attached.
See the F1 help bars command reference for details.
.SS Menu display
Menu borders are displayed using Unicode Box Drawing characters 
in a UTF-8 terminal, using VT100-mode graphics characters if 
they are detected to be available, or using ASCII graphics otherwise.
.br
\fIConfiguration hint:\fR The menu style option 
-Q is available to configure your 
style preference; see also 
Terminal interworking problems for configuration hints 
to deal terminal-related graphics display trouble.
Alternatively, the option -f reduces 
font assumptions and adjusts usage of special characters accordingly.
.br
In addition to round or rectangular corners, also fancy 
item selection display style can be selected 
(-Q).
.br
With a non-UTF-8 terminal, if your system's 
termcap/terminfo database does not indicate the VT100 graphics 
capability for the terminal you use but you know (or want to 
try if) your terminal has that capability, use of graphical 
borders can be enforced with the -Qv 
command line option.
.br
\fIConfiguration hint:\fR The colour of menu borders can be 
changed with the environment variable MINEDBORDER.
The marker of selected items in flag menus can be changed with 
the environment variable MINEDMENUMARKER.
.br
\(->NEW\(-> 
The apperance of the menu background and borders can be configured 
in the runtime configuration file $HOME/.minedrc.
.PP
.PP
.br
.SH Language support
Most of the information in this chapter is redundant. It 
collects language-specific features described in the other 
chapters in a more technical context, here assorted by 
languages / scripts for more convenient quick reference.
.br
Language-specific typographic quotation marks are 
supported by the Smart quotes feature.
See Quotation Marks Styles 
on the mined web site for a listing of locale-specific styles.
<!p>
.SS Latin-script languages
.SS 	Character sets
In addition to Unicode, mined supports Latin-1 (ISO 8859-1), 
Latin-9 (ISO 8859-15), 
Mac-Roman, Windows (CP1252) and DOS (CP437, CP850) Western 
character sets, as well as further ISO character sets for 
Central European (Latin-2, ISO 8859-2), South European 
(Latin-3, ISO 8859-3), Turkish (Latin-5, ISO 8859-9), 
Nordic (Latin-6, ISO 8859-10), Baltic (Latin-7, ISO 8859-13), 
Celtic (Latin-8, ISO 8859-14), Romanian (Latin-10, ISO 8859-16), 
\(->NEW\(-> 
EBCDIC (CP1047), 
\(->NEW\(-> 
and ISO 6937.
To view and edit a file in one of these encodings, select it 
from the Encoding menu (section "8 Bit" for Western, or 
submenu "more Latin"), or use the respective command line parameter.
See Character encoding flags for details.
.br
\fITerminal:\fR If your terminal runs any of these encodings, 
mined can detect this by proper setting of environment variables 
(LC_* or LANG, and TERM).
See Terminal environment for details.
.SS 	Character input support
For input of accented characters, mined provides an extensive 
set of accent prefix functions, covering Western accents as well as
.RS
.IP \(bu
Macron (Latvian, Lithuanian, Polynesian languages)
.IP \(bu
Breve (Romanian, Turkish)
.IP \(bu
Dot above (Lithuanian, Polish)
.IP \(bu
Ogonek (Lithuanian, Polish)
.IP \(bu
Caron/Hр\*(10ek (Croatian, Czech, Lithuanian, Latvian, Estonian, Slovenian, Slovak)
.IP \(bu
Stroke (Croatian, Maltese, Polish, Vietnamese)
.IP \(bu
and others
.RE
.PP
For other characters and ligatures, mined provides mnemonic input.
.br
See Character input support 
for more details.
.SS 	Language-specific mnemonic conversion support
The generic mnemonic transformation command ESC _ (which 
transforms a mnemonic transcription in the text into its 
accented or ligature character) has a few national variants, 
using keys available on the respective keyboards as commands:
.RS
.IP \(bu
\fBGerman:\fR ESC Ш etc. transforms ae to С, oe to Ш
.IP \(bu
\fBFrench:\fR ESC ж etc. transforms ae to Т, oe to oe ligature
.IP \(bu
\fBScandinavian:\fR ESC т etc. transforms ae to Т, oe to Э
.IP \(bu
\(->NEW\(-> 
\fBItalian:\fR ESC В etc. transforms 'e or ┤e to У rather than ж etc.
.IP \(bu
\(->NEW\(-> 
\fBEast European>\fR ESC < accented letter typical on East European 
keyboard > (like l with stroke, u with ring, o with double acute, 
s with caron, etc)
transforms ,e to e with ogonek (rather than cedilla) etc., 
and -d to d with stroke
.RE
(See mnemonic character substitution 
commands in the Command reference for details.)
.PP
.SS 	Language-specific case conversion
\fI(The following rules apply if the respective language is 
indicated by the language tag as extracted from one of the 
environment variables 
LANGUAGE, 
TEXTLANG, LC_ALL, 
LC_CTYPE, LANG.)\fR
.PP
\fBLithuanian:\fR
(If language tag begins with "lt")
Proper case conversion of accented i with retained i dot.
.PP
\fBTurkish, Azeri, Tatar, Bashkir:\fR
(If language tag begins with "tr" or "az"
\(->NEW\(-> 
or "crh" or "tt" or "ba")
Proper case conversion of i<->I with dot above / dotless i<->I.
.PP
\fBDutch:\fR
(If language tag begins with "nl")
Title case conversion with Shift-F3 supports "IJ" pseudo ligature 
like in "IJsselmeer".
<!p>
.SS Esperanto
.SS 	Character sets
In addition to Unicode, mined supports the Latin-3 character set 
(ISO 8859-3), and the DOS codepage CP853 (especially as terminal encoding).
To view and edit a file in Latin-3 encoding, select it from the 
Encoding menu (submenu "more Latin"), or use the command line 
parameter -E3. To tell mined it runs a CP853 
DOS setting, use a LC_CTYPE variable setting (.CP853) or 
the option +E=CP853.
See Character encoding flags for details.
.br
\fITerminal:\fR If your terminal runs this encoding, make 
sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal environment for details.
.SS 	Input method
Mined supports a built-in input method for Esperanto, 
using the "x-system", plus "Sm" for the Spesmilo sign.
Select it from the Input method menu.
.SS 	Accented character input support
Instead of the input method, also the following accent prefix 
functions can be used:
.TP
Ctrl-F6
.TP
Ctrl-^
circumflex
.TP
Alt-Shift-F5
.TP
Ctrl-(
breve
.PP
<!p>
.SS Hawai'ian
.SS 	Accented character and 'okina input support
The following shortcuts and accent prefix functions can be used:
.TP
HOP ` \fI(grave accent)\fR
glottal stop / 'okina (U+02BB)
.TP
Alt-Ctrl-F6
.TP
Ctrl-- \fI(Ctrl-minus)\fR
macron \fI(long vowel)\fR
.PP
\fINote:\fR In smart quotes mode, 
the grave accent (or backquote) ` alone enters a glottal stop as well.
<!p>
.SS Russian, Ukrainian, other Cyrillic-script languages
.SS 	Character sets
In addition to Unicode, mined supports ISO Cyrillic (ISO 8859-5), 
Windows Cyrillic (CP1251), and KOI8-RU which is a convenient 
merge of KOI8-R (Russian) and KOI8-U (Ukrainian) (which are 
also supported separately but not included in the menu), 
\(->NEW\(-> 
and DOS Ukrainian (CP1125 and CP1131).
To view and edit a file in one of these encodings, select it 
from the Encoding menu ("Cyrillic" or submenu "more NE Eurasian"), 
or use the respective command line parameter.
See Character encoding flags for details.
.br
\fITerminal:\fR If your terminal runs any of these 
encodings, make sure to indicate this properly with an 
environment variable (LC_* / LANG).
See Terminal environment for details.
.SS 	Input method
Mined supports a built-in input method for Cyrillic.
Select it from the Input method menu.
.SS 	Accented character input support
In combination with a Cyrillic input method or keyboard, 
mined provides accent prefix support for Cyrillic accented 
letters. Accent prefix functions for Latin letters are reused 
for Cyrillic accents, see the following table:
.TP
F5
.TP
Ctrl-:
diaeresis
.TP
Alt-Ctrl-F6
.TP
Ctrl--
descender / macron
.TP
Alt-F5
.TP
Ctrl-/
stroke
.TP
Ctrl-&
hook
.TP
Ctrl-- Ctrl-&
middle hook
.TP
Alt-Shift-F5
.TP
Ctrl-(
breve
.TP
Ctrl-;
tail / tick / upturn
.TP
F6
.TP
Ctrl-'
.TP
Ctrl-┤
vertical stroke
.TP
Shift-F6
.TP
Ctrl-`
grave
.TP
Shift-F5
.TP
Ctrl-~
titlo
.TP
\fIacute acute\fR
double acute
.TP
\fIgrave grave\fR
double grave
.PP
See Character input support 
for more details.
.SS 	Script highlighting
To distinguish some Cyrillic letters from Latin look-alikes, 
Cyrillic is by default displayed with colour highlighting.
<!p>
.SS Tadjik
.SS 	Character sets
In addition to Unicode, mined supports KOI8-T.
To view and edit a file in this Tadjik encoding, select it 
from the Encoding menu (submenu "more NE Eurasian"), 
or use the respective command line parameter 
-E:Tj.
See Character encoding flags for details.
.br
\fITerminal:\fR If your terminal runs this encoding, make 
sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal environment for details.
.SS 	Input method
Mined supports a built-in input method for Cyrillic.
Select it from the Input method menu.
.SS 	Accented character input support
See above for Cyrillic accented input support.
.SS 	Script highlighting
Cyrillic is by default displayed with colour highlighting.
<!p>
.SS Kazakh
.SS 	Character sets
In addition to Unicode, mined supports PT154.
To view and edit a file in this Kazakh encoding, select it 
from the Encoding menu (submenu "more NE Eurasian"), 
or use the respective command line parameter 
-E:Kz.
See Character encoding flags for details.
.br
\fITerminal:\fR If your terminal runs this encoding, make 
sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal environment for details.
.SS 	Input method
Mined supports a built-in input method for Kazakh.
Select it from the Input method menu.
.SS 	Accented character input support
See above for Cyrillic accented input support.
.SS 	Script highlighting
Cyrillic is by default displayed with colour highlighting.
<!p>
.SS Georgian
.SS 	Character sets
In addition to Unicode, mined supports Georgian-PS.
To view and edit a file in this encoding, select it from the 
Encoding menu (submenu "more NE Eurasian"), 
or use the respective command line parameter 
-E:GP.
See Character encoding flags for details.
.br
\fITerminal:\fR If your terminal runs this encoding, make 
sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal environment for details.
<!p>
.SS Armenian
.SS 	Character sets
\(->NEW\(-> 
In addition to Unicode, mined supports ARMSCII.
To view and edit a file in this encoding, select it from the 
Encoding menu (submenu "more NE Eurasian", tell me if that's not 
suitable), or use the respective command line parameter 
-E:AR.
See Character encoding flags for details.
.br
\fITerminal:\fR If your terminal runs this encoding, make 
sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal environment for details.
<!p>
.SS Greek
.SS 	Character sets
In addition to Unicode, mined supports ISO Greek (ISO 8859-7).
To view and edit a file in this encoding, select it from the 
Encoding menu (submenu "Greek/Semitic"), or use the respective 
command line parameter -E:I7.
See Character encoding flags for details.
.br
\fITerminal:\fR If your terminal runs this encoding, make 
sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal environment for details.
.SS 	Input method
Mined supports a built-in input method for Greek.
Select it from the Input method menu.
.SS 	Accented character input support
In combination with a Greek input method or keyboard, 
mined provides accent prefix support for both monotonic Greek 
and polytonic Greek.
.br
\fBMonotonic Greek\fR uses only one accent, the tonos which 
looks like acute and can be entered with the F6 or Ctrl-' 
prefix function.
.br
\fBPolytonic Greek\fR uses - among many others - 
the oxia accent which is nowadays considered identical and looks 
like the monotonic tonos. However, for historic reasons, there 
are two sets of Greek accented letters with this accent in 
Unicode, one with tonos and one with oxia. While this may be 
considered a design flaw of Unicode, in fact both kinds of 
characters exist and mined provides support for both accents.
The choice of usage is up to the user.
Note, e.g. that
.TP
F6 < alpha >
enters the Greek letter alpha with tonos
.TP
Ctrl-F6 < alpha >
enters the Greek letter alpha with oxia
.PP
Likewise, with mnemonic input
.TP
^V ' < alpha > \fI(using the apostrophe key)\fR
enters the Greek letter alpha with tonos
.TP
^V ┤ < alpha > \fI(using the acute accent key)\fR
.PP
In these examples, < alpha > indicates the Greek letter 
alpha, which may e.g. be entered by selecting the Greek input 
method and typing the a key.
.PP
Accent prefix functions for Latin letters are reused for Greek 
accents, see the following table:
.TP
F5
.TP
Ctrl-:
.TP
Ctrl-"
dialytika
.TP
Shift-F5
.TP
Ctrl-~
perispomeni
.TP
Ctrl-F5
.TP
Ctrl-,
iota (ypogegrammeni)
.TP
Ctrl-Shift-F5
.TP
Ctrl-;
prosgegrammeni
.TP
Alt-Shift-F5
.TP
Ctrl-(
vrachy
.TP
F6
.TP
Ctrl-'
(Ctrl-apostrophe)
tonos
.TP
Ctrl-F6
.TP
Ctrl-┤
(Ctrl-acute)
.TP
Ctrl-^
oxia
.TP
Shift-F6
.TP
Ctrl-`
(Ctrl-grave)
varia
.TP
Alt-F6
.TP
Ctrl-<
psili
.TP
Alt-Shift-F6
.TP
Ctrl-.
dasia
.TP
Ctrl-Shift-F6
macron
.TP
Alt-6
psili and oxia
.TP
Ctrl-Alt-6
dasia and oxia
.TP
Alt-7
psili and varia
.TP
Ctrl-Alt-7
dasia and varia
.TP
Alt-8
psili and perispomeni
.TP
Ctrl-Alt-8
dasia and perispomeni
.PP
For polytonic Greek, 2 or 3 accents can be combined by 
applying the respective accent prefix functions in sequence.
For convenience, the most frequent combinations of 2 accents 
are also available as dedicated accent prefix keys as listed 
above.
Also, modified Ctrl-/Alt-/Alt-Ctrl- digit keys are used for 
polytonic Greek accent prefix functions.
See Character input support 
for more details.
.SS 	Script highlighting
To distinguish some Greek letters from Latin look-alikes, 
Greek is by default displayed with colour highlighting.
.SS 	Script-specific case conversion
Case conversion of final sigma is handled properly.
<!p>
.SS Amharic
.SS 	Input method
Mined supports two built-in input methods for Amharic, 
one is called "Ethiopic" (source: yudit), the other is called 
"Amharic" and was generated from Unicode character names 
(preferable according to user feedback).
Select your preferred input method from the Input method menu.
<!p>
.SS Arabic
.SS 	Character sets
In addition to Unicode, mined supports ISO Arabic (ISO 8859-6), 
MacArabic and DOS Arabic (CP720).
To view and edit a file in one of these encodings, select it 
from the Encoding menu (submenu "Greek/Semitic"), or use the 
respective command line parameter -E:I6 
or -EA.
See Character encoding flags for details.
.br
\fITerminal:\fR If your terminal runs ISO Arabic, make 
sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal environment for details.
.SS 	Input method
Mined supports a built-in input method for Arabic.
Select it from the Input method menu.
.SS 	Accented character input support
Not yet implemented. Tell me if you have a proposal or preference 
for assignment of accent prefix functions to the keyboard.
.SS 	Bidi support
Mined has implicit primitive support for visual right-to-left 
input which is however not the preferred storage method as 
complete right-to-left text should be stored in logical order.
.br
Mined auto-detects and cooperates with a bidi terminal (mintty, mlterm) 
in which case visual right-to-left input is disabled.
.br
A full context-aware bidi display and editing technique would 
still have to be integrated into mined. Tell me if you are 
interested.
<!p>
.SS Hebrew
.SS 	Character sets
In addition to Unicode, mined supports ISO Hebrew (ISO 8859-8) and 
Windows Hebrew (CP1255).
To view and edit a file in one of these encodings, select it 
from the Encoding menu (submenu "Greek/Semitic"), or use the 
respective command line parameter -E:I8 
or -EE.
See Character encoding flags for details.
.br
\fITerminal:\fR If your terminal runs this encoding, make 
sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal environment for details.
.SS 	Input method
Mined supports a built-in input method for Hebrew.
Select it from the Input method menu.
.SS 	Accented character input support
Not yet implemented. Tell me if you have a proposal or preference 
for assignment of accent prefix functions to the keyboard.
.SS 	Bidi support
Mined has implicit primitive support for visual right-to-left 
input which is however not the preferred storage method as 
complete right-to-left text should be stored in logical order.
.br
Mined auto-detects and cooperates with a bidi terminal (mintty, mlterm) 
in which case visual right-to-left input is disabled.
.br
A full context-aware bidi display and editing technique would 
still have to be integrated into mined. Tell me if you are 
interested.
.SS 	Smart replacement
As a special case of smart dash input replacement (enabled 
together with smart quotes), mined inserts Hebrew Maqaf as 
a dash in the context of Hebrew letters.
<!p>
.SS Chinese
.SS 	Character sets
In addition to Unicode, mined supports Big5 with HKSCS extension 
(extending CP950), 
GB18030 (extending CP936, extending GKB, including EUC-CN), 
and CNS (EUC-TW) multi-byte character sets.
To view and edit a file in one of these encodings, select it 
from the Encoding menu (section "Chinese"), or use the 
respective command line parameter -EB 
or -EG or -EC.
See Character encoding flags for details.
.br
\fIAuto-detection:\fR Big5 and GB18030 text encoding are 
also auto-detected when opening a file (with a certain 
success rate).
Set the environment variable MINEDDETECT="BG" 
to constrain auto-detection to Big5 and GB18030 encodings.
See Mined configuration for details.
.br
\fITerminal:\fR Mined supports native CJK terminals; 
make sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal encodings support 
for details on detection and handling of CJK terminal features.
.SS 	Input method
Mined provides the following built-in input methods for Chinese:
Pinyin, Cangjie, WuBi, 4Corner, Boshiamy, and special support 
for a Radical/Stroke lookup input method.
Select the input method of your preference from the Input method menu.
.SS 	Han character information display
Mined provides special support for display of Han character 
information according to the Unihan database. It comprises 
semantic information and Mandarin, Cantonese, Hanyu Pinlu, 
Hanyu Pinyin, XHC Hanyu pinyin, and Tang dynasty pronunciation.
.SS 	Accented character input support
For Latin-based Pinyin transcription of Chinese, the usual 
accent prefix functionality is available.
<!p>
.SS Japanese
.SS 	Character sets
In addition to Unicode, mined supports JIS character sets 
in EUC-JP or Shift_JIS (CP932) multi-byte encoding 
\(->NEW\(-> 
and EUC-JIS-2004 (X 0213) or Shift_JIS-2004 (X 0213) encoding.
To view and edit a file in one of these encodings, select it 
from the Encoding menu (section "Japanese"), or use the 
respective command line parameter -EJ 
or -ES.
See Character encoding flags for details.
.br
\fIAuto-detection:\fR EUC-JP/-JIS and Shift_JIS text 
encodings are also auto-detected when opening a file (with a 
certain success rate).
Set the environment variable MINEDDETECT="JS" 
to constrain auto-detection to EUC-JP and Shift_JIS encodings, 
\(->NEW\(-> 
or MINEDDETECT="Xx" to constrain 
auto-detection to EUC-JIS X 0213 and Shift_JIS X 0213 encodings.
See Mined configuration for details.
.br
\fITerminal:\fR Mined supports native CJK terminals; 
make sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal encodings support 
for details on detection and handling of CJK terminal features.
.SS 	Input method
Mined provides the following built-in input methods for Japanese:
Hiragana, Katakana, TUT roma, and special support for a 
Radical/Stroke lookup input method.
Select the input method of your preference from the Input method menu.
.br
Mined does not implement, however, advanced Japanese input 
methods that provide semantics-based Hanja input; for these, you 
will have to set up or use an external input method with your 
operating environment, which is then handled by the terminal which 
delivers ready-composed characters transparently to the application.
.SS 	Han character information display
Mined provides special support for display of Han character 
information according to the Unihan database. It comprises 
semantic information and Japanese and Sino-Japanese pronunciation.
.SS 	Accented character input support
For Latin-based Romaji transcription of Japanese, the usual 
accent prefix functionality is available.
<!p>
.SS Korean
.SS 	Character sets
In addition to Unicode, mined supports UHC (CP949, including EUC-KR) 
and Johab multi-byte character sets.
To view and edit a file in one of these encodings, select it 
from the Encoding menu (section "Korean"), or use the 
respective command line parameter -EK 
or -EH.
See Character encoding flags for details.
.br
\fIAuto-detection:\fR UHC text encoding is 
also auto-detected when opening a file (with a certain 
success rate).
Set the environment variable MINEDDETECT="K" 
to constrain auto-detection to UHC encoding.
See Mined configuration for details.
.br
\fITerminal:\fR Mined supports native CJK terminals; 
make sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal encodings support 
for details on detection and handling of CJK terminal features.
.SS 	Input method
Mined provides the following built-in input methods for Korean:
Hangul, Hanja, and special support for a Radical/Stroke lookup 
input method.
Select the input method of your preference from the Input method menu.
.SS 	Han character information display
Mined provides special support for display of Han character 
information according to the Unihan database. It comprises 
semantic information and Hangul and Korean pronunciation.
<!p>
.SS Vietnamese
.SS 	Character sets
In addition to Unicode, mined supports VISCII, TCVN and 
\(->NEW\(-> 
Windows Vietnamese (CP1258) character sets.
To view and edit a file in one of these encodings, select it 
from the Encoding menu (section "Vietnamese"), or use the 
respective command line parameter -EV 
or -EN.
See Character encoding flags for details.
.br
\fIAuto-detection:\fR VISCII text encoding is 
also auto-detected when opening a file (with a certain 
success rate).
Set the environment variable MINEDDETECT="V" 
to constrain auto-detection to VISCII encoding.
See Mined configuration for details.
.br
\fITerminal:\fR If your terminal runs this encoding, make 
sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal environment for details.
.SS 	Input method
Mined provides the following built-in input methods for Vietnamese:
VNI and VIQR.
Select the input method of your preference from the Input method menu.
.br
It may be more convenient, however, to use the extensive 
accented character input support provided by mined together with 
a normal Latin-based keyboard (so without a keyboard-mapping input 
method), see Character input support for Vietnamese below.
.SS 	Character input support
Mined provides input support for multiple accented characters 
as used in Vietnamese, as well as convenient accent prefix 
functions for combinations of two Vietnamese accents.
Modified Ctrl-/Alt-/Alt-Ctrl- digit keys are used for 
Vietnamese accent prefix functions.
Alternatively, mnemonic character input can be used.
See Accented and mnemonic input support 
for details, and see below for some introducing comments.
.PP
An accent prefix can either be applied to the plain Latin base 
letter, or to a precomposed Vietnamese letter which already has 
one of the accents.
These are:
.RS
.TP
U+00C2  LATIN CAPITAL LETTER A WITH CIRCUMFLEX
.TP
U+00E2  LATIN SMALL LETTER A WITH CIRCUMFLEX
.TP
U+00CA  LATIN CAPITAL LETTER E WITH CIRCUMFLEX
.TP
U+00EA  LATIN SMALL LETTER E WITH CIRCUMFLEX
.TP
U+00D4  LATIN CAPITAL LETTER O WITH CIRCUMFLEX
.TP
U+00F4  LATIN SMALL LETTER O WITH CIRCUMFLEX
.TP
U+0102  LATIN CAPITAL LETTER A WITH BREVE
.TP
U+0103  LATIN SMALL LETTER A WITH BREVE
.TP
U+01A0  LATIN CAPITAL LETTER O WITH HORN
.TP
U+01A1  LATIN SMALL LETTER O WITH HORN
.TP
U+01AF  LATIN CAPITAL LETTER U WITH HORN
.TP
U+01B0  LATIN SMALL LETTER U WITH HORN
.RE
.PP
.PP
\fIExamples:\fR Suppose your keyboard is mapped to have 
Vietnamese characters like A with circumflex available. Then:
.TP
^V ┬ ' (Ctrl-V A-circumflex apostrophe)
enters the composite character U+1EA4 (A with circumflex and acute)
.TP
^V ~ н (Ctrl-V O-circumflex tilde)
enters the composite character U+1ED6 (O with circumflex and tilde)
.TP
Ctrl-6 A
enters U+00C2 (A with circumflex)
.TP
Alt-4 A
enters U+1EAA (A with circumflex and tilde)
.TP
Ctrl-Alt-3 A
enters U+1EB2 (A with breve and hook above)
.TP
Ctrl-Alt-3 O
enters U+1EDE (O with horn and hook above)
.PP
\fINote:\fR Using composite base characters in mined 
character mnemonics or accent prefix combinations as just 
described also works in non-UTF-8 text encoding mode (e.g. in 
VISCII or TCVN encoding).
<!p>
.SS Thai
.SS 	Character sets
In addition to Unicode, mined supports the TIS-620 character 
set (with CP874 extensions).
To view and edit a file in this encoding, select it from the 
Encoding menu (section "Thai"), or use the respective command 
line parameter -ET.
See Character encoding flags for details.
.br
\fITerminal:\fR If your terminal runs this encoding, make 
sure to indicate this properly with an environment variable 
(LC_* / LANG).
See Terminal environment for details.
.SS 	Input method
Mined provides a built-in Thai input method.
Select the input method from the Input method menu.
.SS 	Accented character input support
Not yet implemented. Tell me if you have a proposal or preference 
for assignment of accent prefix functions to the keyboard.
.PP
.br
.PP
.SH Character handling support
This chapter describes mined features for character 
manipulation and display of characters and character 
properties. Unicode and CJK specific features are described 
in the respective chapters.
Character input support is 
described separately in the subsequent chapter.
.SS Script highlighting
It may be desirable to distinguish characters in different 
script by displaying their glyphs in different colours.
(This especially allows to distinguish easier between 
similar glyphs as they occur in Latin/Greek/Cyrillic scripts.)
.br
Script highlighting is currently pre-configured for 
Greek and Cyrillic. It uses the terminal's 256-colour mode 
if available.
.br
The scripts to highlight and the colour values to use 
can be configured at compile-time.
See Mined configuration below.
.SS Combining characters
When editing text in Unicode or any encoding that contains 
combining characters, mined supports display and editing of 
combining and combined characters.
.PP
(\fINote:\fR Terminal support for combining characters is 
auto-detected; additional command line options are available 
in case this fails.)
.br
If mined operates on a terminal that handles combining 
characters, it offers two editing modes: combined or separated.
They can be toggled by clicking the Combining display flag 
in the Quick Options (Mode indication) flags 
area (right part of the top screen line), or by the menu entry 
"Options - Combined display";
separated display mode can also be selected by the command 
line option -c.
.TP
\fICombined display and editing mode\fR (Combining display flag у)
Combined characters are displayed as intended (i.e., combined).
.br
.IP \(bu
\fIMicro movement\fR into combined characters:
.RS
.IP \(bu
The cursor can be moved into a combined character with 
Ctrl-cursor-left and Ctrl-cursor-right, 
or ^V cursor-left and ^V cursor-right.
.IP \(bu
You can determine the exact position of the cursor if 
permanent character info is switched on (by HOP ESC u or 
with HOP "Toggle Char info" in the Options menu).
.RE
.IP \(bu
Partially editing combined characters:
.RS
.IP \(bu
If the cursor is on a combined character, delete next character 
(e.g. Del on small keypad) will delete the whole 
combined character, with all combining accents.
.IP \(bu
If the cursor is on a combined character, Ctrl-Del 
will delete only the base character, leaving combining 
accents which may then be combined with the previous 
character.
.IP \(bu
If the cursor is within a combined character, delete next 
character will delete the current combining accent only.
.IP \(bu
\fISmart backspacing:\fR Ctrl-Backarrow or F5 Backarrow 
("Delete single") behind or within a combined character 
will only delete the rightmost combining accent 
(preceding the cursor position) while Backarrow would 
delete the whole combined character.
.br
\fINote:\fR\(->NEW\(-> 
Configuration option plain_BS 
(command line option +Bp) 
switches the Backarrow key from smart backspacing to 
plain backspacing, i.e. no auto-undent and only delete 
one combining character of a combined character.
Use Shift-Control-Backarrow to perform smart backspacing then.
.IP \(bu
You can also position the cursor as described above and use 
copy-and-paste operations.
.RE
\fINote:\fR Ctrl-cursor-left and Ctrl-cursor-right 
only work if these keys are configured to emit 
distinguished escape sequences with Control key held down.
With xterm or mintty, this works by default.
With rxvt, use the small keypad cursor keys, or enable Control 
on the right keypad with the sample configuration 
file Xdefaults.mined in the
Mined runtime support library.
With mlterm, enable this with the sample configuration 
file mlterm/key in the
Mined runtime support library.
Ctrl-Backarrow can also be configured to work with xterm 
but doesn't appear to work with rxvt or mlterm, 
use F5 Backarrow instead.
.PP
.TP
\fISeparated display and editing mode\fR (Combining display flag `)
Combined characters are separated into base character and 
combining character(s) for display and editing. Combining 
characters are indicated with coloured background.
.br
.RS
.IP \(bu
In separated display mode, all cursor and text modification 
operations work on the combining parts as displayed.
.RE
.PP
.TP
\fIInput support:\fR For input of Unicode combining characters, 
see Combining character input below.
.PP
.TP
\fINote:\fR Unicode combining characters (according to the 
most recent version of Unicode known to mined) that are not 
handled as combining characters by the terminal (which might 
implement an older version of Unicode) 
are always displayed like in separated display mode.
.PP
.TP
\fINote:\fR Isolated combining characters, i.e. those 
appearing at a line beginning or after a TAB character, are 
always displayed like in separated display mode.
.PP
.SS Character information display
The command ESC u displays character encoding information in the 
bottom status line (conforming to ISO 14755); it displays the 
character code in the selected encoding (UTF-8 byte sequence 
in UTF-8 mode) and the ISO-10646 (Unicode) value of the 
current character, as well as Unicode script range and 
character category, width, and combining information.
The Unicode value is displayed with 4 hexadecimal digits if 
the character is in the Unicode BMP (Basic Multilingual Plane, 
16 bit), with 6 digits if it is a Unicode character outside of 
the BMP, and 8 digits if it is an ISO-10646 character outside 
of the Unicode range.
The information displayed also indicates all kinds of 
encoding irregularities.
.br
For the Unicode data version used for character properties 
see the mined change log.
.PP
Permanent display of character information is toggled 
with HOP ESC u or by selecting "Char info" in the Info menu 
(or with HOP "Toggle Char info" in the Options menu).
.PP
In the Info menu, attributes that are shown with the character 
information can be selected:
Unicode script name, Unicode character name,
\(->NEW\(-> 
Unicode named sequence, 
Unicode character decomposition, list of input mnemonics.
Note that Unicode named sequence information only applies to a 
small number of named sequences, otherwise normal character 
information is shown instead; also, it is only shown in combined 
display mode, so normal information can be quickly toggled by 
switching to separated display mode (middle-click on 
у flag).
.PP
Character information display can be selected with the 
+?c command line parameter (see 
parameter description for further options).
To preselect continuous character information display, append 
+?c to the environment variable MINEDOPT 
or enable option "display_charinfo" in the runtime configuration file 
$HOME/.minedrc.
.SS 	Han character information display
CJK-specific character information (semantic and pronuciation 
hints) is described below in section 
Han character information display.
.SS Character conversion features
.SS 	Case conversion
The case conversion functions (ESC C, HOP ESC C, F11, HOP F11, 
Shift-F3) cover the full Unicode range.
They also handle special cases like Greek final sigma, 
optionally Turkish "i", case mapping to multiple characters, 
and Lithuanian special conditions.
Japanese characters are toggled between Hiragana and Katakana 
by the same functions.
.br
Shift-F3 cycles casing of a word between all small, title case 
(beginning capital), and all capitals. It handles title casing, 
using Unicode title case characters for the first character 
when appropriate.
For Japanese script, it toggles the word between Hiragana and 
Katakana.
.br
The case mapping is based on the most recent Unicode 
version compiled into mined (for the actual version see the 
mined change log and the Options menu About command).
It is applicable in all text encodings.
.SS 	Line end type conversion
In the Options menu, a submenu "Lineend type..." offers functions 
to convert the line end of the current line to LF or CRLF, 
or to convert the line end type of all lines that do not have 
a special line end to LF or CRLF.
.SS 	Numeric conversion
Commands are available to insert characters corresponding to 
a hexadecimal character code or hexadecimal/octal/decimal 
Unicode value contained in the text, to insert a 
respective value corresponding to the current character, or 
to toggle the preceding character and its hexadecimal Unicode value (Alt-x).
For details, see the section 
Code conversion in the Command reference.
.SS 	Numeric entity (HTML/URL) conversion
HTML numeric character entities (e.g. &#x40; or &#64; for @) or 
URL escape notation (e.g. %20 for space, %C3%86 for к) 
can be converted into unescaped characters. Use one of the 
Mnemonic character substitution commands 
(ESC _ or national variants) described below.
.SS 	Mnemonic conversion
A character mnemonic at the cursor position can be replaced with 
its associated character. Use one of the 
Mnemonic character substitution commands 
(ESC _ or national variants) described below.
.SS 	Encoding conversion support
A special feature offers interactive conversion to or from 
Unicode character encoding, see 
Encoding conversion support in 
chapter Unicode support below.
.SS 	Unicode Copy/Paste buffer
The Copy/Paste buffer can be operated in Unicode mode in 
which case it converts between text edited in different 
character encodings.
See Unicode Copy/Paste buffer conversion 
below.
.SS Smart quotes
In Smart quotes mode, straight (double or single) quote 
characters Ф"╗ or Ф'╗ are automatically substituted with an 
opening or closing typographic quotation mark, depending on 
the text context, or an apostrophe where appropriate.
Also, an acute accent key enters a typographic apostrophe.
\(->NEW\(-> 
Alt-" or Alt-' enter the respective quotation marks of the 
previous or standby style (see below).
.br
Quote marks style selection:
.RS
.IP \(bu
Select the quotation marks style to be applied from the 
Smart Quotes selection menu (open with ESC Q or Alt-Q or 
right-click on the smart quotes indication in the flags area 
in the top screen line).
.IP \(bu
To toggle between the current and the previous smart quotes style, 
middle-click or double-click the smart quotes flag or select 
"standby" from the menu.
.IP \(bu
To select the smart quotes style suitable for the current locale, 
select "by locale" from the menu. This is also achieved with the 
configuration option smart_quotes or 
the command line option -q.
.RE
.br
Quotation marks style can be preselected by either of the 
mechanisms described below.
.PP
The smart quotes left/right selection algorithm considers both 
the text context and the state (whether an open quote was 
inserted before) to automatically support smart quotes also in 
CJK text, and to try to distinguish an apostrophe from a quote mark.
At a line beginning, always a left (opening) quotation mark is 
chosen, supporting the habit in some languages to repeat 
opening quote marks for each new paragraph inside a quotation.
.br
French quotation marks spacing is automatically applied (using 
no-break space U+00A0) if French style has been selected from 
the menu or by locale.
.br
A typographic apostrophe can also be inserted with HOP ' (^G ') 
or with HOP ┤ (acute accent), regardless of smart quotes mode.
In smart quotes mode, a typographic apostrophe is also inserted on 
input of ┤ (acute accent).
.br
Straight quotes or accent marks (" ' ` ┤) can be inserted with 
mnemonic compose pairs (^V ^ " or ^V ^ ' 
or ^V ^ ` or ^V ^ ┤, or ^V"# 
or ^V'# or ^V`# or ^V┤# 
respectively).
.br
Smart quotes are applicable in all text encodings provided 
the desired quote marks are contained in the selected encoding.
.PP
When a file is loaded, mined tries to determine the applicable 
quotation marks style in two ways: With file position memory (see 
File info: Memory of file position and editing style parameters
above), mined also remembers the last selected smart quotes 
mode for the file.
If that information is not available, mined auto-detects 
existing quotation marks in the file and adjusts its smart 
quotes mode accordingly. The option -q 
overrides this detection.
.PP
With command-line option -q alone, 
quotation marks style is derived from locale information 
(environment variables 
LANGUAGE, 
TEXTLANG, LC_ALL, 
LC_CTYPE, LANG), or from a locale 
value given with the option as -q=\fIlocale\fR.
For some languages, two styles are predefined, using the primary 
style as active smart quotes style, and the secondary or alternate 
style as standby style, for quick toggling with a middle mouse click 
on the Quotes flag 
(or using the standby entry from the Quote marks menu).
The active quote marks style can also be derived explicitly 
from the locale with the Quotes menu option "by locale".
.br
Option +q exchanges primary and 
alternate quotation marks style, setting the alternate style active.
.br
Without an option -q, the primary 
locale-derived quote marks style is always set as standby style 
to be quickly available.
.br
\fINote:\fR Language-dependent quotations marks styles 
are determined using the compile-time configuration file 
quotes.cfg.
See Quotation Marks Styles 
on the mined web site for a listing.
.br
\fINote:\fR 
Smart quotes style can also be preselected giving the desired 
quotation marks directly, either as command line option like 
-q="Ф╗" or with the environment 
variable MINEDQUOTES 
(see under Environment configuration hints below);
this overrides both auto-detection and the preference 
saved with the cursor position.
.SS 	Smart text replacements: apostrophe, smart dashes, arrows and glottal stop
If smart quotes are active, some other smart input text 
replacements are applied to respective characters being entered.
(Replacement of subsequent character input sequences is suppressed 
during a repeat command entering multiple characters.)
.TP
--
\fIif preceded by a Space character:\fR en dash (U+2013)
.br
\fIotherwise:\fR em dash (U+2014)
.TP
-  \fIor\fR -TAB
\fI\(->NEW\(-> 
if leading a line (only white space before):\fR en dash (U+2013)
.TP
- 
\fI\(->NEW\(-> 
if embedded in spaces:\fR minus sign (U+2212)
.TP
-
\fIif an adjacent character is in the Hebrew 
script range:\fR Hebrew hyphen mark Maqaf (U+05BE)
.TP
<-
leftwards arrow (U+2190)
.TP
->
rightwards arrow (U+2192)
.TP
<>
left right arrow (U+2194)
.TP
┤
apostrophe (U+2019 right single quotation mark)
.TP
`
glottal stop (U+02BB modifier letter turned comma)
.PP
\fINote:\fR \(->NEW\(-> 
Mined smartly avoids inappropriate placement of smart replacements 
as well as double spaces by redundant combination of smart spaces 
and explicitly entered spaces, so you can seamlessly type either 
"bonjour" or " bonjour " 
to enter Ф\0bonjour\0╗ with French quotes, or 
a -- b to enter an en dash although a space is 
initially inserted after it.
.PP
.PP
.SH Character input support
Some character input support features support international 
scripts (especially with Keyboard Mapping and 
Input Methods), others mainly address composite characters.
For the latter, it is useful to explain a few notions:
.TP
\fICombining character:\fR
A character (usually in Unicode) that is defined to combine 
with the previous character into a combined character, to be 
displayed as a single glyph (visual unit).
.TP
\fICombined character:\fR
The glyph combination of a Unicode character (base character) 
with one or more Unicode combining characters.
.TP
\fIComposed character (or composite character):\fR
A character that has one or more accents composed 
into it, or is otherwise composed of components, like the ae 
ligature, to be displayed as a single glyph. It can be a 
single Unicode character or a Unicode combined character 
consisting of a Unicode base character and one or two Unicode 
combining characters.
.TP
\fIAccented character (or diacritic character):\fR
A special case of a composite character where a letter is 
composed with one or more accents.
.TP
\fICompose key:\fR
A number of system and keyboard vendors have equipped 
their keyboards with a "Compose" or "Combine" key. This key - 
when configured and interpreted properly by the operating 
environment - produces a composed character which is then 
provided as input to the application.
.PP
.SS Accented and mnemonic input support
Function keys or character mnemonics can be used to 
enter accented or other composite characters.
(This is also known as digraph function with some editors.)
.br
These character composition functions also work on the prompt line.
.br
(Any composite character configured on your keyboard can of 
course also be entered directly or using the Compose/Combine 
key of your keyboard.)
.PP
.TP
Note that mnemonic input and accent prefix keys can be 
combined in flexible ways, e.g.
.TP
^V ' Ctrl-F6 e
or
.TP
F6 ^V e ^
which both enter U+1EBF (e with circumflex and acute)
.PP
.PP
.TP
Mnemonic input can be applied recursively to compose a character 
for further composition, e.g.
.TP
^V ' ^V a e
enters U+01FD (Т with acute)
.PP
.PP
.TP
Accent prefix keys can use an already precomposed base 
character for further composition; if this does not match an 
explicitly known mnemonic, the base character is decomposed 
first to find a match, e.g.
.TP
F6 Ч
or
.TP
F5 Щ
which both enter U+01D8 (u with diaeresis and acute)
.PP
.PP
.TP
Up to three accent prefix keys can be combined by entering 
them in sequence in order to compose characters with multiple 
accents, e.g.
.TP
F5 F6 u
enters U+01D8 (u with diaeresis and acute)
.TP
Ctrl-2 Ctrl-7 a
enters U+1EB1 (a with grave and breve)
.TP
Ctrl-- Ctrl-: u
enters U+1E7B (u with macron and diaeresis)
.TP
Ctrl-, Ctrl-( e
enters U+1E1D (e with cedilla and breve)
.TP
Alt-7 Ctrl-, < alpha >
.TP
Alt-F6 Shift-F6 Ctrl-, < alpha >
.TP
Ctrl-< Ctrl-` Ctrl-, < alpha >
all enter U+1F82 (alpha with psili and varia and ypogegrammeni)
where < alpha > indicates the Greek letter 
alpha, which may e.g. be entered by selecting the 
Greek input method and typing the "a" key
.PP
.SS 	Accent prefix keys
.TP
\fB\fIGeneral notes on using keys with Control, Shift, Alt modifiers:\fR\fR
Especially for accented character input, mined makes use of 
key combinations modified with Control, Shift, Alt, or a 
combination of them.
Some of these key combinations may be limited by local 
environment, especially the window system, or may need 
extra configuration to be enabled.
.RS
.IP \(bu
\fB\fIHint on input of Alt/Ctrl-modified function keys:\fR\fR
These are often intercepted by window systems for special 
functions.
.RS
.IP \(bu
\fBAlt:\fR Alternatively to using the Alt key, 
the ESC key can be used as a prefix to a function key to achieve 
the same modified function, e.g. ESC F6 instead of Alt-F6.
Note, however, that there is an ESCAPE delay (default 450 ms) 
during which the subsequent function key should be pressed.
.IP \(bu
\fBControl:\fR Alternatively to using the Control key, 
Ctrl-V can be used as a prefix to a function key to achieve 
the same modified function, e.g. Ctrl-V F6 instead of Ctrl-F6.
.RE
.br
Specific advice:
.TP
Window system
suppresses
.br
remedy
.TP
KDE
Ctrl-Fn, Ctrl-Shift-Fn, Alt-Fn
.br
press the "Window key" additionally at the same time, 
e.g. Window-Alt-F6 \fIor\fR use ESC or Ctrl-V prefixes, 
e.g. ESC F6 \fI(be fast!)\fR, Ctrl-V Shift-F5
.TP
gnome-wm
Alt-F5
.br
Window-Alt-F5 \fIor\fR ESC F5 \fI(be fast!)\fR
.TP
fvwm2
Alt-Fn
.br
ESC Fn \fI(be fast!)\fR
.TP
Exceed
Alt-Fn, Alt-Shift-Fn
.br
ESC Fn, ESC Shift-Fn \fI(be fast!)\fR
.br
\fIor:\fR configure ("Tools - Configuration... - Keyboard Input")
"Windows Modifier Behavior - Alt Key:" and select "To X"
.PP
.IP \(bu
Modified digit keys (e.g. Alt-2) as well as 
Ctrl-modified punctuation keys (e.g. Ctrl-;) 
are used as extended and intuitive accent prefix keys.
To enable them, either use a recent version of xterm (216) or 
configure them with your terminal.
.br
Configuration instructions for older versions of xterm and 
for rxvt can be found in the sample file 
Xdefaults.mined in the Mined 
runtime support library.
.IP \(bu
Note: In rxvt, Ctrl-modified and shifted punctuation keys 
(if enabled by configuration following the hint above) 
interfere with ISO 14755 input mode of rxvt; if the following 
key is entered twice, that mode is aborted and the modified 
punctuation key becomes effective as an accent prefix in mined.
.IP \(bu
\fBWarning:\fR The Alt-F4 key combination should not 
accidently be hit as many window managers use it to kill 
the terminal window!
.RE
.PP
The following table lists the accent prefix keys:
.TP
F5
(\fISun:\fR R4/-)
diaeresis (umlaut) / dialytika
.TP
Shift-F5
(\fISun:\fR R5/э)
tilde / perispomeni
.TP
Ctrl-F5
(\fISun:\fR R6/О)
ring / cedilla / iota (ypogegrammeni)
.TP
Alt-F5
stroke
.TP
Ctrl-Shift-F5
ogonek / prosgegrammeni
.TP
Alt-Shift-F5
breve / vrachy
.TP
F6
(\fISun:\fR R3)
acute (accent d'aigu) / tonos
.TP
Shift-F6
(\fISun:\fR R1)
grave / varia
.TP
Ctrl-F6
(\fISun:\fR R2)
circumflex / oxia
.TP
Alt-F6
caron / psili
.TP
Ctrl-Shift-F6
macron / descender
.TP
Alt-Shift-F6
dot above / dasia
.TP
Ctrl-1
acute
.TP
Ctrl-2
grave
.TP
Ctrl-3
hook above
.TP
Ctrl-4
tilde
.TP
Ctrl-5
dot below
.TP
Ctrl-6
circumflex
.TP
Ctrl-7
breve
.TP
Ctrl-8
horn
.TP
Ctrl-9
stroke
.TP
Ctrl-0
ring / cedilla
.TP
Alt-1
circumflex and acute
.TP
Alt-2
circumflex and grave
.TP
Alt-3
circumflex and hook above
.TP
Alt-4
circumflex and tilde
.TP
Alt-5
circumflex and dot below
.TP
Ctrl-Alt-1
breve/horn and acute
(\fIcomposes following A/a with breve and acute, or 
following O/o or U/u with horn and acute\fR)
.TP
Ctrl-Alt-2
breve/horn and grave
.TP
Ctrl-Alt-3
breve/horn and hook above
.TP
Ctrl-Alt-4
breve/horn and tilde
.TP
Ctrl-Alt-5
breve/horn and dot below
.TP
Alt-6
psili and oxia
.TP
Ctrl-Alt-6
dasia and oxia
.TP
Alt-7
psili and varia
.TP
Ctrl-Alt-7
dasia and varia
.TP
Alt-8
psili and perispomeni
.TP
Ctrl-Alt-8
dasia and perispomeni
.TP
Ctrl-'
(Ctrl-apostrophe)
acute (d'aigu) / tonos
.TP
Ctrl-┤
(Ctrl-acute)
acute (d'aigu) / oxia
.TP
Ctrl-`
(Ctrl-grave)
grave / varia
.TP
Ctrl-^
circumflex / oxia
.TP
Ctrl-~
tilde / perispomeni / titlo
.TP
Ctrl-:
diaeresis (umlaut) / dialytika
.TP
Ctrl-"
diaeresis (umlaut) / dialytika
.TP
Ctrl-,
cedilla / ring / iota (ypogegrammeni)
.TP
Ctrl-/
stroke
.TP
Ctrl--
(Ctrl-minus)
macron / descender
.TP
Ctrl-<
caron / psili
.TP
Ctrl-.
dot above / dasia (\fIwith i or j:\fR dotless)
.TP
Ctrl-(
breve / vrachy
.TP
Ctrl-;
ogonek / prosgegrammeni / tail / tick / upturn
.TP
Ctrl-)
inverted breve
.TP
Ctrl-&
hook
.TP
Ctrl-- Ctrl-&
middle hook
.PP
.PP
\fINote:\fR If your keyboard assignment provides its own 
accent prefix keys ("dead keys"), pressing the key twice usually 
delivers the corresponding spacing character which can then be 
used for the extended accent prefix functionality of mined; 
e.g. hold Control, then press ┤ (acute key) twice, to invoke 
the acute/oxia prefix function of mined.
.PP
.TP
\fINote:\fR For combining \fBmultiple accents\fR, in most 
cases their order does not matter. As an exception, to combine 
dot above and macron, enter prefix keys in this order, as s
macron and dot above will be interpreted as dot below.
.TP
dot macron
\fIe.g.\fR Ctrl-. Ctrl--
dot above and macron \fI(on A or O)\fR
.TP
macron dot
\fIe.g.\fR Ctrl-- Ctrl-.
dot below
.PP
.PP
.TP
\fINote:\fR For the sake of accepting Ctrl-- 
intuitively both as an accent prefix for macron as well as an 
accent modifier to place an accent \fBbelow\fR a letter, the 
macron accent prefix combined with another accent prefix key 
is also interpreted as applying that accent \fBbelow\fR. As a 
workaround to ambiguous cases, it has to be applied twice with 
diaeris for diaeresis below (U), and three times for line below.
.TP
macron macron diaeresis
\fIe.g.\fR Ctrl-- Ctrl-- Ctrl-:
diaeresis below
.TP
macron diaeresis
\fIe.g.\fR Ctrl-- Ctrl-:
macron and diaeresis
.TP
diaeresis macron
\fIe.g.\fR Ctrl-: Ctrl--
diaeresis and macron
.TP
macron macron macron
\fIe.g.\fR Ctrl-- Ctrl-- Ctrl--
line below
.PP
.PP
.TP
\fINote:\fR Some accent prefix keys, when applied twice in 
sequence, are mapped to a single accent as follows:
.TP
acute acute
\fIe.g.\fR F6 F6
double acute accent
.TP
grave grave
\fIe.g.\fR Shift-F6 Shift-F6
double grave accent
.TP
macron macron
\fIe.g.\fR Ctrl-- Ctrl--
bar/topbar
.TP
cedilla cedilla
\fIe.g.\fR Ctrl-, Ctrl-,
psili/comma below
.PP
.SS Combining character input
.PP
.TP
\fBUnicode combining characters\fR can be entered 
by applying accent prefix keys to the Tab key. They will be 
visually combined with the previous character by rules of Unicode 
(and by terminal implementation). Examples:
.TP
Ctrl-, Tab
combining cedilla
.TP
F6 F6 Tab
combining double acute accent
.PP
.SS Special character input shortcuts
.PP
.TP
\fBTypographic quotation marks\fR can be entered 
by applying accent prefix keys to the space key as follows, 
or using certain input mnemonics or shifted combinations (see below):
.TP
(twice) grave space
(double) left quotation mark
.TP
(twice) acute space
(double) right quotation mark
.TP
acute space
\fIe.g.\fR F6 space
\fIor\fR Ctrl-' space
\fIalso serves for input of\fR typographic apostrophe
(\fIor\fR HOP ')
.TP
(twice) cedilla space
(double) low-9 quotation mark
.TP
(twice) dot above space
(double) high-reversed-9 quotation mark
.TP
^V < < \fIor\fR ^V > >
double angle quotation marks Ф ╗
.TP
^V < space \fIor\fR ^V > space
single angle quotation marks
.TP
" \fIor\fR '
outer or inner quotation mark of selected quote marks style
.TP
Alt-" \fIor\fR Alt-'
\(->NEW\(-> 
outer or inner quotation mark of previous/standby quote marks style
.PP
.PP
.TP
Some characters are specifically mapped to special key 
combinations or specific applications of accent prefix keys 
for convenience or for Windows compatibility:
.TP
Ctrl-Shift-space
no-break space (U+00A0)
.TP
Ctrl-@ a/A
т/┼
.TP
Ctrl-& a/A
Т/к
.TP
Ctrl-& o/O
oe/OE ligature
.TP
Ctrl-& s
▀
.TP
Ctrl-?
┐
.TP
Ctrl-!
А
.PP
As with modified keys in general, these shortcuts may depend on 
proper terminal configuration according to the sample files in 
the Mined runtime support library.
.SS Line ends
.PP
.TP
Key combinations are available to enter specific kinds of line ends
(works in xterm and mintty):
.TP
Ctrl-Alt-Enter
DOS or Unix line end (if editing Unix or DOS file, respectively)
.TP
Ctrl-Shift-Alt-Enter
Mac line end
.TP
Ctrl-Enter
Unicode line separator (if editing Unicode text)
.TP
Shift-Enter \fIor\fR HOP Enter
Unicode paragraph separator (if editing Unicode text)
.TP
\(->NEW\(-> Control-Shift-Enter
ISO 8859 Next Line (if editing Unicode or ISO 8859 text)
.TP
Also, the line end type of a line can be changed from a submenu 
of the Options menu.
.PP
.SS Character input mnemonics
The enter-control-code prefix (^V by default, ^Q in emacs 
keyboard mode, ^_ in Windows and pico keyboard modes, ^P in 
WordStar keyboard mode) can be used for mnemonic character 
composition.
This covers accented characters and other mnemonics.
The available mnemonics include RFC1345 mnemonics (extended 
to provide generic accent mnemonics for Unicode characters), 
mnemonics known from HTML and TeX,
\(->NEW\(-> 
groff glyphs (roff special characters), and useful supplementary mnemonics.
See Character Mnemos reference on 
the mined web site for a listing.
.br
Supplementary character mnemonics are consistent with generic 
RFC1345 mnemonics; scripts covered are Latin, Greek, Cyrillic.
.PP
For accent compositions, \fImnemonic patterns\fR 
(generic accent mnemonics) are listed in the following table;
the respective letter to place the accent(s) on is indicated 
with an "x" below.
.PP
For Greek and Cyrillic accented characters, mnemonics combining 
accents with Greek or Cyrillic base characters are generated 
automatically from the UnicodeData.txt database.
.br
Greek and Cyrillic accent prefix keys reuse those for 
Latin accents and are listed in the sections on Greek and Cyrillic 
script support (see Language support).
.TP
generic mnemonic
accent placed on the base character ("x")
.TP
x: \fIor\fR "x
diaeresis (umlaut)
.TP
x' \fIor\fR ┤x
acute (accent d'aigu)
.TP
x! \fIor\fR `x
grave
.TP
x> \fIor\fR ^x
circumflex
.TP
x? \fIor\fR ~x
tilde
.TP
x0 \fIor\fR ░x
ring above
.TP
x,
cedilla
.TP
x-
macron
.TP
x(
breve
.TP
x.
dot above / middle dot
.TP
x_ \fIor\fR _x
line below
.TP
x/
stroke
.TP
x" \fIor\fR x''
double acute
.TP
x;
ogonek
.TP
x<
caron
.TP
x2
hook above
.TP
x9
horn
.TP
x-> \fIor\fR >x
circumflex below
.TP
x-. \fIor\fR .x
dot below
.TP
x--. \fIor\fR .x-
dot below and macron
.TP
x.-. \fIor\fR .x.
dot below and dot above
.TP
x7 \fIor\fR x.-
dot above and macron
.TP
x~- \fIor\fR x?-
tilde and macron
.TP
x;-
ogonek and macron
.TP
x:-
diaeresis and macron
.TP
x-:
macron and diaeresis
.TP
x-'
macron and acute
.TP
x-!
macron and grave
.TP
-x \fIor\fR x--
topbar
.TP
--x \fIor\fR x--
bar
.TP
,x \fIor\fR x-,
comma below / left hook
.TP
x# \fIor\fR x!!
double grave
.TP
x)
inverted breve
.TP
x&
hook
.TP
%x
retroflex hook
.TP
x,,
palatal hook
.TP
x~~
middle tilde
.TP
x}
curl
.TP
x-? \fIor\fR ?x
tilde below
.TP
x--: \fIor\fR :x
diaeresis below
.TP
x-0 \fIor\fR ox
ring below
.TP
x-( \fIor\fR (x
breve below
.TP
x(-. \fIor\fR .x(
breve and dot below
.TP
x>-. \fIor\fR .x>
circumflex and dot below
.TP
x9-. \fIor\fR .x9
horn and dot below
.TP
x'.
acute and dot above
.TP
x('
breve and acute
.TP
x(!
breve and grave
.TP
x(2
breve and hook above
.TP
x(?
breve and tilde
.TP
x<.
caron and dot above
.TP
x,'
cedilla and acute
.TP
x,(
cedilla and breve
.TP
x>'
circumflex and acute
.TP
x>!
circumflex and grave
.TP
x>2
circumflex and hook above
.TP
x>?
circumflex and tilde
.TP
x:'
diaeresis and acute
.TP
x:<
diaeresis and caron
.TP
x:!
diaeresis and grave
.TP
x9'
horn and acute
.TP
x9!
horn and grave
.TP
x92
horn and hook above
.TP
x9?
horn and tilde
.TP
x0'
ring above and acute
.TP
x/'
stroke and acute
.TP
x?'
tilde and acute
.TP
x?:
tilde and diaeresis
.PP
.PP
See also the description of the 
^V function below for more 
input options.
.br
Two-letter mnemonics can also be entered in reverse order if 
this is unambiguous.
Detection of reverse order mnemomics (two letters or one letter 
and multiple accents) as well as the generic accent mnemonics 
" ^ ` ~ е » ┤ И ░ works with both short mnemonic 
entry (two-letter "^Vxy") and full mnemonic entry 
("^V xy... ").
.PP
Mnemonic character substitution commands 
(ESC _ and national variants) replace characters at the cursor 
position with the respective character described by them.
The following substitute descriptions are detected:
.RS
.IP \(bu
Two-character mnemonic
.IP \(bu
HTML character mnemonic
.IP \(bu
HTML numeric character entity
.IP \(bu
URL escape notation (bytewise hexadecimal with % prefixes)
.RE
.SS Keyboard Mapping and Input Methods
Mined supports optional keyboard mapping which is especially 
useful for Unicode or CJK editing.
When a keyboard mapping is selected, input characters or 
sequences are transformed to other characters or sequences, 
typically of a certain Unicode script range.
.br
Keyboard mappings for Greek, Cyrillic, Hebrew, Arabic, and 
major CJK input methods are preconfigured (they have been 
ordered in the Input Method menu according to the order of 
their respective basic ranges in the Unicode character set, or 
to the order of the letters of the usual abbreviation CJKV for 
East Asian text processing - Chinese, Japanese, Korean, 
Vietnamese). The Radical/Stroke input 
method provides additional functionality as a special case.
.br
Mined provides compile-time configuration of additional input 
methods; for this aim, further mappings can be generated using the 
mkkbmap script (from tables 
in various formats as used by other editors or supplied by the 
m17n multilingualization package) and then compiled into mined.
See Mined configuration below for details.
.PP
Keyboard mapping works as follows: You enter a key sequence 
that is mapped to a character sequence in the selected 
keyboard mapping table. The transformed character sequence is 
used as input.
.br
As some typical keyboard mappings contain ambigous key 
sequences where one may be a prefix of another, a short delay 
is applied in these cases to allow recognition of any such 
sequence to be mapped. After a timeout, the shorter sequence 
already matching will be used; the timeout can be cut short by 
typing a Space key, the Space character itself will then be 
discarded. (The timeout value is 900 ms by default and can be 
configured with the environment variable MAPDELAY.)
.SS 	Pick lists
Some keyboard mappings, especially for CJK input methods, 
contain multiple choice mappings. In these cases, a selection 
menu is displayed that offers a "pick list" to select a 
character from. A character can be picked with a mouse click, 
or by navigation to the desired choice with the cursor keys 
(down/up, right/left, page down/up) or the '<'/'>' keys , or 
by just selecting the menu row first (cursor-up/down), then 
typing a digit 1-9 or 0 to select the numbered character.
.br
The Space key can be configured to either navigate to the 
next choice, the next row, or to select the current choice; 
see option -K.
If the pick list is too large to fit on the screen, 
the menu will be scrollable or pageable (using cursor keys).
.PP
While navigating through the pick list, the line and the 
selected item in the line are highlighted accordingly; if 
the current item is a CJK character, also its character 
information (description and optionally pronunciations as 
configured with the Han info option of 
the '?' information flag menu) is displayed on the status 
line. If the item is a word comprising multiple CJK characters, 
the information for only the first of them is shown. The 
available information is derived from the Unihan database.
.PP
Keyboard mapping data are based on Unicode. So in CJK text 
mode, the selection menu (the pick list) may contain symbols 
that are not mapped to the active CJK text encoding. In a 
UTF-8 terminal, these will still be displayed but cannot be 
inserted. In a CJK terminal, some characters may not be 
displayed; an empty entry is shown instead. (In a non-Unicode, 
when editing text in a different encoding, there may even 
be characters that cannot be displayed in the selection menu 
but can be inserted.)
.SS 	Input method selection
An active and a standby input method (keyboard mapping) are 
maintained. They can be toggled quickly for text input, also 
on the prompt line.
.br
The current mapping is indicated as the Input Method flag 
by its two-letter script tag in the flags area, showing
"--" if no mapping is active.
.PP
The active mapping can be selected in the following ways:
.TP
ESC k \fIor\fR Alt-k \fIor\fR Ctrl-Alt-F12 \fIor\fR left click on Input Method flag
toggles between current (active) and previously 
selected (standby) input method (keyboard mapping)
.br
(Alt- toggle functions also work on prompt line)
.TP
HOP ESC k (or HOP Alt-k)
clears input method, i.e. resets keyboard mapping 
to none (unmapped input)
.TP
ESC I \fIor\fR Alt-I \fIor\fR ESC K \fIor\fR Alt-K \fIor\fR Ctrl-F12
opens the Input Method (Keyboard Mapping) selection menu
.br
(Alt-I or Alt-K or Ctrl-F12 also work on prompt line)
.TP
right click on Input Method flag
opens the Input Method selection menu
.TP
HOP ESC K \fIor\fR HOP Alt-K
cycles through available input methods / keyboard mappings
.PP
.PP
	If file position memory is enabled (see 
File info: Memory of file position and editing style parameters
above), mined also remembers the last selected input method 
for the file.
.PP
\fINote:\fR For preselecting the active or standby input method 
by environment configuration, see about usage of the 
environment variable MINEDKEYMAP below.
.PP
\fINote:\fR Keyboard mapping is implicitly suppressed temporarily 
where it is not useful: during mnemonic character input, HTML 
marker input, command letter entry, help selection, yes/no prompting.
.PP
.PP
.SH Character encoding support
A character encoding for interpretation and handling of text 
is selected in one of the following ways:
.RS
.IP \(bu
Interactively from the \fIEncoding Menu\fR (one of the flag menus), 
the encoding interpretation can be changed while editing; 
to open it, click with the right mouse button on the encoding 
indication in the flags area of the top line, or type Alt-E.
See also Quick Options (Mode indication) flags for an overview.
To toggle between the current and the previously selected encoding, 
click the Encoding flag with the left mouse button.
.IP \(bu
Explicitly with a \fIcommand line option\fR -E... 
with a number of options to specify the desired text encoding 
(see the encoding command line options above).
.IP \(bu
By \fIauto-detection\fR (heuristic counting of valid character codes).
\fINote:\fR The encodings to be taken into account for 
auto-detection can be configured with the MINEDDETECT 
environment variable. Set it to the desired list of single-letter 
encoding indications to disable auto-detection of other encodings.
Recognised encoding indications are mentioned in the list of 
auto-detected encodings below (they are the same as used with the 
-E parameter);
UTF-8 auto-detection cannot be disabled this way.
.IP \(bu
By either \fIenvironment variable\fR 
LANGUAGE 
or TEXTLANG (see Locale configuration), 
which overrides other locale variable settings for the purpose 
of text encoding without affecting them otherwise.
.IP \(bu
By checking the \fIlocale environment\fR 
(see Locale configuration).
.RE
.SS Auto-detected character encodings
The following encodings are auto-detected unless 
overridden with a -E command line 
option (or -l or -u);
the preceding one-letter tag can be used for auto-detection 
configuration with the environment variable MINEDDETECT:
.TP
-
UTF-8
.TP
-
UTF-16 encoding (big or little endian) with or 
without BOM (byte order marker)
.TP
8
any 8 bit encoding; this is auto-detected in a 
generic way; the actual 8 bit encoding assumed 
corresponds to the terminal encoding if it is an 8 bit 
terminal; otherwise, Latin-1 is assumed;
using "8" in the environment variable MINEDDETECT 
excludes all CJK encodings from auto-detection (but not UTF-8), 
and adds all 8 bit encodings that are not included by default
.TP
L
Latin-1 (ISO 8859-1)
.TP
W
Windows Western ("ANSI", CP1252)
.TP
P
PC Latin-1 (CP850)
.TP
M
MacRoman
.TP
-
CJK encoding (with unspecified mapping) is 
pre-auto-detected in a generic way; usually the actual 
CJK encoding is determined, too
.TP
G
GB18030 (including CP936)
.TP
B
Big5 (including CP950)
.TP
J
EUC-JP
.TP
X
\(->NEW\(-> 
EUC-JIS-2004 / EUC-JIS X 0213
.TP
S
Shift_JIS / CP932
.TP
x
\(->NEW\(-> 
Shift_JIS-2004 / Shift_JIS X 0213
.TP
K
UHC / CP949 (including EUC-KR)
.TP
V
VISCII
.PP
.PP
\fINote:\fR For new files, the text encoding is derived from 
the locale environment.
\(->NEW\(-> 
With command line option -E- or 
-E auto-detection is disabled and 
text encoding is always derived from the locale environment.
.SS CJK and mapped 8 bit encoding support
Mined supports major CJK encodings as well as mapped 
8 bit encodings ("character sets").
Mined has built-in support for a large number of 8 bit encodings 
which appear to be in use or unique for a region. The Encoding 
menu has been structured with submenus to provide a concise 
menu selection feature.
.SS \(->NEW\(-> EBCDIC support
Mined supports EBCDIC encoded files (transparently transforming 
them for internal handling) in the "bracket" codepage CP1047 as 
used by the UNIX System Services (USS) on IBM z/OS.
CP1047 is selected with command line option 
-E=cp1047 or 
-E.EBCDIC or 
-E:47.
The character encoding flag indicates EBCDIC with 
"47".
.br
New files in EBCDIC encoding will by default use Next Line 
as line separators; add option -r 
to prefer LF.
.br
New lines can be added selecting LF or NL lineend type 
explicitly with Ctrl-Enter or Shift-Enter.
.br
\(->NEW\(-> 
Auto-detection of EBCDIC can be enabled by including the letter 
"E" in the environment variable MINEDDETECT.
.SS \(->NEW\(-> ISO 6937 support
Mined supports ISO-6937 encoded files as defined by CCITT/ITU-T 
for telematic services/Teletex, with Euro extension as used for DVB.
ISO 6937 is selected with command line option 
-E=ISO-6937 or 
-E:I9.
The character encoding flag indicates ISO 6937 with 
"I9".
.SS Combining characters
In all character encodings handled by mined that contain 
combining characters, mined handles them and provides partial 
editing and an optional separated display mode as described 
above in section  Combining characters.
(CJK encodings EUC-JIS-2004, Shift_JIS-2004 and GB18030, 
Vietnamese TCVN and Windows Vietnamese (CP1258), Thai TIS-620, 
ISO Arabic, Mac Arabic, DOS Arabic, ISO Hebrew, Windows Hebrew).
Handling of combining text characters is properly coordinated 
with the set of combining characters supported by the terminal.
.PP
For Japanese X 0213 encodings, the character codes that map to 
two Unicode characters are supported.
.SS Character code related commands
The command ESC u displays character encoding information in the 
bottom status line (conforming to ISO 14755); this includes 
the character code, the mapped Unicode character value, 
and optionally script and character category information, 
character and named sequence name, 
combining and Unicode decomposition information, 
and mined mnemonic input information, as configured in the Info menu.
For CJK characters, also Han pronunciation and description 
information is available.
See Character information display for details.
.br
With HOP ESC u, permanent display is toggled.
.PP
Other commands insert the code of the current character, 
insert a character taking its character code or Unicode value 
from the text, or toggle the preceding character and its 
hexadecimal Unicode value (Alt-x).
For details, see Code conversion in the 
Command reference.
.SS Terminal environment for CJK encoding support
Mined supports handling of CJK text encoding in any terminal 
(see Terminal encoding support below).
However, proper display of a wide range of CJK characters can 
obviously only work in either a Unicode terminal (recommended) 
or in a native CJK terminal that runs the same encoding as the 
selected text encoding.
.PP
CJK terminals:
For terminals that support native CJK encodings 
(e.g. cxterm, kterm, hanterm), the terminal encoding assumed by 
mined can be specified with a command line option or by proper 
locale indication in one of the environment variables LC_ALL, 
LC_CTYPE or LANG.
For available encodings, see Quick Options (Mode indication) flags.
For usage of the +E options, see the 
description of the Terminal 
encoding options above.
For usage of the locale environment variables, see 
Locale configuration.
.PP
\fINote:\fR In native CJK terminals, it is often troublesome 
to find a working encoding configuration and font setup, and 
the locale environment is not automatically set by the terminals.
A collection of wrapper scripts is available 
(
http://towo.net/mined/terminals.tar.gz) to help with this 
setup problem and demonstrate the invocation of a number of 
different CJK and 8 bit encoded terminal windows, along with 
selection of suitable fonts and proper locale environment 
setting.
.PP
\fINote:\fR Native CJK terminals have a different 
assumption of the range of character codes supported in an 
encoding family, e.g. Big5 / Big5 with HKSCS, GB2312 / GBK / 
GB18030, EUC-KR / UHC, EUC-JP without/with 3 byte codes.
For compact handling, mined always assumes the largest superset 
of these encoding families. It does, however, have some features 
to prevent display garbage in most cases when a terminal supports 
a smaller character set:
By default, mined does not display the following CJK 
character codes in a native CJK terminal, i.e. it displays a 
substitute indication for them
(see CJK character display above):
.RS
.IP \(bu
Unknown characters: CJK characters that have no defined 
mapping to a valid Unicode character.
Use the +C option to override this 
display suppression and enforce transparent display of unknown 
characters in a CJK terminal.
.IP \(bu
Invalid characters: CJK characters that do not match the 
encoding scheme (e.g. wrt. to specified byte ranges) of the 
selected encoding.
Use the +CC option to override this 
display suppression and enforce transparent display of invalid 
character codes in a CJK terminal.
.IP \(bu
Extended characters: CJK characters encoded with 3 or 
4 bytes.
Use the +CCC option to override this 
display suppression and enforce transparent display of extended 
character codes in a CJK terminal.
.RE
.PP
Regardless of all these features and options, it may not 
always be possible to prevent display garbage, especially 
if the font used by the terminal does not cover the needed 
character range.
To avoid these problems in general, it is recommended to use 
a Unicode terminal for editing CJK encoded files.
.PP
See also Terminal interworking 
problems for special hints about certain terminals.
.PP
.SS VT100 special graphics character set display support
Mined can display and edit files containing codes for 
VT100 line drawing graphics characters, showing corresponding 
small letters as their respective graphic symbol.
This option can be toggled from the Options menu and will 
be cleared also on an explicit screen redraw command (ESC .).
.PP
.PP
.SH Unicode support
.SS Introduction: handling Unicode encodings
Mined interprets UTF-8 which is a multi-byte character 
encoding of the ISO-10646 character set, part of which is also 
known as Unicode.
When reading a file, it detects UTF-8 encoding automatically 
(unless overridden by explicitly selecting a text encoding with 
a command line option -u or 
-l or -E...).
It can also edit UTF-16 encoded Unicode files (UTF-16 can 
represent the complete 21 bit Unicode subset of ISO-10646).
UTF-16 big or little endian with or without BOM (byte order 
mark U+FEFF) is auto-detected or can be selected with a 
command-line option (see 
notes under Locale configuration below).
.br
UTF-16 is maintained transparently, i.e. a UTF-16 encoded file 
is written back in UTF-16, and if it was beginning with a BOM 
this is maintained.
No explicit UTF-16 entry exists, however, in the Encoding menu 
since the text is internally handled in UTF-8. However, the 
character encoding flag indicates UTF-16 file encoding with either 
"16" (big endian) or 
"61" (little endian).
.SS UTF-8 internal representation, transparent handling of other text
Mined handles UTF-8 representation internally and also edits 
and keeps illegal UTF-8 sequences. This way, if you 
happen to open a Latin-1 or CJK or any other encoded file 
in UTF-8 mode, or switch encoding while editing, or edit a 
file with mixed encoding, the text contents can still be 
edited and you will not loose any file contents information.
.SS Character encoding indication
The upper-right flags area has a character encoding indication 
which shows "U8" if UTF-8 
text interpretation is selected. For Latin-1 text interpretation 
"L1" is shown, for others see 
Quick Options (Mode indication) flags.
You may click on the indication flag to toggle between the 
current and the previous selected encoding.
.SS Character information display
The Character information display 
command ESC u is described above; character information display 
can also be preselected by environment configuration.
In UTF-8 mode, information shown includes the UTF-8 encoding 
byte sequence.
.SS Character input support
With ^V, mined's special character input support is invoked 
(both while editing text and entering text on the prompt line, 
e.g. as a search expression).
With this feature, (in addition to plain control characters) 
a composite character can be entered by its accent combination 
or other mnemonic character description;
a more-than-two letter character mnemonics would be embedded 
in space characters after the ^V.
In addition, numeric character codes or values can be entered 
with leading ^V#, octal/decimal with ^V##/^V#=, Unicode with 
optional u/U/+.
(For examples, see description of the
^V function below.)
With numeric character input, mined supports \fIsuccessive 
multiple character entry\fR according to ISO 14755; if the 
numeric code is terminated by a Space key, another numeric 
character can be entered subsequently; an Enter key 
terminates numeric character input.
.PP
See also the generic section 
Character input support above 
for input support for accented characters and keyboard mapping.
.SS Encoding conversion support
Two functions support interactive character encoding conversion 
(Latin-1 to UTF-8 or UTF-8 to current encoding) 
to partially fix files with mixed encoding.
In either text encoding mode, the search function looks for 
characters encoded in UTF-8 (when not editing in UTF-8 mode) 
or not (when editing in UTF-8 mode); the command is 
HOP ESC ( or Alt-F11 .
Then, convert the character with ESC _ or its national variant 
(see mnemonic character substitution 
commands in the Command reference).
.br
For repeated interactive conversion, both functions can be 
combined into Alt-Shift-F11 (convert current character, then 
search next).
.SS 	Unicode Copy/Paste buffer conversion
For the Copy/Paste buffer, Unicode mode can be selected which 
maintains its contents always in Unicode, so that Copy/Paste 
of text works between differently encoded files (or sections 
of a file, if encoding is switched while editing) with automatic 
character code conversion.
This mode is only effective while editing with non-Unicode 
encoded text interpretation.
.br
Select this mode with the command line option 
-Eu or in the Paste buffer menu 
(righ-click on the Buffer mode flag "=" or 
"+") and select "Unicode".
.br
Unicode buffer mode is indicated by cyan background of the 
Paste buffer flag (then "=" or 
"+"), except in Unicode text mode.
.SS Smart quotes and dashes
If smart quotes mode is enabled (see the Quotes style menu under 
the Quotes flag left to the Encoding flag and menu), quote mark 
keys will enter typographic smart quotes instead. Smart dashes 
also apply.
See Smart quotes above for more details.
.SS Bidirectional terminal support
A bidirectional terminal (such as mintty, mlterm) will probably 
also apply Arabic LAM/ALEF ligature joining. Mined auto-detects 
this feature and enables bidi terminal handling automatically.
Otherwise, bidi terminal handling can be configured with the 
option +UU.
.br
In this mode, when displaying a menu, underlying text 
lines that contain right-to-left characters are cleared first 
in order to prevent display confusion between the terminal's 
bidi algorithm and the menu position.
.br
Also, with bidi terminal handling enabled, mined assumes 
that the terminal applies Arabic LAM/ALEF ligature joining 
and properly accounts for this feature in display position 
handling.
.br
In separated display mode, the joining part of the ligature 
is indicated similar to the handling of combining characters.
.SS Input support for right-to-left scripts ("poor man's bidi" mode)
This support feature for input of right-to-left text pieces 
is enabled by default unless the terminal is detected to be 
in bidi mode itself (e.g. mlterm).
.br
"Poor man's bidi" mode is suitable to insert small pieces of 
right-to-left text (words, phrases) within left-to-right text, 
it stores right-to-left text in visual order (see below) 
and works as follows:
.br
After entering a right-to-left Unicode character, the cursor 
position is moved left of it, so subsequent characters will be 
appended left and the text shifted right. Characters are 
stored in visual order while input support is implicit, based 
on the characters being typed. Entering a left-to-right 
character will automatically skip behind the previously 
entered right-to-left text on the line 
and switch to left-to-right direction; this behaviour 
optimizes inserting small pieces of right-to-left text into 
basically left-to-right text; this priority is justified by 
the assumption that this mode (with visual storing order) is 
only useful for inserting small right-to-left quotations into 
left-to-right text and not for editing right-to-left documents 
(which should be stored in logical order).
.br
Newline, Space, Tab, and combining characters attempt to 
behave well according to what was entered before; however, 
intermediate cursor movement is not considered.
.br
\fINote:\fR For proper support of right-to-left text 
editing stored in logical order, please use mined in a 
right-to-left terminal (mintty, mlterm). Adding a feature for 
advanced bidi support in all terminals is being considered.
.br
\fINote:\fR Poor man's bidi mode also works in non-Unicode text encodings.
.br
\fINote:\fR Poor man's bidi mode is similar to the "revins" 
(reverse insert) option of vim.
.SS Unicode line ends
Mined detects and handles Unicode line separators and 
paragraph separators (unless disabled with 
+u-u).
They are displayed as shown above.
Interpretation of these characters as line ends is disabled if 
a file is explicitly opened in non-Unicode encoding (but not 
if non-Unicode encoding is just auto-detected).
.br
If editing Unicode text, HOP Enter will insert a Unicode 
paragraph separator, Enter in a line that already has a 
Unicode line end will insert a Unicode line separator.
Also, the keys Shift-Enter or Ctrl-Enter insert a paragraph 
separator or line separator respectively.
.br
\fIConfiguration:\fR In order to enable shift and control 
with the Enter keys, xterm or rxvt must be configured as shown 
in the example configuration file Xdefaults.mined 
in the Mined runtime support library.
.SS Unicode display
In UTF-8 terminal mode, mined displays all Unicode characters 
if they are contained in the font used by the terminal.
Fonts usually have a substitute glyph to indicate characters 
not contained in the font.
Wide characters (double-width glyphs) are displayed in a 
double-width character cell of the terminal.
Combining characters are displayed either combined or 
separated (see Combining characters below).
.PP
Illegal UTF-8 sequences are displayed with highlighted 
background, using the following indications.
Furthermore, control characters encoded as a UTF-8 sequence 
and control characters in the "C1" range (values 0x80..0x9F) 
will be displayed similar to normal control characters but 
with coloured highlighting.
.TP
8
for an unexpected UTF-8 continuation byte (range 80-BF)
.TP
4
for a 0xFE (254) byte
.TP
5
for a 0xFF (255) byte
.TP
Ф
for a too short UTF-8 sequence if followed by a 
single-byte character (00..7F)
.TP
╗
for a too short UTF-8 sequence if followed by a 
multi-byte character (C0..FF)
.PP
.PP
Illegal or non-Unicode characters are indicated with the following replacements:
.TP
\*(21
(or ? or [])
a character code ending with FFFE or FFFF
(override substitution for transparent display with 
+C)
.TP
\*(21
(or ? or [])
a surrogate code point
(override substitution for transparent display with 
+CC)
.TP
\*(21
(or ? or [])
a code point outside the defined Unicode range
(override substitution for transparent display with 
+CCC)
.PP
.SS Character substitution display
Legal characters (in the effective text encoding) that cannot 
be displayed in a non-Unicode terminal are indicated with the 
following replacements:
.TP
ц \fIor\fR 
ц\  \fI(if wide)\fR
a non-combining Unicode character that cannot be displayed
.TP
% \fIor\fR 
%\  \fI(if wide)\fR
\fI(if the terminal cannot display ц)\fR
a non-combining Unicode character that cannot be displayed
.TP
` \fI(or wide)\fR
a Unicode combining character that cannot be displayed
.TP
" \fIor\fR 
 ' \fI(or wide)\fR
a double or single quotation mark character (typographic quote mark)
.TP
- \fIor\fR 
~ \fIor\fR
= \fI(or wide)\fR
a dash or hyphen character
.TP
e, Ж,
\fIetc\fR
a combined or other character that cannot be displayed 
which is based on the displayed character by its 
\fIUnicode decomposition\fR
.TP
E
the Euro sign \*(13 U+20AC
.TP
V, 
X, 
Z
the check mark \*(16 U+2713, ballot X \*(17 U+2717 , zigzag arrow \*(14 U+21AF
.TP
 '
glottal stop 'okina \*(12 U+02BB
.TP
0\ ..9\ ,
A\ ..Z\ 
\fIetc\fR
a corresponding fullwidth ASCII character
.PP
.PP
\fIConfiguration:\fR Display colour of special or illegal 
UTF-8 indications can be changed with the environment variable 
MINEDUNI, the value should be the numeric part of an ANSI 
terminal control sequence; optionally, the value can be 
preceded by a character to be used for Unicode character 
indication in non-Unicode terminal mode.
.br
(The default configuration value is "ц 46").
.SS Combining and joining characters
Mined supports handling of combining characters, 
featuring optional separate display and partial editing, 
as described above in section  Combining 
characters.
.SS 	Joining characters
If mined assumes that the terminal applies LAM/ALEF ligature 
joining (either configured with the +UU 
right-to-left display option or auto-detected; correct native 
support is known of mlterm), the joined character width will 
be handled correctly in cooperation with the terminal.
In all other terminals mined will apply LAM/ALEF joining itself.
.br
Mined supports ligature joining in both combining character 
display modes:
.RS
.IP \(bu
In combined display mode, the screen position is accounted 
properly.
Also, when deleting a character, a joined ligature is deleted 
together with the base character, just like combining characters.
.IP \(bu
In separated display mode, the joining part of the ligature 
is indicated using the appropriate isolated form, highlighted with 
Unicode special indication background colour (similar to the 
handling of combining characters).
.RE
.SS Search expression limitations
Unicode search ranges can not be very large as all 
included characters are listed in an internal buffer which is 
limited to ca. 1 KB.
.SS UTF-8 preservation and byte-transparent editing
When splitting lines that are too long for internal handling, 
consistency of UTF-8 sequences is preserved (they are not split); 
combining characters may get split off their base characters, 
however, they will join seemlessly as lines are joined again 
(e.g. when saving the file).
Note that isolated combining characters, e.g. at the beginning of 
a line, are always displayed as if in separated display mode.
.SS Terminal environment
Unicode text can be edited in any terminal encoding (UTF-8, 
8 bit, CJK), however, a UTF-8 terminal is preferable.
UTF-8 terminal operation can be configured in either of these ways:
.RS
.IP \(bu
Auto-detection: If the terminal emits cursor position reports, 
mined can uniquely recognise UTF-8 terminal encoding and further 
UTF-8 features 
(see Terminal encoding support below).
.IP \(bu
Environment: By proper environment variable settings. 
For more details, see Locale configuration.
.br
\fINote:\fR In general, it is advisable to start a 
terminal window using a wrapper script that sets a suitable 
locale environment at the same time, in order to support all 
kinds of applications that are more dependent on proper 
environment setting than mined is.
The mined installation also provides the script 
uterm for this purpose, with its own manual page.
(In case uterm is not installed, it is also 
included in the Mined runtime support library.)
.IP \(bu
Parameter: +EU selects UTF-8 terminal mode.
.RE
.PP
.TP
See also Terminal interworking 
problems for special hints about certain terminals.
.PP
.PP
.PP
.SH CJK support (Chinese/Japanese/Korean Han character features)
Mined provides CJK support features uniformly in Unicode 
and in major CJK encodings. For information relating to 
CJK character encoding see 
Character encoding support below.
.SS CJK input method support
\fIInput methods\fR for CJK characters are supported with 
the keyboard mapping feature.
A number of popular input methods for CJK text input 
are pre-configured, others can be added at compile-time 
with the mkkbmap script.
.SS 	Radical/Stroke input method
Mined provides a Radical/Stroke input method for CJK 
characters with specific functionality in addition to keyboard 
mapping; it works at two-levels, selecting a radical first, 
then a character from a list sorted by stroke count.
If this input method is active, a selection menu for the 214 
CJK radicals is displayed (without prior keyboard input).
The menu displays all variations of each radical. After 
selecting a radical from this menu, a second-level menu 
is displayed, showing all CJK characters based on the 
selected radical, sorted by the number of strokes.
Many of these menus will not fit on the screen and can be 
scrolled.
Pressing Escape here would return to the radical menu; 
pressing Escape there would disable the input method.
To enter a non-mapped character (e.g. a line end), you 
need to disable Radical/Stroke input method temporarily; 
just toggle it back on with Alt-k (or Esc k) or Ctrl-Alt-F12 and 
the radical menu will be displayed again for continued input.
.br
For the Unicode version used as the character data source, 
see the Options - About information or the mined change log.
.SS CJK character display
Combining characters (in both JIS X 0213 encodings and GB18030) 
are handled and the combined characters are displayed properly 
in either combined or separated display mode in a UTF-8 
terminal (like for UTF-8 encoded text).
The following special CJK character indications apply:
.TP
ц\  \fIor\fR
ц
CJK character that cannot be displayed in the terminal
.TP
%\  \fIor\fR
%
\fI(if the terminal cannot display ц)\fR
CJK character that cannot be displayed in the terminal
.TP
` \fIor\fR 
`\ 
CJK combining character that cannot be 
displayed in the terminal
.TP
? \fIor\fR
?\ 
CJK character code that has no known mapping to Unicode
.br
(to enforce display on CJK terminal use option +C)
.TP
# \fIor\fR
#\ 
invalid CJK character code that is outside of the 
code range assigned to the encoding scheme
.br
(to enforce display on CJK terminal use option +CC)
.TP
#
CJK character in extended code range 
(esp. 3 and 4 byte codes, or codes with 0x80...0x9F 
byte range) that cannot be displayed on CJK terminal 
due to terminal capability limitations
.br
(to enforce display on CJK terminal use option +CCC)
.TP
<
incomplete or otherwise illegal CJK code
.PP
.SS Han character information display
When the cursor is on a Han character and either descriptive 
or pronunciation information about this character is available 
in the Unihan database (from unicode.org), mined can 
optionally display this information, with a selection of 
display details which may include semantic information and 
various pronunciations.
.br
To enable Han info, select it in the Info menu.
To open the Info menu, type Alt-F10 or right-click the 
"?" flag.
The information can optionally be shown on the status line 
(where it may be truncated if too long) or in a pop-up menu next 
to the character.
.br
Pronunciation information to be displayed can be selected 
in the Info menu.
While selecting multiple pronunciation options, the menu stays open.
.PP
The same information is always shown while you are browsing 
an input method pick list (then on the status line).
.PP
Han character information display can be selected with the 
+?h command line parameter (or 
+?x for short display on the 
status line).
To preselect continuous Han character information display, 
append this parameter to the environment variable MINEDOPT.
.PP
The information includes the character code (in CJK encoding, 
both CJK code and corresponding Unicode value are shown).
The amount of descriptive information (from the Unihan 
database) to be shown can also be preconfigured with the 
environment variable MINEDHANINFO; 
see Han info configuration below.
.br
(For the Unicode version used for the Unihan data source, 
see the Options - About information or the mined change log.)
.br
.PP
.PP
.SH Terminal encoding support
Mined supports UTF-8 terminals, CJK terminals, Latin-1 and 
other 8-bit encoded terminals.
.SS Terminal feature detection
Mined performs auto-detection of a number of terminal 
features:
.RS
.IP \(bu
For UTF-8 terminals, mined performs auto-detection of 
terminal features (detection of UTF-8 terminal, different 
width data and combining data versions, handling of 
double-width, combining and joining characters).
.IP \(bu
For CJK terminals, mined performs some auto-detection of 
specific CJK terminal features (handling of non-EUC code 
points, handling of extended code range, GB18030, 3-byte and 
4-byte encodings, detection of kterm JIS encoding, detection 
of rxvt emulating CJK encoded terminal, special CJK width 
properties, and terminal support of combining characters).
.IP \(bu
For mapped 8-bit terminals, mined performs auto-detection 
of terminal support of combining characters.
.IP \(bu
For the Unicode version used for width and combining 
character properties, see the Options - About information or the 
mined change log.
.IP \(bu
CJK terminals cannot always be distinguished from 8-bit 
terminals by auto-detection. Neither can the encoding of either 
CJK or 8-bit terminals be auto-detected.
It is thus advisable to setup proper settings of locale 
environment variables (LC_ALL, LC_CTYPE, LANG).
Alternatively, the effective terminal encoding can be indicated 
to mined with a command line option (+EX).
For configuration details, see 
Locale configuration below.
.RE
.PP
.SS Specific terminal properties
For more specific configuration hints (especially for PC-based 
terminals), see the Terminal environment 
configuration hints below.
.br
For interworking issues with specific terminals see also 
the listing of 
Terminal interworking problems.
.PP
.PP
.TP
.SH Mined Command reference (command and key function assignments)
\fIGeneral note on using keys with Control, Shift, Alt modifiers:\fR
Mined makes use of many key combinations modified with 
Control, Shift, Alt, or a combination of them, as a resource 
for invoking a larger number of specific functions, providing 
modified functionality as well as accented character input 
support.
Some of these key combinations may be limited by local 
environment, especially the window system, or may need 
extra configuration to be enabled.
.br
Especially modified function keys are often intercepted by 
window systems for special functions.
.br
In general, mined interprets an ESC prefix as an alternative 
for an Alt-key combination. For further advice and window system 
specific hints on further remedies, as well as configuration hints, 
to enable modified key input see the 
hint box under Accent prefix keys above.
.SS Generic command modifiers (esp. HOP key)
.TP
^Q \fIor\fR ^G \fIor\fR "5" \fI(on keypad) or\fR Menu \fI(in Linux) or\fR * \fI(on keypad) or\fR Shift-TAB
HOP key (except ^G followed by a digit).
.br
In order to enable the "5" key to invoke the HOP function, or 
assign the HOP function to another key (e.g. on laptops which 
lack the numeric keypad), some configuration may be necessary;
see Keypad configuration below.
.TP
ESC
Prefix for subsequent "letter commands".
.br
\fIAlso:\fR Generic prefix for "Alt" modified command (to 
apply to a subsequent command for which the terminal does not 
support the Alt key).
.TP
^V
\fI(Prefix for control character input, but also:)\fR
.br
Generic prefix for "Control" modified command (to apply to 
a subsequent command for which the terminal does not support 
the Control key).
.TP
Ctrl-< punctuation key >
\fI(Set of accent prefix keys to enter composed characters.)\fR
.PP
.SS Cursor and screen motion
.TP
^E \fIor\fR cursor-up
Move cursor 1 line up.
.TP
\fI... with HOP:\fR
Go to top of page.
.TP
^X \fIor\fR cursor-down
Move cursor 1 line down.
.TP
\fI... with HOP:\fR
Go to bottom of page.
.TP
^S \fIor\fR cursor-left
Move cursor 1 character left.
.TP
\fI... with HOP or\fR Ctrl-Home
Go to beginning of line.
.TP
^D \fIor\fR cursor-right
Move cursor 1 character right.
.TP
\fI... with HOP or\fR Ctrl-End
Go to end of line.
.TP
^A \fIor\fR Shift-cursor-left \fI(on small keypad)\fR
Move word left (to preceding beginning of a word).
.TP
\fI... with HOP:\fR
Go to beginning of sentence.
.TP
^F \fIor\fR Shift-cursor-right \fI(on small keypad)\fR
Move word right (to beginning of next word).
.TP
\fI... with HOP:\fR
Go to end of sentence.
.TP
Ctrl-Shift-cursor-up
Move backward to previous beginning of paragraph.
.TP
Ctrl-Shift-cursor-down
Move forward to next beginning of paragraph.
.TP
Shift-cursor-up \fI(on small keypad)\fR
Go to top of page.
.TP
Shift-cursor-down \fI(on small keypad)\fR
Go to bottom of page.
.TP
^R \fIor\fR PgUp \fIor\fR PrevScreen (VT100)
Scroll backward 1 page (Top line becomes bottom line).
.TP
\fI... with HOP:\fR
Go to beginning of text.
.TP
^C \fIor\fR PgDn \fIor\fR NextScreen (VT100)
Scroll forward 1 page (Bottom line becomes top line).
.TP
\fI... with HOP:\fR
Go to end of text.
.TP
Home (on small keypad)
Move to beginning of line.
If already there, move to beginning of previous line.
\fIOnly if keyboard is configured to emit different 
control sequences for the two keypads, see
Keypad configuration hints below.\fR
.TP
Ctrl-Home (on small keypad)
Move to beginning of line.
.TP
End (on small keypad)
Move to end of line.
If already there, move to end of next line.
\fIOnly if keyboard is configured to emit different 
control sequences for the two keypads, see
Keypad configuration hints below.\fR
.TP
Ctrl-End (on small keypad)
Move to end of line.
.TP
\(->NEW\(-> HOP ESC .
Center current position vertically on screen.
.PP
.SS 	Navigation support for combined Unicode characters
\fIEnabling partial editing of base character and combining 
characters (accents) in combined display mode.\fR
.TP
Ctrl-cursor-right \fIor\fR ^V cursor-right
\fIMicro movement:\fR 
Move partial character right into Unicode combined character.
.TP
Ctrl-cursor-left \fIor\fR ^V cursor-left
\fIMicro movement:\fR 
Move partial character left over Unicode combining character.
.TP
^W \fIor\fR Ctrl-PgUp \fIor\fR keypad-Minus \fI(if supported by terminal)\fR
Scroll screen backward 1 line.
.TP
\fI... with HOP:\fR
Scroll backward half a screen.
.TP
^Z \fIor\fR Ctrl-PgDn \fIor\fR keypad-Plus \fI(if supported by terminal)\fR
\fIor\fR \(->NEW\(-> keypad-Comma (DEC)
Scroll screen forward 1 line.
.TP
\fI... with HOP:\fR
Scroll forward half a screen.
.TP
^G nn Enter\fIor\fR ESC g nn Enter
Move to a line (prompts for line number).
(Terminate command with Enter or Space.)
.TP
^G nn % \fIor\fR ESC g nn %
Move to position in text determined by percentage.
.TP
^G nn p \fIor\fR ESC g nn p
Move to page in text (set page length with ESC P).
.TP
^G < command > \fIor\fR ESC g < command >
If not immediately followed by a digit, the 
positioning command works as an alternative HOP key.
.PP
.SS 	Text marker navigation
.TP
^G N , \fIor\fR ESC g N ,
(N=0..15) Set marker N. (Final "m" or "," may be used.)
.TP
^G N . \fIor\fR ESC g N .
(N=0..15) Go to marker N. (Final "'" or "g" or "." may be used.)
.TP
ESC m N
(N=0..9/a..f) Set marker N.
.TP
ESC ' N \fI(deprecated)\fR
(N=0..9/a..f) Go to marker N.
.TP
HOP Home \fIor\fR ^G ^@ \fIor\fR ^G ^] \fIor\fR HOP ESC ^
Move to the position previously marked by Home/^@/^]/ESC ^
.TP
ESC Enter \fIor\fR Alt-Enter (Alt-Return) *
Return backward to the previous position marked in the position stack.
.TP
HOP ESC Enter \fIor\fR HOP Alt-Enter (HOP Alt-Return) *
Return forward to the next position marked in the position stack.
* Note that depending on Window system or terminal, 
Alt-Enter may be captured as a function to maximize the window.
.TP
\fIleft mouse button\fR
Move cursor to position.
.PP
.SS Entering text
\fITo enable combinations of Control and Shift with the Enter key,
terminal configuration may be needed (see 
Unicode line ends).\fR
.PP
.TP
< printable char >
Insert the character at cursor position.
.TP
< Enter > \fIor\fR < LF Linefeed char > \fIor\fR < CR Return char >
Insert a newline at cursor position, clone 
line end type. Apply auto-indentation if enabled.
.TP
Ctrl-Enter \fI(if editing Unicode text)\fR
Make a new line by inserting a Unicode line separator at 
cursor position (unless disabled with +u-u).
.TP
Shift-Enter \fI(if editing Unicode text)\fR
Make a new line by inserting a Unicode paragraph separator 
at cursor position 
(unless disabled with +u-u).
.TP
\(->NEW\(-> 
Control-Shift-Enter \fI(if editing Unicode or ISO 8859 text)\fR
Make a new line by inserting a Next Line character (U+0085).
.TP
Ctrl-Alt-Enter
Make a new line by inserting a DOS or Unix line end at 
cursor position (if editing Unix or DOS file, respectively).
.TP
Ctrl-Shift-Alt-Enter
Make a new line by inserting a Mac line end at cursor position.
.TP
< Tab char >
Insert a Tab character at cursor position.
\fIwith option -+8 
or -+4 or -+2:\fR
Tab expansion; insert as many space characters as needed to 
fill line up to the next Tab position.
.TP
^V < Tab char >
Insert a Tab character (even in Tab expansion mode).
.TP
HOP {, HOP (, HOP [, HOP <
Enter indented pair of matching parentheses.
.TP
HOP /
Enter an indented Javadoc comment frame.
.TP
HOP ' \fIor\fR HOP ┤ \fI(acute accent)\fR
Enter an apostrophe (U+2019).
\fINote:\fR In smart quotes mode, 
┤ alone also enters an apostrophe.
.TP
HOP ` \fI(grave accent)\fR
Enter a glottal stop / 'okina (U+02BB).
\fINote:\fR In smart quotes mode, 
` alone also enters a glottal stop.
.TP
HOP -
Underline the line that starts before the cursor position.
.TP
^O
Make new line at current position.
If the current line is terminated by a Unicode 
paragraph separator, a line separator is inserted.
.br
Auto-indentation is not applied.
.TP
HOP ^O
Split a line in two binary-transparently, i.e. 
enter a "NONE" virtual line end.
.PP
.SS 	Accented character input support by accent prefix keys
\fIMined defines a number of function keys, modified function keys, 
modifed digit keys, and modified punctuation keys for single 
and multiple accent composition with a subsequently entered 
character; for a detailed listing and description, see 
Accent prefix function keys above.
.br
Up to three accent prefix keys can be combined by entering 
them in sequence in order to compose characters with multiple 
accents.
\fR
\fIThese functions also work on the prompt line (e.g. 
to enter search expressions).\fR
.PP
.TP
F5 < character >
Compose character with diaeresis (umlaut accent), 
e.g. a ╗ С
.TP
Shift-F5 < character >
Compose character with tilde,
e.g. a ╗ с
.TP
Ctrl-F5 < character >
Compose character with ring or with cedilla,
e.g. a ╗ т , c ╗ у
.TP
Ctrl-Shift-F5 < character >
Compose character with ogonek.
.TP
Alt-Shift-F5 < character >
Compose character with breve.
.TP
F6 < character >
Compose character with acute accent (accent d'aigu),
e.g. a ╗ р
.TP
Shift-F6 < character >
Compose character with grave accent,
e.g. a ╗ Я
.TP
Ctrl-F6 < character >
Compose character with circumflex accent,
e.g. a ╗ Р
.TP
Ctrl-Shift-F6 < character >
Compose character with macron.
.TP
Alt-Shift-F6 < character >
Compose character with dot above.
.TP
Ctrl-0 ... Ctrl-9
Compose character with accent, esp. for Vietnamese 
accented characters.
.TP
(Ctrl-)Alt-1 ... (Ctrl-)Alt-5
Compose character with two accents, esp. for Vietnamese 
double accented characters.
.TP
(Ctrl-)Alt-6 ... (Ctrl-)Alt-8
Compose character with two accents for Greek multiple 
accented characters.
.TP
Ctrl-< punctuation key >
Compose character with accent (looking similar to the 
modified punctuation character, e.g. Ctrl-, composes 
with cedilla, Ctrl-: with diaeresis, Ctrl-minus 
with macron, Ctrl-( with breve, Ctrl-< with caron, 
Ctrl-/ with stroke, Ctrl-; with ogonek, etc; see 
Accent prefix function keys 
above for details).
.PP
.SS 	Input support commands
.TP
\fICtrl-V special input support\fR
\fIThese functions also work on the prompt line (e.g. 
to enter search expressions).\fR
.TP
^V < control character >
Enter control character.
.TP
^V [ \fIor\fR ^V \\ \fIor\fR ^V ]
Enter one of the control characters ^[, ^\\, ^].
.TP
^V ^ ^ \fIor\fR ^V _ _
Enter one of the control characters ^^, ^_.
.TP
^V ^ ' \fIor\fR ^V ^ "
\(->NEW\(-> 
\fIor\fR ^V ^ ` \fIor\fR ^V ^ ┤
Enter one of the straight quote marks ' or " or plain accents 
(needed in smart quotes mode)
.TP
^V < accent > < character >
Compose accented character.
.TP
^V # xxxx < Space or Enter >
Enter character defined by a hexadecimal number being input 
(depending on applicable encoding, byte value, Unicode 
value, or valid CJK code is required).
.TP
^V # # xxxxxx < Space or Enter >
Like ^V # but using an octal number.
.TP
^V # = xxxxx < Space or Enter >
Like ^V # but using a decimal number.
.TP
^V # u \fIor\fR U \fIor\fR +
(followed by a numeric input as described above, with optional 
# or = for octal or decimal input) interprets the input as a 
numeric Unicode value which is converted into the current 
text encoding.
.TP
^V # ... Space ...
With numeric character input, mined supports \fIsuccessive 
multiple character entry\fR according to ISO 14755 if the 
numeric code is terminated by a Space key.
.TP
^V < function key >
\fIThis is not an input support function but rather the 
function key is invoked as if pressed together with the 
control key.\fR
.PP
.TP
\fIMnemonic character input support\fR
\fIMnemonics recognised include the following:
.RS
.IP \(bu
RFC 1345 mnemos (except mappings to Unicode private use areas); 
in ambiguous cases, the RFC 1345 mnemos must be entered in 
long mnemonic input mode, e.g. with "^V pi " rather than "^Vpi"
.IP \(bu
HTML mnemos; in ambiguous cases, the HTML mnemos 
must be prepended with a "&"
.IP \(bu
TeX mnemos (macros) and substitutes, leaving out any "\\"
.IP \(bu
\(->NEW\(-> 
groff glyphs (roff special characters), mnemonics beginning with "("
.IP \(bu
Supplementary mnemos as listed on the 
mined character mnemos page
.RE
Unless there is an ambiguous mapping, all two-letter mnemonics 
can also be entered in reverse order.
\fR
.TP
^V < Space > < name > < Space or Enter >
Lookup character mnemonic and enter character. RFC 1345 
mnemonics take precedence in ambiguous cases.
.TP
^V < character > < character >
Compose two characters. Non-RFC 1345 mnemonics take 
precedence in ambiguous cases.
.PP
\fINote:\fR
A number of mnemonics are defined with already precomposed base 
characters (especially for Vietnamese input) which can be used 
for further composition.
.br
^V can be applied recursively to compose a character 
for further composition.
.br
See examples with Т below for both cases.
.PP
\fIExamples:\fR
.TP
^V^A
Enter Ctrl-A.
.TP
^V^[ \fIor\fR ^V[
Enter the escape character.
.TP
^V__
Enter Ctrl-_.
.TP
^V'e
Enter ж (e with accent d'aigu).
.TP
^Vae
Enter Т (the ae ligature).
.TP
^V ae'  \fI(terminated by Space or Enter)\fR
Enter U+01FD (Т with acute).
.TP
^VТ'
Enter U+01FD (Т with acute).
.TP
^V ^Vae'  \fI(terminated by Space or Enter)\fR
Enter U+01FD (Т with acute).
.TP
^V'^Vae
Enter U+01FD (Т with acute).
.TP
^VOK \fIor\fR ^Vcm
Enter the check mark \*(16 (U+2713)
.TP
^Vzz \fIor\fR ^V zigzag \fI(terminated by Space or Enter)\fR
Enter the downwards zigzag arrow \*(14 (U+21AF)
.TP
^V-,
Enter г (the negation symbol).
.TP
^V neg  \fI(terminated by Space or Enter)\fR
Enter г (the negation symbol).
.TP
^Va* \fIor\fR ^V a*  \fI(terminated by Space or Enter)\fR
Enter the Greek small letter alpha.
.TP
^V ae'  \fI(terminated by Space or Enter)\fR
Enter the Latin ligature ae with acute accent.
.TP
^V euro \fI(terminated by Space or Enter)\fR
Enter the Euro character.
.TP
^V#20ac \fI(terminated by Space or Enter)\fR
Enter the character with hexadecimal value 20AC 
(which is the Euro character in UTF-8 encoding).
.TP
^V#U20ac \fI(terminated by Space or Enter)\fR
Enter the Euro character (which has the hexadecimal 
Unicode value 20AC) encoded in the currently selected 
text encoding.
.TP
^V#+20ac < Space > +20ac < Enter >
Enter two Euro characters in 
successive multiple character entry mode (ISO 14755).
.PP
.PP
.SS 	Input method (Keyboard mapping) selection
.TP
ESC k \fIor\fR Ctrl-Alt-F12 \fIor\fR middle-click on Input Method flag
Toggle between current and previously selected input method
(or initially the configured standby input method).
\fINote:\fR Alt-k or Ctrl-Alt-F12 also works on prompt line.
.TP
HOP ESC k
Clear input method, i.e. resets keyboard mapping to none (unmapped input).
.TP
ESC I \fIor\fR ESC K \fIor\fR Ctrl-F12 \fIor\fR right click on Input Method flag (mapping indication in flags area)
Open the Input Method selection menu.
\fINote:\fR (Alt-I or Alt-K or Ctrl-F12 also works on prompt line)
.TP
HOP ESC K
Cycle through available keyboard mappings / input methods.
.PP
.SS Modifying text
.TP
\fINote on the Home and End keys\fR
Sometimes people expect the "Home" and "End" keys to move the 
cursor to the beginning or end of line, respectively.
In the keyboard usage approach of mined, these functions can 
easily and quite intuitively be invoked with "HOP left" and 
"HOP right", i.e. by pressing the keypad keys "5 4" or "5 6" 
in sequence.
So there is enough room left for mapping the most frequent 
paste-buffer functions to the keypad as described above which 
is considered much more useful.
Use Ctrl-Home and Ctrl-End for the line positioning 
functions, depending on terminal support and configuration; or 
use the -k option if preferred to 
switch keypad key function assignments for the Home and End keys.
See Keypad layout above for a 
motivating overview of the mined keypad assignment features 
and options.
.PP
.TP
Backarrow \fIor\fR ^H
\fIDual-mode function:\fR
.br
\fIIf a visual selection is active:\fR
Cut selected area to paste buffer.
.br
\fIOtherwise:\fR
Delete character left.
.br
\fISmart backspacing:\fR If there is only blank 
space before the current position in the current line 
and the line above and auto-indentation is enabled, 
the auto-undent function (Back-Tab) is performed 
instead, deleting multiple spaces back to the previous 
level of indentation.
\fINote:\fR Mined tries to map this function to 
the Backarrow key on the keyboard whether it is 
assigned to the Backspace or DEL control characters, 
by inspecting the setting of the terminal interface, 
see Automatic backspace 
mode adaptation.
\fINote:\fR\(->NEW\(-> 
Configuration option plain_BS 
(command line option +Bp) 
switches the Backarrow key from smart backspacing to 
plain backspacing, i.e. no auto-undent and only delete 
one combining character of a combined character.
Use Shift-Control-Backarrow to perform smart backspacing then.
.TP
Ctrl-Backarrow \fI(if key properly configured) or\fR F5 Backarrow
"Delete single": Delete only right-most combining accent 
of combined character left of cursor position.
If not next to a combined character: delete character left, 
avoiding auto-undent function.
.TP
\(->NEW\(-> Shift-Ctrl-Backarrow \fI(if key properly configured) or\fR Shift-F5 Backarrow
"Delete smart": Smart backspacing function as described above 
as default behaviour of the Backarrow key.
.TP
Del \fI(on keypad)\fR
\fIDual-mode function:\fR
.br
\fIIf a visual selection is active:\fR
Cut selected area to paste buffer.
.br
\fIOtherwise:\fR
Delete next character right, including any combining characters.
.TP
Ctrl-Del \fI(on keypads, if key properly configured)\fR
Delete character right, excluding any combining characters.
.TP
Shift-Del \fI(on small keypad, if key properly configured)\fR
Cut selected area to paste buffer.
.TP
DEL \fI(ASCII character)\fR
\fIIf detected to be attached to the keyboard Backarrow key:\fR
Delete left. (Or delete visual selection, see above.)
(Enforce with option -B.)
.br
\fIOtherwise:\fR
Delete right.
.TP
HOP Backarrow
Delete beginning of line (left of current position).
.TP
^B
Delete character right (next character).
.TP
^T
Delete next word.
.TP
^^ \fI(overridden when used as accent prefix, e.g. with newer xterm)\fR
Delete previous word.
.TP
^K
Delete tail of line (from current position to line-end); 
if at end of line, delete line end (joining lines).
.TP
HOP ^K
Delete whole line.
.PP
.SS 	Code conversion
.TP
ESC X
Insert hexadecimal representation of current character code.
(In UTF-8 mode, this is the UTF-8 byte sequence 
of the character in hexadecimal notation.)
.TP
\fI... with HOP:\fR
Insert character with hexadecimal code 
scanned from text at current position.
.TP
ESC U
Insert (hexadecimal) Unicode value of current character
(with either 4/6/8 hexadecimal digits, depending on the 
value); in CJK or mapped 8 bit encoding mode, the 
value is transformed from the current text encoding 
into Unicode.
.TP
\fI... with HOP or\fR Ctrl-Shift-F11
Insert character with hexadecimal Unicode value 
scanned from text at current position; in CJK or 
mapped 8 bit encoding mode, the value is transformed 
from Unicode into the current text encoding.
.TP
ESC A
Like ESC U but inserting an octal Unicode value.
.TP
\fI... with HOP:\fR
Like HOP ESC U but scanning an octal Unicode value.
.TP
ESC D
Like ESC U but inserting a decimal Unicode value.
.TP
\fI... with HOP:\fR
Like HOP ESC U but scanning a decimal Unicode value.
.TP
Alt-x
Toggle the preceding character and its hexadecimal Unicode value.
The command detects a 2 to 6 hex digit character code with 
a valid Unicode value, or a non-digit Unicode character, 
respectively.
.PP
.SS 	Case conversion
.TP
ESC C \fIor\fR F11
Exchange case (low/capital) of character under cursor.
Case mapping is based on Unicode (but applicable in 
all text encodings).
Special handling is applied for:
.RS
.IP \(bu
Greek final s
.IP \(bu
Turkish "i" if the effective locale value 
(environment variables 
LANGUAGE, 
TEXTLANG, LC_ALL, 
LC_CTYPE, LANG) 
begins with "tr" or "az" 
\(->NEW\(-> 
or "crh" or "tt" or "ba"
.IP \(bu
case mappings to multiple characters
.IP \(bu
Lithuanian special conditions (locale value begins with "lt")
.IP \(bu
Dutch "IJsselmeer" title casing with Shift-F3 
(if the locale value begins with "nl")
.IP \(bu
Japanese characters are toggled between Hiragana and Katakana.
.RE
.TP
\fI... with HOP or\fR Shift-F11
Apply case conversion to word from cursor.
.TP
Shift-F3
Cycle casing of a word between all small, title case, 
and all capitals (title case means the first letter is either 
capital or actually a Unicode title case, the following letters 
are small). For Japanese script, it toggles the word between 
Hiragana and Katakana.
.PP
.SS 	Mnemonic and special conversion
.TP
ESC _ \fIor\fR Ctrl-F11
Mnemonic character substitution replaces the two characters 
at the cursor position with a suitable composite 
character (e.g. accented character) if possible.
With Ctrl-F11, transformations are the same as with 
the ^V two-letter character input mnemonics.
With ESC _, language-dependent preferences may take 
precedence (see variations below) 
according to the current locale environment.
.br
Example: ae \(-> Т
.SS 	Special conversion features
.RS
.IP \(bu
If the text at the cursor position contains an HTML 
character tag (starting with "&" and optionally 
ending with ";"), it is replaced with the actual 
character it represents.
.br
Example: &not; \(-> г
.IP \(bu
If the text at the cursor position contains an 
HTML numeric character entity (starting with "&#" 
and optionally ending with ";"), it is replaced with 
the respective character it denotes.
.br
Example: &#x40; \(-> @
.br
&#64; \(-> @
.IP \(bu
If the text at the cursor position contains a URL 
numeric escape notation (starting with "%") it is 
replaced with the actual character it represents.
.br
Example: %40 \(-> @
.br
%C3%86 \(-> к \fI(while in UTF-8 text encoding)\fR
.IP \(bu
The command also transforms between Latin-1 and UTF-8 
encoded characters if an accordingly encoded character 
is found at the current position; the current 
character encoding mode is used to determine the 
target character set.
.br
Example: Т (Latin-1 encoding) \(-> Т (current UTF-8 encoding) or 
.br
Т (UTF-8 encoding) \(-> Т (current encoding)
.RE
.PP
\fIAs variations of ESC _, there are some commands ESC LETTER 
using national letters that occur on respective national keyboards.
They apply basically the same transformations but with 
some national preferences taking precedence:\fR
.TP
ESC С \fIor\fR ESC Ш \fIor\fR ESC Ч \fIor\fR ESC ▀
Similar to ESC _, but with German transformation preferences.
.br
example: ae \(-> С, oe \(-> Ш
.TP
ESC ж \fIor\fR ESC У \fIor\fR ESC Я \fIor\fR ESC щ \fIor\fR ESC у
Similar to ESC _, but with French transformation preferences.
.br
example: oe \(-> \*(11 (oe ligature U+0153)
.TP
ESC Т \fIor\fR ESC т \fIor\fR ESC Э
Similar to ESC _, but with Danish transformation preferences.
.br
example: ae \(-> Т, oe \(-> Э
.TP
\(->NEW\(-> ESC В \fIor\fR ESC Ы
Similar to ESC _, but with Italian accent preferences (У rather than ж).
.TP
\(->NEW\(-> ESC < accented letter typical on East European keyboard >
\fI(like l with stroke, u with ring, o with double acute, s with caron, etc)\fR
Similar to ESC _, but with East European accent preferences: 
ogonek rather than cedilla, -d becomes d with stroke
.TP
\(->NEW\(-> ESC < special key typical on South European keyboard >
\fI(like n with tilde, g with breve, dotless i)\fR
Like ESC _.
.PP
.SS 	Encoding conversion
.TP
HOP ESC ( \fIor\fR Alt-F11
Search for a character encoded in the "wrong encoding", 
i.e. a UTF-8 character in non-UTF-8 text mode, or a Latin-1 
character in UTF-8 text mode.
.TP
ESC _ \fIor\fR ESC Ш etc.
If invoked on a non-ASCII character, 
UTF-8 / non-UTF-8 character encoding conversion is applied:
If the character is not encoded in the current text encoding 
it is converted into the current text encoding (from UTF-8 or 
from Latin-1).
.TP
Alt-Shift-F11
Convert Latin-1 / UTF-8, then search for the next 
"wrong encoded" character.
.PP
.SS 	Paragraph formatting
.TP
ESC j
("Clever Justify") Format paragraph by word-wrapping 
according to the currently set right margin value;
left margins are derived from the contents of the 
paragraph and line. Heuristic detection of numbered 
items automatically triggers appropriate indentation.
.br
End-of-paragraph is a line without trailing blank space.
.TP
\fI... with HOP:\fR
Same, but end-of-paragraph is considered to be a blank line.
.TP
ESC J
("Normal Justify") Format paragraph by word-wrapping 
according to the currently set left and right margin values.
.br
End-of-paragraph is a line without trailing blank space.
.TP
\fI... with HOP:\fR
Same, but end-of-paragraph is a blank line.
.TP
ESC <
Set left margin for justification.
.TP
ESC ;
Set left margin of first line of paragraph only.
.TP
ESC :
Set left margin of next lines of paragraph only.
.TP
ESC >
Set right margin for justification.
.PP
.SS 	HTML support
.TP
ESC H \fI(every first time)\fR
Enter HTML tag (and remember for subsequent ESC H).
(Note that Alt-Shift-H will do the same thing if your terminal 
is configured appropriately - see the example configuration file 
Xdefaults.mined in the 
Mined runtime support library.)
The tag can be entered with attributes and values; these 
will not be repeated in the closing tag (see next entry 
on ESC H).
.TP
ESC H \fI(every second time)\fR
Enter closing HTML tag.
Any tag attributes and values entered with the tag (see previous 
entry on ESC H) will be left out.
.TP
HOP ESC H
Put text between mark and current position in HTML tags.
The "A" tag gets special treatment.
.PP
.SS Text block and buffer operations
.TP
\fINote on the Home and End keys\fR
Sometimes people expect the "Home" and "End" keys to move the 
cursor to the beginning or end of line, respectively.
In the keyboard usage approach of mined, these functions can 
easily and quite intuitively be invoked with "HOP left" and 
"HOP right", i.e. by pressing the keypad keys "5 4" or "5 6" 
in sequence.
So there is enough room left for mapping the most frequent 
paste-buffer functions to the keypad as described above which 
is considered much more useful.
Use Ctrl-Home and Ctrl-End for the line positioning 
functions, depending on terminal support and configuration; or 
use the -k option if preferred to 
switch keypad key function assignments for the Home and End keys.
See Keypad layout above for a 
motivating overview of the mined keypad assignment features 
and options.
.PP
.PP
.TP
^@ (Ctrl-Space)
.br
\fIor\fR Home (on right keypad) \fIor\fR Shift-Home
.br
\fIor\fR ^] \fIor\fR ESC @ \fIor\fR ESC ^
.br
\fIor\fR Stop (sun)\fIor\fR Select (VT100)
Set mark (to remember the current location).
.TP
\fI... with HOP:\fR
Goto mark \fIor\fR:
\fI(if on already marked position)\fR Toggle rectangular selection.
.TP
^Y
.br
\fIor\fR End (on right keypad) \fIor\fR Shift-End
.br
\fIor\fR Copy (sun) \fIor\fR Do (VT100)
Copy selected text (between mark and current position) 
to paste buffer.
If rectangular copy/paste mode is selected: Copy rectangular area 
spanned by mark and current position to paste buffer.
.TP
\fI... with HOP:\fR
Append to buffer.
.TP
^U
.br
\fIor\fR Del (with visual selection) \fIor\fR Shift-Del (small keypad)
.br
\fIor\fR Cut (sun) \fIor\fR Remove (VT100)
Cut selected text (between mark and current position) 
to paste buffer.
If rectangular copy/paste mode is selected: Cut rectangular area 
spanned by mark and current position to paste buffer.
.TP
\fI... with HOP:\fR
Append to buffer.
.TP
^P \fIor\fR Ins \fIor\fR Ctrl-Ins
.br
\fIor\fR Paste (sun) \fIor\fR InsertHere (VT100)
Paste contents of paste buffer to current position.
If rectangular copy/paste mode is selected: Paste contents of paste buffer 
as rectangular area to current position and corresponding positions 
of subsequent lines.
With ^P or Ctrl-Ins, the cursor is placed before the pasted region.
With Ins, the cursor is placed behind the pasted region 
unless the option -V was used.
.br
In rxvt, with Ins on the left keypad, the cursor is placed 
before (left of) the pasted region.
.TP
\fI... with HOP:\fR (e.g. HOP Ins or ^G^P)
Paste from inter-window buffer.
Thus you can quickly copy text from one invocation 
of mined to another.
.TP
Shift-Ins \fI(Windows/cygwin version)\fR
Insert text from Windows clipboard, adapting lineend types.
With Ctrl-Shift-Ins, the cursor is also placed before the pasted region.
.TP
Alt-Ins \fIor\fR Ctrl-F4
Replace text just pasted with preceding paste buffer.
This command uses a ring of paste buffers (like emacs "yank ring").
.TP
ESC b \fIor\fR Shift-F4
Copy contents of paste buffer into a file.
.TP
\fI... with HOP:\fR
Append to file.
.TP
ESC i \fIor\fR F4
Insert file at current position.
.TP
Print \fIfrom File menu\fR
Print text being edited (to default printer).
.TP
HOP ESC ! \fIor \fB(deprecated)\fR\fR ESC c
Invoke operating system command (prompted for) with paste buffer as input.
.PP
.SS Search
.TP
\fINote on case-insensitive searching\fR
Mined applies case-insensitive search pattern matching where 
the search pattern contains small characters, unless when 
searching for an identifier (current identifier occurence, HOP 
F8, or identifier definition, Alt-t). For a case-sensitive 
search for a small letter, use a single-letter range 
expression like [x] or a backslash escape 
like \\x (note, however, that \\n and 
\\r have special meaning).
.PP
.PP
.TP
ESC / \fIor\fR Find \fIor\fR F7 \fIor\fR F8 \fIor\fR / \fI(on keypad)\fR
Search forward (prompt for regular expression).
.TP
\fI... with HOP:\fR
Search for current identifier.
.TP
ESC \\ \fIor\fR Alt-F7 \fIor\fR Alt-F8 \fIor\fR Alt-/ \fI(on keypad)\fR
Search backward (prompt for regular expression).
.TP
HOP F8 \fIor\fR Shift-F9
Search for current identifier.
.TP
HOP Alt-F8 \fIor\fR Alt-Shift-F9
Search for current identifier backward.
.TP
HOP Shift-F8 \fIor\fR ESC t \fIor\fR Alt-t
Search for definition of current identifier (using tags file), 
or open file referred to.
See ESC t below for further description.
.TP
HOP Ctrl-Shift-F8
Search for identifier definition (prompts for identifier).
.TP
HOP Ctrl-F8 \fIor\fR Ctrl-Shift-F9
Search for current character.
.TP
^N \fIor\fR F9
Search for next occurence (using previous 
search expression and direction).
.TP
\fI... with HOP:\fR
Repeat last but one search; two alternating 
search expressions can be used with this command.
.TP
Alt-F9
Search again (for last expression) but in the opposite 
direction.
.TP
ESC , \fIor\fR Shift-F8
(Global) Substitute (prompt for search and replacement strings).
.TP
ESC r \fIor\fR Ctrl-F8
(Global) Replace with confirmation prompting (first prompt 
for strings).
.TP
ESC R \fIor\fR Ctrl-Shift-F8
(Line Replace) Substitute on current line (prompt for strings).
.TP
ESC ( \fIor\fR ESC ) \fIor\fR ESC { \fIor\fR ESC }
Perform one of the following matching searches, depending on text:
Search for corresponding bracket matching the bracket 
at current position in one of the pairs (), [], {}, <>, Ф╗.
(Nested matching bracket pairs are skipped.)
In an HTML or XML file, search for matching tag (nesting considered).
Search for matching /* */ comment delimiter.
Search for matching #if #else/#elif #endif structures 
(nesting considered).
On an #else or #elif directive, the search direction depends 
on the command character, i.e. ESC ( searches backward, ESC ) 
searches forward.
In a mailbox file, on any mail header line, search for 
next or previous mail message, depending on the command character, 
i.e. ESC ( searches backward, ESC ) searches forward.
In a mailbox file or saved mail message, on a MIME separator, 
search for next or previous MIME separator, depending on the 
command character, i.e. ESC ( searches backward, ESC ) searches forward.
.TP
ESC t \fIor\fR Alt-t \fIor\fR HOP Shift-F8
Search for and move to the location of the definition of 
identifier at the current cursor position. This command 
uses the tags file that can be generated with the 
ctags command (Unix).
It opens another file if necessary and automatically saves 
the current file then.
.br
On an include statement (line beginning with "include" 
or "#include"), the command opens the included file.
.br
Like with a number of positioning commands, ESC t places 
the current position on the position marker stack before going 
to the location of the identifier definition. The command ESC 
Enter (Alt-Enter) can move back to that position, even if 
edited files were changed with the command.
.TP
HOP ESC t \fIor\fR HOP Ctrl-Shift-F8
Similar, but prompts for identifier.
.TP
HOP ESC ( \fIor\fR Alt-F11
Search for a character encoded in the "wrong encoding", 
i.e. a UTF-8 character in Latin-1 mode, or a Latin-1 character 
in UTF-8 mode.
.SS 	Search expressions: Special functions
.TP
.
matches any character
.TP
^
(at begin of pattern) restricts match to the begin of a line
.TP
$
(at end of pattern) restricts match to the end of a line
.TP
[< character set >]
matches any one of a set of characters;
the set may be given by listing elements,
denoting a range < c1 >...< c2 >,
or negating the whole set [^< character set >]
.TP
\\< character >
matches the character literally (except n or r)
.TP
< pattern >*
(a star appended to a plain character of any of the 
patterns above)
matches a repetition of this pattern (zero or more times);
not applicable to line end patterns
.TP
^V^J \fI(a literal linefeed character, entered with ^V prefix)\fR
searches for any real newline
(to be used embedded in the search pattern, does not match on last line)
.TP
\\n
searches for a Unix newline (LF)
(to be used embedded in the search pattern, does not match on last line)
.TP
\\r
searches for DOS/Windows newline (CRLF)
(to be used embedded in the search pattern, does not match on last line)
.TP
\\R
searches for Mac newline (CR)
(to be used embedded in the search pattern, does not match on last line)
.TP
\\0
searches for NUL character, represented as a pseudo line end
.TP
^V^M
searches for CR (carriage return) character 
embedded in a line
.PP
.SS 	Replacement strings: Special functions
.TP
&
is replaced by the matched pattern to be replaced
.TP
^V^J \fIor\fR \\n
(a linefeed character) embeds a newline 
(LF character) in the replacement string
.TP
\\r
(a carriage return character) embeds a CR 
character in the replacement string
.PP
To change the line end type of a line or all lines, use 
"Lineend type..." from the Options menu.
.PP
.SS File operations
.TP
ESC w \fIor\fR F2
Save (write back) current text to file (only if modified).
Save file information (editing position etc), 
create file info file if needed.
.TP
\fI... with HOP:\fR
Save current file position and other editing information 
in file info file, so that subsequent editing sessions will 
start at the current position and remember formatting parameters.
.TP
ESC W \fIor\fR Shift-F2
Save (write back) current text to file (unconditionally).
Also enable memory for file positions in current directory 
(creates file info file).
.TP
Alt-F2
Save As; save current text to file with different name;
file permissions (access modes) are preserved and cloned.
.TP
Ctrl-Shift-F2 \fIor\fR HOP Shift-F2
Save to file, and enable memory for file positions in 
current directory (creates file info file).
.TP
F3
Edit another file (prompt for save if current text changed).
.TP
Ctrl-F3 \fIor\fR ESC v
View another file (prompt for save if current text changed).
.TP
ESC V
Toggle between edit mode and view only mode.
.TP
ESC q
Quit the editor (prompt for save if current text changed).
.TP
ESC ESC \fIor\fR Ctrl-F2
Exit editing current text (save first if changed), continue 
with the next file (from the File switcher list);
exit mined if there is no subsequent file to edit.
\fINote:\fR If a file name occurs on the command line multiple 
times (explicitly or by wildcard expansion), file list navigation 
is not linear.
\fINote:\fR There is a small delay after typing ESC ESC.
(This is in order to enable recognition of Alt-function key 
combinations which are implemented by some terminals or 
terminal modes by prefixing ESC to the function key escape 
sequence.) This delay can be avoided by using Ctrl-F2.
.TP
ESC +
Edit the next file (from the File switcher list)
\fINote:\fR If a file name occurs on the command line multiple 
times (explicitly or by wildcard expansion), file list navigation 
is not linear.
.TP
\fI... with HOP:\fR
Edit the last file.
.TP
ESC -
Edit the previous file (from the File switcher list)
.TP
\fI... with HOP:\fR
Edit the first file.
.TP
ESC #
Ask for index into the list of files and edit that file.
.TP
^G N # \fIor\fR ESC g N #
Edit Nth file.
(^G N f also works.)
.TP
ESC # #
Reload file currently being edited.
.PP
.SS Menu
.TP
ESC Space \fIor\fR Alt-Space \fIor\fR Shift-F10
Open Popup menu.
.TP
ESC F10 \fIor\fR Alt-F10 \fIor\fR Ctrl-F10
Open first flag menu (Info menu).
.TP
ESC f \fIor\fR Alt-f \fIor\fR F10
Open File menu.
.TP
ESC < letter > \fIor\fR Alt-< letter >
Open menu.
.TP
ESC I \fIor\fR Alt-I \fIor\fR ESC K \fIor\fR Alt-K \fIor\fR Ctrl-F12
Open the Input Method selection menu.
\fI(Alt-I/Alt-K/Ctrl-F12 also works on prompt line)\fR
.TP
ESC Q \fIor\fR Alt-Q
Open the Smart Quotes selection menu.
.TP
ESC E \fIor\fR Alt-E
Open the Encoding selection menu.
.PP
.SS Miscellaneous
.TP
ESC = < count >
Repeat a command < count > times (prompts for count).
\fIExample:\fR ESC=7< cursor down > moves the cursor 
7 lines down.
\fINote:\fR If the function to be repeated is a character 
to be inserted and the input is keyboard mapped to a 
multi-character sequence, only the first character of the 
sequence is inserted repeatedly.
.TP
ESC < count >
Repeat a command < count > times (prompts for rest of count);
this short form is only accepted, however, if the repeat count 
consists of at least two digits (this is to avoid confusion with 
function key escape sequences of certain terminals).
\fIExample:\fR ESC77. enters a line of 77 dots, 
ESC07x enters "xxxxxxx".
.TP
^V < function key >
Invoke function as if pressed together with the control key.
E.g. ^V < cursor-left > moves left into the parts of a 
combined character just like Ctrl-cursor-left would do 
(the latter may depend on proper terminal setup).
.TP
^\\
Abort current command, e.g. while on prompt line.
.TP
ESC ?
Show the current status of the file (name, whether modified, 
current line, number of lines, characters, and bytes).
.TP
\fI... with HOP:\fR
Toggle permanent display of text status line.
Note that when editing a file that does not fit completely in 
memory (e.g. large file on old system), this option may cause 
considerable swapping. In that case, do not use the feature.
.TP
ESC u
Display the character code of the current character 
in the bottom status line.
(In UTF-8 encoded text mode, both the UTF-8 byte 
sequence and the Unicode value are displayed; in CJK 
or mapped 8 bit encoded text mode, Han or 8 bit 
character values and corresponding Unicode values are 
displayed when applicable.)
In non-Latin-1 encoded text mode, additional Unicode 
information is included, indicating the script, 
character category, width, combining, and surrogate 
properties of the character.
.TP
\fI... with HOP:\fR
Toggle permanent character code display.
.TP
ESC T
Toggle Tab width.
Alternates the width interpretation of Tab characters 
between 2-4-8.
.TP
\fI... with HOP:\fR
Toggle Tab expansion (input substitution with spaces).
.TP
ESC P
Set page length (number of lines that mined assumes to 
be on a page). (Useful for status display.)
.TP
ESC a
Toggle append mode (append to text buffer/file instead of 
overwriting).
.TP
ESC d
Show current directory / change to another one 
(also change drive in MSDOS version).
.br
The assumed (relative) file path name 
as well as file permissions (access modes) are preserved.
.TP
ESC n \fIor\fR Set Name... \fIfrom File menu\fR
Change the file name associated with the text being edited;
the file is not actually saved yet but only the new 
file name is used for saving the next time.
The text is detached from the file previously loaded 
which is not affected.
.br
All current text editing properties (assumed 
encoding, smart quotes style, margins, ...) 
as well as file permissions (access modes) are preserved.
.TP
ESC .
Redraw the screen.
.TP
Alt-F12
\fI(In terminals that support an alternate screen view:)\fR
.br
Switch to normal screen (to view command line history and possibly 
mouse-copy/paste) until next input.
.TP
ESC l
Make screen lower (decrease number of screen lines).
.TP
ESC L
Make screen higher (increase number of screen lines).
.TP
ESC %
Make screen smaller (decrease screen size).
.TP
ESC &
Make screen bigger (increase screen size).
.TP
Shift-keypad-Minus
Make font smaller. (Works in mintty and natively in xterm.)
.TP
Shift-keypad-Plus
Make font bigger. (Works in mintty and natively in xterm.)
.TP
ESC z
Suspend editor process; first write back file if modified
(no write if HOPped or given empty file name on prompting).
Mined detects (by checking process and group IDs and terminals) 
whether it is safe to suspend and rejects it otherwise (e.g. if it 
is run embedded within a terminal, without underlying shell, 
or from a shell script).
.TP
ESC !
Fork off a shell and wait for it to finish.
.TP
\fI... with HOP:\fR
Invoke operating system command (prompted for) with paste buffer as input.
.TP
F1 \fIor\fR Help \fIor\fR Alt-h \fIor\fR ESC h
Interactive help function.
Selection of help topics is offered and prompted; 
after entering the initial letter, the respective 
help section is shown.
.br
If another (modified) F1 key, a modified digit key, 
or a Ctrl-modified punctuation key is entered, 
a corresponding key assignment help bar is displayed 
(see F1 F1 etc. below).
.br
The help file mined.hlp is 
installed with the
Mined runtime support library. If 
this is not installed in one of the standard locations, 
the environment variable MINEDDIR should be set to 
point to the directory so mined can find its help file.
.TP
F1 F1 \fIor\fR Shift-F1 \fIor\fR Ctrl-F1 \fIor\fR Alt-F1 \fIor\fR Ctrl-Shift-F1 \fIor\fR Alt-Shift-F1
Display a help bar (in the bottom status line) with short 
indications of the functions assigned to the function keys 
F2... in the corresponding modified mode (i.e. with Control, 
Shift, and Alt as requested for the help bar).
.TP
\fI... with HOP:\fR
Toggle permanent help bar display.
.TP
F1 Ctrl-1 \fIor\fR F1 Alt-1 \fIor\fR F1 Alt-Ctrl-1
Display a help bar (in the bottom status line) with short 
indications of the accent prefix functions assigned to the 
digit keys 1..9, 0 in the corresponding modified mode 
(i.e. with Control and Alt as requested for the help bar).
.TP
\fI... with HOP:\fR
Toggle permanent help bar display.
.TP
F1 Ctrl-< punctuation key > \fIe.g.\fR F1 Ctrl-,
Display a help bar (in the bottom status line) with short 
indications of the accent prefix functions assigned to the 
Ctrl-modified punctuation keys.
.TP
\fI... with HOP:\fR
Toggle permanent help bar display.
.TP
ESC
While a command is active and prompting (e.g. for a search 
expression), ESC aborts the current command.
.TP
ESC Space
Do nothing, so the Space key aborts the ESC command.
.PP
.SS MSDOS keyboard functions
.TP
Ctrl-Alt-Space
Set mark (to remember the current location).
.TP
Alt-TAB \fI(not in Windows)\fR
HOP / Go to.
.TP
Ctrl-* \fI(on keypad)\fR
HOP / Go to.
.TP
Ctrl-/ \fI(on keypad)\fR
Search forward.
.TP
Alt-/ \fI(on keypad)\fR
Search backward.
.PP
.PP
.TP
\fIScreen size change functions\fR
MSDOS screen size changes depend on a table of common 
VGA video modes (dosvideo.t).
.br
In the presence of a TSR driver which can change fonts and 
screen modes while running a program (e.g. the 
excellent VGAMAX), the actual change effective may 
occasionally be unexpected. Mined recognises such changes 
after the next character input and adjusts to them.
.PP
.PP
.TP
Alt-- \fI(on keypad)\fR
Change video lines mode to the mode with the next smaller 
number of lines but same number of columns.
\fI(The number of lines is first tried to be decreased 
within the current video mode. If it is already 
the lowest, the next video mode is chosen.)\fR
.TP
Alt-+ \fI(on keypad)\fR
Change video lines mode to the mode with the next higher 
number of lines but same number of columns.
.TP
Ctrl-- \fI(on keypad)\fR
Change video mode to the mode with the next smaller 
total resolution (lines * columns).
.TP
Ctrl-+ \fI(on keypad)\fR
Change video mode to the mode with the next higher 
total resolution.
.PP
.TP
HOP Ctrl-/Alt- +/- \fI(on keypad)\fR
Several other video mode settings are prompted for 
(experimental).
.PP
<!p>
.SS Emacs mode
Mined emulates emacs keyboard layout and some specific functions if 
invoked with the option -e or with the 
command name alias minmacs.
.br
In emacs mode, emacs command key assignments to control keys, 
ESC (Meta commands) and ^X (C-X commands) are configured.
In addition, the following emacs-compatible changes apply:
.RS
.IP \(bu
The mined ESC commands can be reached via M-x.
(Function keys remain unaffected.)
.IP \(bu
The Del key (on the small keypad) is configured to 
delete the previous character.
.IP \(bu
The control key insertion prefix is ^Q.
.IP \(bu
The quit character (e.g. for the prompt line) is ^G.
.IP \(bu
The emacs multiple buffer ring is fully enabled.
.IP \(bu
Paragraph justification mode is set to consider an empty line 
as paragraph separation by default.
.IP \(bu
Mined ESC commands can be reached via M-x (Alt-X).
.IP \(bu
^\\ (Ctrl-\\) is interpreted as an additional HOP key.
.IP \(bu
Keyboard mapping (input method) can be toggled with Ctrl-Alt-F12
.RE
.PP
Command overview:
.TP
^A, ^B, ^E, ^F, ^N, ^P, ^V, M-v, M-b, M-f, M-a, M-e, M-< , M->, ^X[, ^X]
cursor and screen movement
.TP
^D
delete character
.TP
^O
insert new line
.TP
^Q
insert literal character
.PP
.TP
^@
mark position
.TP
^W / M-w
cut / copy to buffer
.TP
^K
delete to end of line / delete line end, and append to buffer
.TP
M-d / M-k
delete word / delete end of sentence, and append to buffer
.TP
^Y
paste buffer
.TP
M-y
paste previous buffer, replacing text just pasted
.PP
.TP
M-u
transform word upper-case
.TP
M-l
transform word lower-case
.TP
M-c
transform word capitalised (initial upper-case)
.PP
.TP
^S, ^R
search forward / reverse
.TP
M-%
replace with confirmation
.TP
M-.
search for identifier definition (using tags file)
.PP
.TP
^X^S, ^Xs
save file
.TP
^X^W
save file as (using different name)
.TP
^X^F
edit other file (prompts for name)
.TP
^X^B
edit previous file (among those listed on command line)
.TP
^X^C
quit editor, prompt for saving text first
.TP
^Xk
discard current edit buffer (after confirmation), open new one
.TP
^Xi
insert file
.PP
.TP
^X=
display file statistics
.TP
^L
refresh display
.TP
^U, ^X^[
repeat (not as generic numeric command parameter)
.TP
^H
help
.TP
^Z, M-z, ^X^Z
suspend editor
.PP
.TP
^\\ \fI(mined add-on)\fR
HOP (generic function amplifier / expander)
.TP
M-x \fI(Deprecated mined add-on)\fR
invoke mined ESC command
.TP
ESC ESC \fI(mined add-on)\fR
invoke mined ESC command
.PP
.PP
<!p>
.SS Windows keyboard mode
Mined emulates typical Windows control key functions if 
invoked with the option +ew; 
this is enabled automatically when invoking mined via the 
wined.bat script or from the Windows explorer 
context menu of a text file.
.br
The usual Escape commands and function key assignments of mined 
also apply in Windows keyboard mode. Also, ^@ and ^_ are included 
to provide the respective functionality.
.TP
^@
mark position
.TP
^C
copy selected text area (between marked and current position)
.TP
^F
search
.TP
^G
goto
.TP
^H
replace (with confirm)
.TP
^O
open other file
.TP
^P
print
.TP
^Q
quit
.TP
^S
save file
.TP
^V
paste
.TP
^W
close file
.TP
^X
cut selected text area (between mark and current position)
.TP
^_
insert control character
.PP
.PP
<!p>
.SS WordStar mode
Mined emulates WordStar keyboard layout and some specific functions if 
invoked with the option -W or with the 
command name alias mstar.
.br
The usual Escape commands and function key assignments of mined 
also apply in WordStar mode.
.br
In prefixed two-key commands, the control state and case of the second 
key does not matter, e.g. ^K^B, ^KB and ^Kb are identical.
.TP
^S, ^D, ^E, ^X, ^A, ^F, ^R, ^C, ^W, ^Z, ^H
cursor and screen movement
.TP
^G
delete character
.TP
^T
delete word
.TP
^Y
delete line
.TP
^Q^Y
delete to end of line
.TP
^N
insert new line
.TP
^P
insert control character
.TP
^Q^W, ^Q^Z
scroll multiple screen lines
.PP
.TP
^Q^F
find
.TP
^Q^A
find and replace (with HOP: with confirm)
.TP
^L
repeat last search
.PP
.TP
^Q
HOP key
.TP
^Q, ^K, ^O
two-key command prefixes
.TP
^Q^Q
repeat following command
.PP
.TP
^B
paragraph justification (word wrap)
.TP
^OL
set left margins
.TP
^OG
set left margin for first line of paragraph
.TP
^OR
set right margin
.PP
.TP
^KB
set marker
.TP
^QB
goto marker
.TP
^Kn
(n=0..9) set marker n
.TP
^Qn
(n=0..9) goto marker n
.PP
.TP
^KK
copy between here and marker (not exactly WS function)
.TP
^KC
copy (paste) saved text here (not exactly WS function)
.TP
^KY
delete between here and marker (not exactly WS function)
.TP
^KV
copy (paste) saved text here (not exactly WS function)
.TP
^KW
write paste buffer to file
.TP
^KR
read (insert) file here
.PP
.TP
^KS
write (save) edited text to file
.TP
^KD
write (save) edited text to file, edit next file
.TP
^KX
exit (and save)
.TP
^KQ
quit (don't save)
.TP
^KL
change current directory
.PP
.PP
.PP
.br
.PP
.SH Configuration of user preferences
User preferences can be configured in a runtime configuration file 
$HOME/.minedrc. (On Windows systems, 
if the environment variable %HOME% is not set, 
%USERPROFILE%\\.minedrc will be used.)
It is possible to configure conditional preferences based on 
file type (filename pattern) or terminal type.
.br
A documented sample file is included in the Mined runtime 
support library as conf_user/minedrc 
or in the web documentation.
.br
\fIVolatile preferences when editing multiple files\fR:
.br
Note that options relating to editing features (such as tabwidth) 
will be re-established on each file opened,
while options relating to interactive behaviour or display features 
(such as file_chooser sorting options) will remain changed after they 
are toggled interactively (e.g. from the Options menu),
so the preference selected here is volatile for them.
.PP
.SH Environment interworking and configuration hints
A number of configuration options have already been addressed 
throughout the manual page. A few more configuration features 
are mentioned here. For more details, examples, and other 
display settings see the example script 
conf_user/profile.mined in the Mined runtime 
support library.
.SS Mined runtime support library
The mined distribution provides a collection of runtime support 
files (in subdirectory usrshare); if 
mined is installed into standard locations, they are copied to 
one of the directories /usr/share/mined, 
/usr/share/lib/mined, 
/usr/local/share/mined, 
/opt/mined/share, 
$HOME/opt/mined/share (depending on 
operating system and installation options).
.PP
Mined runtime support includes:
.RS
.IP \(bu
Package documentation
.TP
package_doc/*
mined package overview, introduction, change log, license
.IP \(bu
Web documentation
.TP
doc_user/*
copy of the web documentation
including the HTML version of the mined manual page
.IP \(bu
Interactive help
.TP
help/mined.hlp
help file (for F1 commands)
.IP \(bu
Configuration example files
.TP
conf_user/minedrc
user preferences configuration sample file; to be copied
to $HOME/.minedrc (on Windows systems, 
if the environment variable %HOME% is not used, 
copy the sample file to %USERPROFILE%\\.minedrc)
.TP
conf_user/profile.mined
shell commands to set environment variables for mined, 
template for inclusion in $HOME/.profile
.TP
conf_user/Xdefaults.mined
xterm configuration entries suitable for mined, template 
for inclusion in $HOME/.Xdefaults 
or $HOME/.Xresources
.TP
conf_user/xinitrc.mined
shell commands to activate Xdefaults.mined, 
template for inclusion in $HOME/.profile
.TP
conf_user/kp5
shell script to assign the X key symbol Menu 
to the middle keypad key ("5") as a remedy to the 
inability of the KDE konsole terminal to recognise that 
key (due to a deficieny in the QT framework),
thus enabling the HOP key in konsole
.TP
conf_user/mlterm/main
mlterm configuration to enable Alt-key detection,
for inclusion in $HOME/.mlterm/main
.TP
conf_user/mlterm/key
mlterm configuration for modified (shifted etc) function keys,
for inclusion in $HOME/.mlterm/key
.TP
conf_user/konsole/xterm-modified.keytab
KDE konsole keyboard configuration providing 
a terminal (called "xterm with key modifiers" in the 
konsole menu) with modified (shifted etc) function keys
.TP
conf_user/terminator/options
option to be added for the Terminator Java terminal 
to enable Alt-letter functions
.TP
conf_user/MINED-VMS.COM
commands to define mined commands and set up help for DCL on VMS
.IP \(bu
Scripts to be used at runtime
.TP
bin/uprint
script for printing a Unicode file, using either 
paps or uniprint for formatting; 
under Windows, it can also use notepad /p 
for printing
.IP \(bu
Scripts to start mined
.TP
bin/uterm
script to invoke xterm in UTF-8 mode; it should also 
be installed into the system binary path and has its 
own manual page
.TP
bin/mterm
script to invoke mlterm with suitable options
(for bidi support)
.TP
bin/umined
script to start mined in a separate xterm window, 
using UTF-8 mode with most recent version of Unicode 
width data (specifying wide and combining characters) 
as built-in to xterm
.TP
bin/xmined
script to start mined in a separate xterm window, 
using same encoding mode as currently set
.TP
bin/wined
(on Windows) cygwin script to start mined in a window 
(using the mintty terminal, applying Windows look-and-feel)
.TP
bin/wined.bat
(on Windows) command script to start a mined window 
in Windows keyboard emulation mode
.IP \(bu
Files to setup a mined installation
.TP
setup_install/mined.desktop
KDE desktop entry to start mined in an xterm 
from a menu entry, using the uterm script
.TP
setup_install/mined.ico
Cygwin/X desktop icon for adding mined to the 
Cygwin-X Editors section in the Windows Start menu
.IP \(bu
Scripts to configure an environment for mined
.TP
setup_install/bin/configure-xterm
sample configuration script to build xterm
with recommended configuration options
.TP
setup_install/bin/makeprint
script to search for or retrieve and build the 
uniprint program from the yudit package
.TP
setup_install/bin/installfonts
script for downloading the Unicode-enhanced X screen 
fonts and installing them with your X server
.TP
setup_install/bin/bdf18to20
script to transform an 18x18 pixel double-width screen font 
into a corresponding 20x20 pixel font matching the 
10x20 single-width font (which is much nicer than the 9x18)
.TP
setup_install/cyg/*
optional postinstallation (not in use) for cygwin 
to install mined with the Windows desktop and the Cygwin/X menu
.TP
setup_install/win/*
installation of the Windows stand-alone version
.RE
.PP
.SS PC versions
For Windows with a cygwin system 
(http://cygwin.com/), 
mined is available as a cygwin package.
.br
Two other versions are available for DOS/Windows systems:
.RS
.IP \(bu
Stand-alone Windows version, compiled with cygwin. It runs 
in a Windows console, Windows terminal (e.g. mintty), or X terminal.
It is packaged together with mintty.
Its installation registers its invocation (in mintty) from the 
Windows context menu for text files.
.IP \(bu
DOS version, compiled with djgpp. It runs on plain DOS (with 
some special support of FreeDOS codepage configuration) or in a 
Windows console window (DOS command window) but not in a 
typical terminal application like mintty or xterm.
It supports long file names in Windows 98/2000/XP/... (not NT4.0).
.RE
See the mined web site 
http://towo.net/mined/ 
for download.
.PP
For hints on PC-specific terminal configuration issues, 
see PC terminals below.
.PP
.SS VMS version
Mined runs on OpenVMS, with a number of specific adaptations 
especially in file handling.
.RS
.IP \(bu
Options containing capital letters need to be quoted, e.g.
MINED "-Qa" [-]*.com.
Mined options can also be passed in the symbol MINED$OPT.
.IP \(bu
Filename wildcard expansion is applied, accepting both Unix-like 
and VMS-native subdirectory notations.
.IP \(bu
File versions can optionally be specified and are handled 
properly; for example, an explicit version opened for editing 
can be saved and will be the most recent version as expected.
.br
\fINote:\fR To combine wildcards with version specifications, 
use VMS-native pathname notation 
(and do not use a final ";" without version specification), e.g.:
[]x*;*
to edit all versions of all files x*
[.cmd]x*;1
to edit version 1 of all files cmd/x*
.PP
.IP \(bu
The file chooser accepts Unix-like or VMS-style directory 
notations for navigation.
Switching to the current directory (TAB or Enter) which is the 
first entry of the file chooser list, displayed in VMS style, 
turns the file list into VMS-style listing of all file versions.
.br
Logical names can be used for direct navigation if a final 
":" is included (like SYS$LOGIN:).
.IP \(bu
Note that opening the file chooser may be slow on 
large directories.
.IP \(bu
If the terminal window is resized while mined is running, mined 
will notice and adjust after an explicit refresh (ESC .). The 
system, however, is not notified of the changed window size in 
this case. Please resize (again) when back on the command line.
.IP \(bu
The capability to accept terminal copy-paste is limited by the 
VMS 80 character input buffer (not limited on emulated VMS, e.g. 
on "Personal Alpha"). For some remote terminals (mintty, rxvt), 
full Unicode data version detection is disabled to reduce 
start-up delay.
.IP \(bu
The file info memory files are called .$mined instead of .@mined,
recovery files are called $name$ instead of #name#.
.IP \(bu
In the VAX version, CJK character encodings, Han character 
information, and Unicode character information tables are not 
included by default. Alpha and IA64 versions include all 
Unicode and character encoding features.
.IP \(bu
For hints related to the DECterm window, see below.
.RE
See the template script MINED-VMS.COM in the 
conf_user subdirectory of the 
Mined runtime support library or the file 
README.vms 
(MINED.README in the VMS binary package) 
for installation hints.
.PP
.SS Android version
There are a number of deviations from typical Linux systems;
mined provides workarounds where necessary.
Mined runs on Android with these Apps installed:
.RS
.IP \(bu
C4droid (needed as container for gcc)
.IP \(bu
GCC for C4droid (to compile mined)
.IP \(bu
Better Terminal (recommended, for shell and terminal)
.IP \(bu
UniversalAndroot (to access gcc from terminal shell) for Android < 4
.RE
.PP
.SS Terminal environment
\fIFor terminal-specific hints, see 
Terminal interworking problems below\fR
.PP
On Unix, the terminal type is determined from the environment 
variable TERM. The termcap/terminfo mechanism 
is used to derive the actual properties of the terminal; for 
some terminals (cygwin, xterm, rxvt, vt*), this information is 
also built-in as a fallback in case terminal information is 
not available on a system (this is especially useful for the 
cygwin stand-alone version).
.PP
Recognition of some special terminal features or restrictions 
is associated with the setting of TERM 
(xterm, linux, vt100, sun*, cygwin, rxvt, *ansi*, 9780*, hp*, 
xterm-hp, superbee*, sb*, microb*, scoansi*, xterm-sco, cons*, 
att605-pc, ti_ansi, mgterm).
Non-trivial screen features (like scroll reverse, add/delete line, 
erase multiple characters) are used if their support is indicated 
in the termcap/terminfo description of the terminal unless other 
information is available (e.g. after terminal version detection, 
an older xterm is supposed not to support erase characters).
Since colour support is often not configured within terminfo but 
modern terminals do support it, mined always tries to apply 
colour attributes (if the terminal at least supports ANSI 
control sequences). A number of other "best practice" approaches 
are taken to optimize the usage of terminal capabilities, esp. 
covering different methods of graphics display support (for 
menu borders).
.PP
For detection of function keys and cursor keys, 
the escape sequences being used by terminals are often 
not known to an operating system environment because they 
are poorly and incompletely configured. Because this does 
usually not work as expected (see this
bug report just for an example), mined does not rely on 
the termcap/terminfo configuration of function key codes alone 
(which it considers however since mined 2000.14); 
rather it always accepts a wide variety of typical codes.
A few ambiguous codes are resolved according to the 
TERM variable.
.PP
In an xterm, window headline and icon text are set to the 
current filename and "(*)" is added if the text has been 
modified.
.SS 	Locale configuration
The locale mechanism as implemented on modern systems has a 
number of design problems, one being that there is 
no explicit distinction between text encoding and terminal 
encoding although this is obviously a very different thing and 
mixed combinations of both may occur and are actually supported 
by mined.
.br
For this reason, mined extends the locale environment variable 
mechanism with the variable TEXTLANG which is 
only considered for assumed text encoding (with precedence 
over the standard locale variables), and also considers 
LANGUAGE with precedence.
.br
If one of these additional locale variables 
(LANGUAGE or TEXTLANG) is used, 
mined also implicitly enables smart quotes.
.br
Also mined provides command line parameters to explicit override 
either text or terminal encoding (UTF-8 terminal encoding, however, 
is always auto-detected if the terminal provides the information).
.RS
.IP \(bu
For \fItext encoding\fR, mined checks the variables 
LANGUAGE, 
TEXTLANG, LC_ALL, 
LC_CTYPE, LANG in this order.
.IP \(bu
For \fIterminal encoding\fR, mined checks the variables 
LC_ALL, LC_CTYPE, LANG in this order.
.IP \(bu
Explicit command line parameters are available to specify 
either terminal encoding (+E) 
or text encoding (-E). They override 
environment variable settings.
.IP \(bu
UTF-8 terminal auto-detection overrides other terminal 
encoding settings.
.IP \(bu
Text encoding auto-detection overrides environment 
settings but not command line settings.
.IP \(bu
Assumed text encoding can be switched while editing.
.RE
.PP
For encoding recognition from locale environment variables, 
mined recognises locale specifications typically found in 
system installations, including those which do not include an 
explicit encoding suffix. Known character encoding suffixes 
("codeset" component of locale name, starting with ".") are 
recognised regardless of whether the given locale is installed 
or not. Other encodings are recognised by region suffix 
(starting with "_") or full locale name or alias.
.br
In addition to hard-coded locale recognition (especially for CJK), 
locale values and associated encodings are configured in the 
compile-time configuration file locales.cfg 
which especially lists locale names that do not have an 
explicit encoding suffix.
You can use these settings (known locale name or generic 
locale name suffix) even on legacy systems without locale 
support to indicate the terminal environment properly to mined.
For encoding recognition from command-line parameters, 
mined provides the following options:
.RS
.IP \(bu
-EX \fIor\fR +EX
with a single-letter encoding tag as listed with the description 
of the 
-E options;
further encoding tags are configured in the compile-time 
configuration file charmaps.cfg.
.IP \(bu
-E=charmap \fIor\fR +E=charmap
with a character encoding name (as reported by the 
locale charmap command).
.IP \(bu
-E.suffix \fIor\fR +E.suffix
with a character encoding suffix ("codeset" of locale name).
.IP \(bu
-E:flag \fIor\fR +E:flag
with a 2-letter indication used by mined to indicate the 
respective text encoding in the Encoding flag.
.IP \(bu
\(->NEW\(-> 
-E- or -E
disables text encoding auto-detection which is then 
derived from the locale environment.
.RE
.TP
In these options, -E specifies 
text encoding while +E would specify 
terminal encoding to be assumed.
.PP
.PP
The following table lists encodings and major codepages 
that are recognised by a generic locale suffix or country code;
in addition (as mentioned above), a large number of locale names 
without encoding suffix as found on various systems is known to mined 
and will cause it to assume the corresponding terminal encoding.
.TP
\fIUnicode:\fR UTF-8
\fIsuffixes:\fR .UTF-8 / .utf8
.TP
\fITraditional Chinese (Hongkong):\fR Big5 with HKSCS (includes CP950)
\fIsuffixes:\fR .BIG5* / .Big5* / .big5* / _HK / _TW (_TW ambiguous, following encoding overrides)
.TP
\fISimplified Chinese:\fR GB18030 (includes CP936, GBK and GB2312)
\fIsuffixes:\fR .GB* / .gb* / .EUC-CN / .euccn / _CN.EUC / _CN
.TP
\fITraditional Chinese (Taiwan):\fR CNS (EUC-TW)
\fIsuffixes:\fR .EUC-TW / .euctw / .eucTW / _TW.EUC
.TP
\fIJapanese:\fR EUC-JP
\fIsuffixes:\fR .EUC-JP / .eucjp / .eucJP / .ujis / _JP.EUC / _JP / .euc (.euc ambiguous, more specific string overrides)
.TP
\fIJapanese:\fR Shift_JIS / CP932
\fIsuffixes:\fR .Shift_JIS / .shiftjis / .sjis / .SJIS
.TP
\fIKorean Unified Hangul:\fR UHC / CP949 (includes EUC-KR)
\fIsuffixes:\fR .UHC / .EUC-KR / .euckr / .eucKR / _KR.EUC / _KR
.TP
\fIKorean:\fR Johab
\fIsuffixes:\fR .JOHAB
.TP
\fIVietnamese:\fR VISCII
\fIsuffixes:\fR .viscii
.TP
\fIVietnamese:\fR TCVN
\fIsuffixes:\fR .tcvn
.TP
\fIThai:\fR TIS-620
\fIsuffixes:\fR .tis* / .TIS* / _TH / .iso8859[-]11 / .ISO8859[-]11
.TP
\fILatin-9:\fR ISO 8859-15
\fIsuffixes:\fR @euro / .iso8859[-]15 / .ISO8859[-]15
.TP
\fICyrillic:\fR ISO 8859-5
\fIsuffixes:\fR @cyrillic (unless preceded by uz_UZ which indicates UTF-8)
.TP
\fILatin or other:\fR ISO 8859 encodings
\fIsuffixes:\fR .iso8859[-]N / .ISO8859[-]N (with number N)
.TP
\fIRussian Cyrillic:\fR KOI8-R
\fIsuffixes:\fR .koi8r
.TP
\fIUkrainian Cyrillic:\fR KOI8-U
\fIsuffixes:\fR .koi8u
.TP
\fITadjikistan Cyrillic:\fR KOI8-T
\fIsuffixes:\fR .koi8t
.TP
\fIRussian, Ukrainian, Byelorussian Cyrillic:\fR KOI8-RU
\fIsuffixes:\fR .koi
.TP
\fIMacRoman:\fR 
\fIsuffixes:\fR .roman
.TP
\fIWindows Latin:\fR CP1252
\fIsuffixes:\fR .cp1252
.TP
\fIWindows Cyrillic:\fR CP1251
\fIsuffixes:\fR .cp1251
.TP
\fIPC Latin:\fR CP850
\fIsuffixes:\fR .cp850
.TP
\fIWindows Hebrew:\fR CP1255
\fIsuffixes:\fR .cp1255
.TP
\fIGeorgian:\fR Georgian-PS
\fIsuffixes:\fR .georgianps
.TP
\fIArmenian:\fR ARMSCII
\fIsuffixes:\fR .ARMSCII-8
.TP
\fIKazachstan Cyrillic:\fR PT154
\fIsuffixes:\fR .pt154
.PP
.PP
\fIExamples:\fR To indicate that mined is running in a 
UTF-8 terminal (normally auto-detected, included here for 
demonstration) and should assume GB18030 text encoding by 
default, invoke either of:
.TP
LC_ALL=whatever.UTF-8 TEXTLANG=zh_CN.gbk mined
.TP
LC_CTYPE=whatever.UTF-8 LANGUAGE=chinese mined
.TP
LANG=whatever.UTF-8 mined -EG
.TP
LC_ALL=en_IN mined -E.gbk
.TP
mined +EU -E.EUC-CN
.TP
mined +EU -E=GB18030
.TP
mined +EU -E:GB
.PP
.PP
\fISelecting UTF-16 text mode:\fR To tell mined to 
interpret a file (or make a new file) in UTF-16 encoding, use 
the following command line options (first two little endian, 
then big endian):
.TP
mined -E:61
.TP
mined -E=UTF-16LE
.TP
mined -E:16
.TP
mined -E=UTF-16BE
.TP
mined -E=UTF-16
.PP
.PP
\fISelecting ASCII terminal mode:\fR To tell mined to 
assume that a terminal cannot display anything but ASCII 
characters, use the command line option 
+E:AS.
Mined implicitly assumes this setting if the environment 
variable TERM indicates a VT52 terminal.
.SS 	PC terminals
Character encoding of PC terminals is an even greater mess 
than on Unix systems. Mined provides heuristic best-guess 
assumptions about terminal encoding, supporting both local 
invocation as well as remote login from a PC (e.g. to a Unix 
machine).
.PP
The following assumptions are made based on environment variables 
or command-line parameters:
.TP
encoding ("codepage")
.br
environment
.br
option
.br
examples
.TP
CP850 (PC mapping of Latin-1 character set)
.br
TERM=ansi, ansi-nt, pcansi*, hpansi*, interix*
\fIor\fR TERM=cygwin 
and CYGWIN contains "codepage:oem"
\fIor\fR LC_*/LANG indicates ".CP850"
.br
+EP
.br
.IP \(bu
Windows console (DOS prompt) window
.IP \(bu
Windows console mode telnet (even if called from cygwin 
console, sets TERM=ansi)
.TP
CP437 (IBM PC VGA encoding)
.br
TERM=nansi*, ansi.*, opennt*, *-emx*
\fIor\fR LC_*/LANG indicates ".CP437"
.br
+Ep
.br
.IP \(bu
plain DOS
.TP
CP1252 (Windows ANSI extension of Latin-1)
.br
TERM=cygwin 
(unless LC_*/LANG or CYGWIN indicates other 
encoding)
.br
+EW
.br
.IP \(bu
cygwin 1.5 console or application
.IP \(bu
older Windows GUI telnet (sets TERM=ansi)
.TP
UTF-8
.br
LC_*/LANG indicates ".UTF-8" \fIor\fR 
(for cygwin 1.7 beta) TERM=cygwin 
and CYGWIN contains "codepage:utf8"
.br
+U
.br
.IP \(bu
cygwin 1.7 console or application configured for UTF-8 mode
.RS
.IP \(bu
Note: Windows console in UTF-8 mode provides extended Unicode 
font support if you select "Lucida Console" TrueType font from its 
Properties menu.
.RE
.TP
other codepages
.br
LC_*/LANG indicates codepage, e.g. ".CP1250" or ".CP858"
.br
\fIor triggered by DOS codepage information (djgpp version, see note)\fR
.br
+E=CP1250 or other codepage, or respective shortcut
.br
.IP \(bu
cygwin 1.7 console or application configured for 
respective codepage
.PP
.PP
\fINote:\fR
It is not unlikely that the assumption about the terminal 
encoding taken by mined does not match the actual terminal 
encoding (e.g. mined cannot determine the encoding based on 
the ambiguous setting TERM=ansi). Environment variables that 
indicate the character encoding are unfortunately not maintained 
through telnet or remote login.
.br
Explicitly setting TERM to a suitable value after remote login 
may help but may not always work (e.g. pcansi is not a 
known terminal on SunOS).
Explicitly setting locale variables, e.g. LC_CTYPE, 
may indicate the encoding to mined but may cause trouble otherwise; 
some systems like SunOS are dogmatic about interpreting locale 
variables and strictly ask corresponding locale data to be installed 
or they will flood you with bogus error messages.
Also not all encodings, esp. PC "codepages", are known as a 
"locale charmap" on other systems.
.br
In these cases, you can use the explicit +E 
option to force mined to assume a specific terminal encoding; 
see the option values listed above for the main DOS encodings.
.PP
\fINote:\fR
The encoding emulated by cygwin (as configured, or by default 
typically CP1252 for cygwin 1.5, UTF-8 for cygwin 1.7) is not the 
encoding natively applied by the Windows console window (by 
default typically the DOS codepage CP850).
This means that the effective encoding may be different if you 
invoke the cygwin-compiled mined version and the 
djgpp-compiled mined version alternatingly; you may notice this 
by a different range of characters that can be displayed when 
opening the same file with the two mined versions.
.br
Some Windows Latin characters are poorly displayed by the 
Windows console in default configuration; cygwin 1.7 can 
display all characters properly if the Windows console font is 
configured to "Lucida Console" rather than "Raster Fonts".
.br
In a cygwin console on a non-cygwin system (after remote login), 
mined assumes ASCII as the terminal encoding by default unless 
properly indicated by environment variables.
.PP
\fINote:\fR
The following DOS codepages are supported; they are mainly provided 
as terminal codepages, they do not appear in the Encoding menu. 
However, if you need, you can ask mined to use them as either 
the assumed terminal encoding (e.g. +E=CP1250 or +E:WE) or 
even text encoding (e.g. -E=CP1250 or -E:WE) using the names 
or shortcuts from the list:
.TP
\(->NEW\(-> VGA
.br
VG
.br
VGA (CP437 plus graphics in control character range)
.TP
CP437
.br
PC
.br
DOS US
.TP
CP720
.br
DA
.br
\(->NEW\(-> DOS Arabic
.TP
CP737
.br
37
.br
DOS Greek
.TP
CP775
.br
75
.br
DOS Baltic
.TP
CP850
.br
PL
.br
DOS Western European
.TP
CP852
.br
52
.br
DOS Central European
.TP
CP853
.br
53
.br
South European, Esperanto
.TP
CP855
.br
55
.br
DOS Cyrillic
.TP
CP857
.br
57
.br
DOS Turkish
.TP
CP858
.br
58
.br
DOS Western, CP850 with Euro symbol
.TP
CP860
.br
60
.br
DOS Portuguese
.TP
CP861
.br
61
.br
DOS Icelandic
.TP
CP862
.br
62
.br
DOS Hebrew
.TP
CP863
.br
63
.br
DOS French Canadian
.TP
CP864E
.br
64
.br
DOS Arabic (CP864E, variant of AR864 (superset of CP864))
.TP
CP865
.br
65
.br
DOS Nordic
.TP
CP866
.br
66
.br
DOS Russian
.TP
CP869
.br
69
.br
DOS Modern Greek
.TP
CP874
.br
TI
.br
Windows Thai, superset of ISO-8859-11/TIS-620
.TP
CP1125
.br
25
.br
DOS Ukraine
.TP
CP1131
.br
31
.br
\(->NEW\(-> DOS Byelorussian/Ukrainian
.TP
CP1250
.br
WE
.br
Windows Central European
.TP
CP1251
.br
WC
.br
Windows Cyrillic
.TP
CP1252
.br
WL
.br
Windows Western European
.TP
CP1253
.br
WG
.br
Windows Greek
.TP
CP1254
.br
WT
.br
Windows Turkish
.TP
CP1255
.br
He
.br
Windows Hebrew
.TP
CP1256
.br
WA
.br
Windows Arabic
.TP
CP1257
.br
WB
.br
Windows Baltic
.TP
CP1258
.br
WV
.br
\(->NEW\(-> Windows Vietnamese
.PP
.PP
\fINote:\fR
For the djgpp version of mined, even the font chosen for the 
Windows console window may affect the effective display encoding.
Configure "Raster Fonts" (except of size "10 x 20"!), not 
"Lucida Console" in order to make sure the effective visual 
codepage is the same as the one selected with the respective 
DOS tools (e.g. chcp) and assumed by mined.
.PP
\fINote:\fR
Mined (djgpp) tries to determine the DOS/Windows codepage 
using the DOS API; this can only work if the codepage was 
properly configured with DOS means (e.g. with CP858 using 
CHCP 858 or MODE CON CP SELECT=858, 
maybe enabled by DEVICE=...\\DISPLAY.SYS CON=(EGA,858) 
on old DOS, or MODE CON CP PREP=((codepage list) ...\\ega.cpi)); 
if only the font is switched to a differently encoded one, 
there is no way to detect this - in this case you can still 
use environment setting or the +E 
option as described above to indicate the terminal encoding.
.PP
\fINote:\fR To enable mouse operation in a Windows console 
window, deactivate "QuickEdit mode" in the properties menu.
.PP
\fINote:\fR If the DOS screen size is changed by a TSR 
(e.g. VGAMAX using a hotkey), mined does not notice this 
immediately; in that case, mined adjusts its screen display 
only after the next key is typed.
.PP
\fINote:\fR
Running mined (djgpp) in a dosemu session (DOS emulator on Linux) 
works fine, even in an xterm-embedded session although not 
perfectly in that case: ^S and ^Q are interpreted for flow 
control (thus ^S will hold all output until ^Q is entered), 
and the mined option -Qa should be 
used to tune menu borders right.
.SS 	Terminal setup and configuration
The Mined runtime support library 
includes a number of configuration files providing settings that 
should be applied to various terminals for proper operation of 
several features as described throughout this manual:
.RS
.IP \(bu
Xdefaults.mined for major X Windows terminals: 
xterm, rxvt, some CJK xterm derivates (cxterm, kterm). The script
xinitrc.mined (and optionally kp5) 
can be used to establish the suggested settings.
.IP \(bu
konsole/xterm-modified.keytab for 
KDE konsole keyboard definitions
.IP \(bu
mlterm/key and mlterm/main 
for mlterm keyboard definitions
.IP \(bu
terminator/options for terminator keyboard definitions
.RE
.PP
In some terminals, the cursor may not be well visible or not 
visible at all if the cursor is on a character 
with reverse background (control character, occurs e.g. in xterm) 
or highlighted background (invalid character code, occurs e.g. 
in xterm and rxvt).
See the X resource parameters for "cursorColor" in the example 
configuration file Xdefaults.mined for remedy.
.PP
If mouse wheel movement moves more than expected, especially 
if it cannot move by single items in a menu, this is probably 
a configuration issue with your mouse driver.
You are probably running a Windows-based X server which is 
(often by default) configured to generate multiple mouse 
wheel events on each actual mouse wheel movement.
Often not even in the Control Panel mouse section, but only 
in a configuration menu of mouse-specific setup software 
(e.g. "Browser Mouse Settings"), configure the scroll unit to 1.
.SS 	Terminal interworking problems
With some terminals, problems are known due to missing terminal 
features or terminal bugs:
.PP
\fBany terminal: menu border display\fR
.IP \(bu
If the borders of mined menus appear as letters rather 
than graphic borders, the terminal can unexpectedly not handle 
VT100 graphics.
Use the option -Qa to switch to ASCII 
borders, or -fff to limit font assumptions.
.br
In a UTF-8 terminal, mined uses Unicode Box Drawing 
characters by default.
If they don't display they are missing in the font used by the 
terminal.
Use the option -Qv to switch to 
VT100 graphics or -Qa to switch to 
ASCII graphics. If borders are visible but without corners, use 
-Qs to switch to simple rectangular borders.
.PP
\fBany terminal: slow terminal feature auto-detection\fR
.IP \(bu
On a slow remote terminal connection, escape sequences from the 
terminal (sent for function keys or requested terminal responses) 
may get delayed and split up.
Mined tries to handle delayed parts of escape sequences graciously; 
however, this is limited as the explicit ESC key shall also be 
recognised.
.br
If messages like "Late screen mode response - ..." 
(after startup), "...awaiting slow terminal response" (esp. 
after startup), "...awaiting slow key code sequence" or 
"...absorbing delayed terminal..." occur, escape sequence detection 
may be adjusted by setting the environment variable
ESCDELAY to a value of 2000 or 3000.
(Delay during startup may apparently also be caused by 
on-demand font loading of rxvt or mlterm, however, mined applies 
special handling for this case.)
.IP \(bu
If proper terminal detection fails for delay reasons, mined 
may especially not be aware of the terminal encoding (and 
display line markers as blocks). In this case, 
exiting and restarting mined should resolve the issue.
.PP
\fBxterm\fR
.IP \(bu
To enable proper Alt-letter command input (for opening and 
navigating menus), set the xterm resource metaSendsEscape to true 
(or with older versions of xterm, set eightBitInput to false) 
in your X configuration (usually $HOME/.Xdefaults 
or $HOME/.Xresources) as suggested in 
the example file Xdefaults.mined in 
the Mined runtime support library.
.IP \(bu
Although it is a waste of keyboard resources to have two 
indistinguishable sets of keypad keys, most terminals provide 
no means of distinguish them towards the applications, at least 
not by default. Especially for a text editor, it is highly 
desirable to distinguish them in order to have a rich intuitive 
function key mapping at disposition which mined tries to achieve.
.br
One approach to improve mapping of useful key functions 
would be actual keyboard remapping (applicable on some terminals); 
this is a delicate approach, though, because it may create 
incompatibilities with other programs that rely strictly on 
installed terminfo information. Mined provides remapping 
recommendations for shifted keypad keys (with Shift, Control, 
Alt and combinations of them) in the configuration sample files 
Xdefaults.mined (for xterm), 
konsole/xterm-modified.keytab (for KDE konsole), 
mlterm/key (for mlterm), 
in the Mined runtime support library.
.br
Due to the compatibility limitations mentioned above, however, 
the two Ins keys remain indistinguishable, and the two Del keys 
are only distinguishable if the xterm configuration resource 
*VT100*deleteIsDEL is set. Also, keypad and function key 
modification with Alt is ensured with the xterm resource 
*VT100*metaSendsEscape. Both resources are set to true in the 
configuration sample file just mentioned.
.br
These two resources can also be set dynamically with xterm. 
Mined can be told to do so with the command line option 
+D.
(Unfortunately this handling cannot be enabled by default as 
it cannot be undone because the previous state cannot be 
detected.)
.IP \(bu
Mined determines the xterm version in order to apply 
certain workarounds conditionally.
.IP \(bu
If you run xterm in VT220 keyboard mode (using xterm option 
-kt vt220 or setting the configuration resource *keyboardType: 
vt220) you should make sure to also set the environment 
variable TERM=vt220 (e.g. using the xterm option -tn vt220 or 
setting the configuration resource *termName: vt220) so mined 
can properly set up the keypad functions.
.IP \(bu
If you run xterm with the resource modifyCursorKeys or 
modifyFunctionKeys set to value 1, mined will recognise the 
according keyboard sequences with the environment variable 
setting TERM=xterm-sco.
.PP
\fBxterm on cygwin\fR
.IP \(bu
On cygwin, as on other systems, the script uterm 
is recommended to invoke an xterm that is properly configured 
to run UTF-8, and also to use a best choice of fonts for optimal 
Unicode coverage. See README.cygwin for more detailed advice.
.PP
\fBxterm legacy CJK width mode\fR
.IP \(bu
Mined auto-detects and supports xterm legacy CJK width 
compatibility mode (xterm -cjk_width); character 
width and menu border layout are properly adjusted, stylish 
menu borders (-QQ) and fine-grained 
scroll bar display are disabled by default.
(Note: In this mode, combining characters could unexpectedly 
change the width of a character by being substituted with its 
wide precomposed form (e.g. 'a' combined with U+0300) - 
which an application can hardly handle; this bug was fixed in 
xterm 224 with a patch contributed by the mined author.)
.PP
\fBrxvt\fR
.IP \(bu
When starting mined in a fresh rxvt terminal, and maybe 
even after starting your X server, some display (font?) 
initialization may take extremely long. If this results in an 
error message, restart mined to ensure proper terminal 
properties auto-detection.
.IP \(bu
Rxvt does not distinguish between Shift-F1 and F11 / 
Shift-F2 and F12 / Ctrl-Shift-F1 and Ctrl-F11 / Ctrl-Shift-F2 
and Ctrl-F12, so that the F1 and F2 keys modified with Shift 
cannot be recognised in rxvt by default.
They can however be enabled with the keysym definitions in 
the file Xdefaults.mined in the
Mined runtime support library.
.IP \(bu
In rxvt, the two keypad Del keys (small keypad, numeric 
keypad) are automatically distinguished from each other and 
invoke the Delete character (small keypad) and Cut (numeric 
keypad) functions, respectively (Ctrl-/Shift-/Alt- 
alternatives are supported as described in this manual).
This works, however, only if mined can recognise rxvt; it is 
generally a bad idea to set TERM=xterm in rxvt, see also 
hint below.
.IP \(bu
Also in rxvt, the two keypad Ins keys (small keypad left, 
numeric keypad right) are distinguished. The left Ins key 
positions the cursor left of the pasted region, the right Ins 
key positions it right.
.IP \(bu
By setting rxvt in the mode that enables distinction between 
the two keypads, it can unfortunately not distinguish the 
right keypad modified with Ctrl- anymore, so Ctrl-Home/End/Del 
cannot work as desired.
.IP \(bu
Ctrl-modified punctuation keys can be enabled by 
following the configuration samples of the file 
Xdefaults.mined in the Mined 
runtime support library.
.br
Note: Ctrl-modified and shifted punctuation keys 
interfere with ISO 14755 input mode of rxvt; if the following 
key is entered twice, that mode is aborted and the modified 
punctuation key becomes effective as an accent prefix in mined.
.IP \(bu
To enable proper Alt-letter command input (for opening and 
navigating menus), set the rxvt resource meta8 to false in your 
X configuration (usually $HOME/.Xdefaults 
or $HOME/.Xresources) as suggested in 
the example file Xdefaults.mined in 
the Mined runtime support library.
.IP \(bu
Later rxvt-unicode provides a CJK terminal emulation.
CJK display is buggy for characters that rxvt thinks cannot be 
displayed, especially for GB18030 
(LC_CTYPE=zh_CN.gb18030 rxvt) but also 
e.g. for EUC-JP (LC_CTYPE=ja_JP.eucjp rxvt);
single bytes are then interpreted instead which amounts to an 
unpredictable screen width and cannot be correctly handled.
(This applies mainly to character codes that are not mapped to 
Unicode but also to many that are mapped.)
.br
Moreover, CJK width handling is inconsistent for many 
characters in rxvt CJK mode (rxvt claims to adhere to the 
locale mechanism in this respect but that's not the case here - 
character widths are inconsistent with the locale, too).
.br
\fIRemedy:\fR Don't use rxvt in CJK-encoded mode; mined 
CJK terminal support is tailored to native CJK terminals (such 
as cxterm, kterm, hanterm) where it works fine - if you use a 
UTF-8-capable terminal, use it in UTF-8 mode! Mined can edit 
CJK-encoded files well in a UTF-8-encoded terminal.
.IP \(bu
In rxvt, Unicode characters that are Not Assigned are 
always displayed as a single-width replacement character. This 
is not consistent with xterm behaviour which would display 
them as a double-width replacement if they are located within 
a double-width Unicode range (which sounds reasonable). This 
would cause display positioning inconsistencies. Mined has a 
workaround for some of these cases (assuming that rxvt runs 
the most recent Unicode width data version available; or 
actually the same as mined assumes - handling of multiple 
auto-detected terminal Unicode versions does not cover this 
special case).
.IP \(bu
If the X windows servers has duplicate fonts installed under 
a common name (e.g. if it comes with a 10x20 non-Unicode font and 
you install a 10x20 Unicode font in addition), rxvt seems to use 
the wrong (i.e., non-Unicode) version of the font and does not 
find special characters like the default marker used in the flags 
menus (this was observed since rxvt 7.5, rxvt 5.8 was finding the 
proper font). Use the mined option -F to 
adapt mined to limited font usage, or fix the X server installation.
Or use the script uterm to start rxvt-unicode. To 
start rxvt-unicode from an xterm, use uterm -rx.
.IP \(bu
Due to the scrollbar display workaround for hanterm (see 
above), the scrollbar position may be shown as blank space 
instead of coloured (only in rxvt CJK mode with Korean encoding 
and if you explicitly set TERM=xterm which you shouldn't 
anyway in rxvt).
In this case, coloured scrollbar foreground can be enabled 
with the environment variable MINEDSCROLLFG="44;36" or 
MINEDSCROLLFG="38;5;45".
.IP \(bu
As a workaround for an xterm bug on cygwin, mined applies 
terminal size re-adjustment. This may confuse rxvt (being 
resized to an unexpectedly large window) if it pretends to be xterm.
.br
\fIRemedy:\fR in rxvt, make sure that the environment 
variable TERM=rxvt (or rxvt-unicode); the according X resource 
(Rxvt.termName: rxvt) is also listed in the file 
Xdefaults.mined in the
Mined runtime support library.
.IP \(bu
Mined determines the rxvt version in order to use certain 
features conditionally.
.IP \(bu
CJK-mode rxvt: rxvt has some character width bugs when running 
in CJK encoding; e.g. when running rxvt in Big5 terminal encoding 
(locale zh_TW), U+FA18 is displayed with wrong screen width 
while in older version U+FFED was display with wrong screen width;
when running rxvt in Shift_JIS terminal encoding, a number of 
character width bugs occur. Mined does not implement workarounds 
for those; in general UTF-8 terminal encoding is advisable to be 
on the safe side.
.PP
\fBurxvt\fR
.IP \(bu
This is rxvt-unicode as packaged for cygwin. Invoke it with 
a proper locale environment variable set to enable UTF-8.
See also README.cygwin for more detailed hints.
.PP
\fBmlterm\fR
.IP \(bu
Bidirectional display handling of mlterm is based on the 
final display, not regarding any context (such as positioning 
control, that's why mined implements a workaround for menu 
display on mlterm). Since version 3.0.7, mlterm supports 
logical order mouse positioning over right-to-left lines.
.IP \(bu
For Shift selection, use the small keypad.
.IP \(bu
Recent mlterm before version 3.1.3 has a problem with 
colour control that may render text unreadable.
.IP \(bu
In recent mlterm versions, Control-function keys cannot 
be used in mined since they are captured as mlterm hotkeys.
Use a Control-V prefix as a workaround.
.IP \(bu
(Not essential anymore with recent mlterm versions) 
The Mined runtime support library 
includes a configuration file mlterm/key which 
defines enhanced escape sequences for function keys and 
other modified keys in order to enable the functionality 
described in this manual. (It also enables the keypad on systems 
lacking its configuration for mlterm.)
It is essential to use this configuration especially for the 
HOP key (keypad "5") which is oppressed by mlterm by default, 
and also for Control-punctuation accent prefix functions, and 
some others.
.IP \(bu
In old versions of mlterm, mouse wheel scroll navigation 
in menus did not work seamlessly due to incorrect escape sequences.
.IP \(bu
Do not use mlterm option -n ! It may produce display garbage 
on unknown and other characters.
.PP
\fBcxterm\fR
.IP \(bu
Proper configuration is needed to ensure cxterm uses a 
non-CJK font of appropriate size to avoid ragged display: parameter 
-fn "-misc-fixed-medium-r-normal--18-*-*-*-*-*-*-*" 
or X resource 
cxterm*font: -misc-fixed-medium-r-normal--18-*-*-*-*-*-*-*.
.IP \(bu
EUC-JP half-width characters (8EA1-8EDF) are not properly 
displayed by cxterm in EUC-JP mode (cxterm -JIS, not available 
in "classic" cxterm).
.IP \(bu
Due to the scrollbar display workaround for hanterm (see 
above), the scrollbar position may be shown as blank space 
instead of coloured (only in Korean encoding mode which is 
probably rarely used with cxterm anyway).
In this case, coloured scrollbar foreground can be enabled 
with the environment variable MINEDSCROLLFG="44;36" or 
MINEDSCROLLFG="38;5;45".
.IP \(bu
\fINote:\fR The configuration sample file 
Xefaults.mined in the 
Mined runtime support library includes a 
section to fix some missing keypad assignments, especially the 
HOP key (keypad "5") which is ignored by cxterm by default, 
and the Home and End keys of the numeric keypad.
.PP
\fBkterm\fR
.IP \(bu
Auto-detection of kterm as a CJK terminal works if the 
environment variable TERM indicates "kterm"; otherwise mined 
has to be told that it runs in a CJK terminal and which 
encoding to use:
.br
For kterm -km sjis, set LC_CTYPE=ja_JP.sjis (or invoke mined +ES).
.br
For kterm -km euc, set LC_CTYPE=ja_JP.eucjp (or invoke mined +EJ).
.IP \(bu
\fINote:\fRThe configuration sample file 
Xefaults.mined in the 
Mined runtime support library includes a 
section to fix some missing keypad assignments, especially the 
HOP key (keypad "5") which is ignored by kterm by default, and 
the Home and End keys of both keypads.
.IP \(bu
\fB\fINote:\fR\fR Mouse wheel scroll navigation in menus 
does not work seamlessly in kterm because kterm sends incorrect 
escape sequences on mouse wheel scrolling.
.IP \(bu
\fB\fINote:\fR\fR By default (i.e., without explicit -km 
option or corresponding *vt100.kanjiMode resource configured), 
kterm runs in ISO 2022 mode (yes, it does indeed) which is not 
supported by mined.
.PP
\fBhanterm\fR
.IP \(bu
CJK display is buggy at the line beginning or after a Tab, 
often only the second byte of the character code is displayed 
as an ASCII character instead of displaying the complete CJK 
character.
.IP \(bu
Character attributes in hanterm used to be all mapped to reverse, 
so there was a workaround to enable a visible position in the 
scrollbar which is displayed as blank space. The criteria for 
this workaround to apply are: CJK terminal (detected or 
configured), TERM=xterm, Korean encoding (UHC or Johab) 
configured with parameter or locale. Replaced to enable nicer 
colours in scrollbar. To reactivate workaround for older hanterm, 
set environment variable MINEDSCROLLFG="0".
.PP
\fBKDE konsole\fR
.IP \(bu
Due to the lack of decent Unicode font support in the default 
configuration of the KDE konsole terminal, menu appearance 
options -QQ and 
-Qr should not be used; rounded 
borders are disabled by default.
.IP \(bu
The Mined runtime support library 
includes a configuration file konsole/xterm-modified.keytab 
which defines enhanced escape sequences for function keys and 
other modified keys in order to enable the functionality 
described in this manual. Unfortunately, the qt framework 
used by konsole inhibits the use of some keys and many key 
combinations.
.IP \(bu
It is especially irritating that konsole disregards 
the middle keypad key ("5" in application mode) completely; 
so the mined HOP function has to be invoked by alternative means.
.br
As a remedy, the HOP function is also assigned to the 
"Menu" key (next to the "Windows" key on PC keyboards) by the 
configuration sample file konsole/xterm-modified.keytab;
follow the installation instruction in that file and select the 
keyboard type it defines ("xterm with key modifiers") in konsole, 
"Settings" - "Keyboard" menu.
.br
Another remedy is to reassign the middle keypad key to the 
X key symbol Menu (using xmodmap);
the script kp5 in the 
Mined runtime support library does this.
.PP
\fBgnome-terminal\fR
.IP \(bu
The gnome-terminal uses right mouse click for its own 
terminal menu. To open a mined menu, use Ctrl-right-mouse-click.
.IP \(bu
The gnome-terminal does not support modified keys (e.g. 
shifted keypad keys).
.IP \(bu
The gnome-terminal captures a number of Alt-letter key 
combinations for its own menu access (which can however also 
be controlled with the mouse).
To disable this unpleasant capturing, so e.g. mined can open 
its own menus with Alt-letter, configure gnome-terminal as follows:
.br
Open menu "Edit" - "Keyboard Shortcuts..." and 
check "Disable all menu access keys". Even then, however, F1 and 
Ctrl-F1 are suppressed by this quirky terminal.
.IP \(bu
Mined implicitly assumes its -f 
option (for limited font usage with respect to graphic 
characters) when detecting gnome-terminal.
.PP
\fBMac OS X Terminal and others\fR
.IP \(bu
The Mac OS X Terminal app does not support mouse escape sequences.
Preferably, use xterm or iTerm 2.
.IP \(bu
In iTerm 2, enable mouse reporting in the settings menu 
Preferences - Profile - Terminal.
.IP \(bu
If any Mac terminal (Terminal, xterm, iTerm 2) does not respond 
to the ESC key, it is likely to be captured by Speech Recognition.
Disable Speech Recognition or try Ctrl-ESC.
.PP
\fBLinux console\fR
.IP \(bu
Mined detects F11, F12, Shift-F1...Shift-F8 properly
(handling the shift of 2 applied by the Linux console to 
shifted function key codes compared with other terminals);
further modified function keys are apparently not supported in 
the Linux console.
.PP
\fBscreen\fR
.TP
Screen, like luit (see below), is a middle layer between the 
actual terminal and the user terminal environment.
.br
Running screen in a cygwin console produces initial garbage 
input in mined.
.br
[Applies to older screen before version 4: Unfortunately, 
screen does not pass character width handling of its host 
terminal transparently to the application but apparently it 
maintains cursor position information with reference to the 
system-installed locale data. Which, however, does not always 
reflect the terminal properties!
Yet mined detects the proper width properties of the host terminal 
(by using pass-through escape sequences of "screen") but 
only if the environment variable is set to "screen" (the default 
of "screen").]
.br
Worse, however, screen apparently transforms cursor positioning 
commands from the application into relative cursor positioning 
towards the host terminal, which results in grossly incorrect 
display positionining if e.g. screen runs in a UTF-8 terminal but 
assumes an 8 bit terminal. Also, it interprets certain UTF-8 
continuation bytes as control characters, so even using a workaround 
it is not possible to fix display for all cases.
Mined applies a workaround to fix text positioning and menu display 
problems with screen.
Another workaround fixes many cases of UTF-8 character display but 
cannot fix all (since screen captures the output of the 0x9C byte).
It is recommended to invoke screen only with properly configured 
locale environment variables to match the actual terminal encoding.
.PP
\fBmintty ("Cygwin Terminal")\fR
.TP
Mintty is a Windows-based (non-X) terminal running with cygwin.
Mined auto-detects mintty and adjusts certain properties and 
features accordingly.
.IP \(bu
Mintty supports all kinds of special keyboard features.
.IP \(bu
Mined detects font changes that change the CJK ambiguous 
character width properties of the terminal when notified by 
mintty if running in UTF-8 mode.
.IP \(bu
For good coverage of Unicode characters, recommended fonts 
for use with mintty are DejaVu Sans Mono, Lucida Console, 
Courier New, Andale Mono, Everson Mono, SimSun. Discouraged 
are Lucida Sans Typewriter, Letter Gothic, Courier, Monaco, 
and older MS CJK fonts, at least for their lack of (proper) 
graphic characters (for menu borders).
Mined uses the glyph detection feature of mintty (since 0.9.9) 
to configure a nice set of useful line markers and menu graphics.
.IP \(bu
If break interruption (Control-\\ key) does not work on 
international keyboards (if AltGr is involved), use the 
special Control-Break keyboard function instead.
.IP \(bu
Note: For right-to-left text editing, the bidi feature of 
mintty interferes with the scrollbar of mined; you may disable 
the scrollbar with -o to reduce visual 
confusion.
(Context-dependent scrollbar display is planned for a later version.)
.IP \(bu
Note: With the command scripts wined or 
wined.bat, mined is invoked in a separate Windows 
terminal session, using mintty if available.
.IP \(bu
Note: On some systems, mouse wheel scrolling does not work in mintty 
if the mintty scrollbar is enabled. It can be disabled in the mintty 
"Options..." menu, section "Window".
.IP \(bu
Note: Mined temporarily disables mintty shortcut keys for 
Windows functions (like Alt-function keys, Alt-space, Alt-Enter) 
in order to use them itself. To toggle mintty full-screen 
mode, open the mintty menu with Shift-right mouse button, item 
"Fullscreen".
.br
(With mintty versions before 0.5.1, for proper usage of 
Unix-like keyboards functions, the following settings are recommended:
In Options - Keys, disable the Shortcuts "Window commands" 
and "Copy and paste".
In Options - Text, disable "Show bold as bright".)
.PP
\fBCygwin console\fR
.IP \(bu
The cygwin console terminal emulation does not support 
Shift-F1, Shift-F2 (which cannot be distinguished from F11, F12), 
Shift-F11, Shift-F12; Control or Alt modified function keys are 
supported beginning cygwin 1.7.2.
.IP \(bu
Mined detects UTF-8 mode of cygwin 1.7 console (by LC_*/LANG setting 
or for cygwin 1.7 beta by CYGWIN containing "codepage:utf8").
.br
Note: After rlogin from this console, UTF-8 indication has 
to be ensured explicitly, e.g. by environment setting, or by 
mined option +U.
.IP \(bu
Note: Cygwin console in UTF-8 mode provides extended Unicode 
font support if you select "Lucida Console" or another 
TrueType font from its Properties menu.
.IP \(bu
If the Windows program chcp.com is used within 
cygwin, and the console window is set up to use "Raster Fonts", 
non-ASCII characters may be mangled.
.IP \(bu
Mouse coordinates are not properly reported with wheel scrolling 
in the cygwin console; for that reason, opening a menu with mouse 
scrolling does not work.
.IP \(bu
See also README.cygwin for more detailed hints on weird 
details about the Windows console in different modes.
.IP \(bu
See also PC terminals above.
.PP
\fBWindows console window (DOS command prompt)\fR
.IP \(bu
The Windows console window is normally configured to run 
in CP850 encoding or other legacy encodings (depending on 
localized Windows configuration), it may also turn out to be using CP437.
Non-displayable characters are replaced as usual.
The configured font may also affect the effective display 
character set.
.IP \(bu
\fIHowever,\fR if running a cygwin application (like 
the cygwin version of mined) from a Windows console, the 
cygwin emulated terminal encoding applies instead, e.g. UTF-8.
.IP \(bu
\fINote:\fR The (djgpp-compiled) DOS version of mined 
automatically adjusts to the selected console codepage (e.g. using 
the chcp command), it is advisable to set up the console windows 
to use "Raster Fonts" if this is used.
With the cygwin-compiled version, on the other hand, using a 
TrueType font is more stable with respect to character set problems.
.IP \(bu
With the djgpp-compiled version apparently there is a 
Ctrl-C problem on older Windows versions. Every first 
Ctrl-C will display ^C on the screen at the current position 
without mined noticing it, while every second Ctrl-C will 
be passed to mined. This problem does not occur on Windows XP.
It does occur on Windows ME in a Windows console window.
It does not occur with the cygwin-compiled version.
.IP \(bu
See also PC terminals above.
.PP
\fBWindows PowerShell\fR
.IP \(bu
Mined detects a Windows PowerShell window and adjusts to its limitations.
.PP
\fBPoderosa\fR
.IP \(bu
This Windows terminal emulator can be used for UTF-8 editing.
To ensure proper function, do not use Terminal Type "kterm" 
or Encoding "euc-jp" or "shift-jis"
.IP \(bu
Mined auto-detection and terminal initialization can cause 
Poderosa to display warning popups. To avoid them, Select 
Tools - Options... - Terminal; for "Behavior in case of 
unexpected chars", disable "Display a message box".
If you get a notice "Failed to decode characters by the 
current encoding utf-8.", click "Do not display this message 
from next time".
.IP \(bu
Poderosa does not provide mouse support for applications.
.PP
\fBTerminator\fR
.IP \(bu
In Edit - Preferences, enable "Use alt key as meta key".
.IP \(bu
Terminator does not provide mouse support for applications.
.PP
\fBPuTTY\fR
.IP \(bu
This Windows terminal emulation for remote login provides 
various keyboard (esp. keypad and function key) assignment 
emulations. In SCO mode, shifted function keys are different 
from those of xterm SCO function key emulation; both are 
supported.
.PP
\fBBetter Terminal and Terminal Emulator (Android)\fR
.IP \(bu
There are lots of deficiencies in screen control; 
mined adapts to Better Terminal.
.IP \(bu
There are lots of deficiencies in using a real keyboard.
.IP \(bu
To use a real keyboard, in the terminal settings, map 
Control to Left Alt key.
.PP
\fBluit\fR
.IP \(bu
The locale support add-on for text terminals luit which 
applies encoding transformations (e.g. with LC_ALL=zh_CN.gb18030) 
often maps characters incorrectly, including using the wrong 
cell width.
.PP
\fBDECterm\fR
.TP
On a VMS system, a DECterm window should be started with:
CREATE /TERMINAL /DETACH
.IP \(bu
Mined cannot disable flow control option (terminal using 
^S and ^Q characters) despite its handling of the TTSYNC and 
HOSTSYNC terminal driver options. To make them usable, DECterm 
needs to be configured manually: Options menu - Keyboard... - 
disable Ctrl-Q, Ctrl-S = Hold; then Options - Save Options.
.IP \(bu
On a remote DECterm, numeric keypad and function keys may not 
work properly without additional X configuration (xmodmap). Also the 
AltGr key does not work, making some characters unreachable on 
international keyboards.
.IP \(bu
For VT100 graphics characters (used for menu borders), the 
DECtech fonts (X fonts with -DEC-DECtech encoding) need to be 
installed on the X server. If the Cygwin/X server is used, the 
font-bitstream-dpi* packages should be installed to this aim.
.PP
\fBdtterm\fR
.IP \(bu
With the SCO default font, dtterm does not display non-ASCII 
characters and even worse, they corrupt further display.
Mined does not, however, set its screen encoding assumption 
to ASCII as dtterm behaves properly with all other fonts 
(e.g. 10x20, lucidasanstypewriter, courier).
.IP \(bu
Home/End, PgUp/PgDn, and HOP keys need to be used with Shift.
.PP
\fBSCO Caldera Linux (konsole and xterm)\fR
.IP \(bu
Window size change signals don't seem to be supported.
.PP
\fBHaiku Terminal\fR
.TP
For a number of deficiencies of the Haiku Terminal application, 
it is preferable to use xterm instead.
Most notable are display problems with the VT Gothic font;
use DejaVu Sans Mono instead.
.IP \(bu
No wide characters and combining characters.
.IP \(bu
No Alt-letter escape sequences.
.IP \(bu
No modified function and cursor keys.
.IP \(bu
Ignorance of middle keypad key.
.IP \(bu
Cursor visibility problems (cursor colour vs. reverse mode).
.IP \(bu
Wrong Control-space key (sends Control-C).
.IP \(bu
No mouse controls for wheel scrolling.
.IP \(bu
Unconforming mouse mode handling.
.SS 	Work-around support to enable 8-bit character set on weird terminals
There exist some exceptionally weird 7 bit terminals that 
have an alternative character set containing composed characters 
which can be displayed simultaneously with the default character 
set. For those there is optional output translation which 
embeds non-ASCII characters into the respective code switching 
sequences. To enable output character transformation, set the 
environment variable MINEDOUT to contain the upper half (with 
respect to an 8 bit character set) of the translation table 
into the terminal's alternate character set.
(Character set switching will be done as specified in the 
termcap (as/ae) or terminfo (smacs/rmacs) entry.)
An example setting of MINEDOUT is included in the environment 
sample file profile.mined in the 
Mined runtime support library 
for Siemens 9780x terminals.
.SS 	Concerning some especially stupid terminal drivers
There used to be terminal drivers which make use of the 
soft handshake mechanism by exchange of ^S and ^Q characters but 
yet pass them through to application programs which is quite stupid.
If it is necessary to ignore such hazardous ^S and ^Q keys, 
the environment variable NoCtrlSQ or NoControlSQ must be set. 
Mined will then not disable the tty channel soft handshake 
setting either.
.SS Keyboard mapping / Input method preselection
With the environment variable MINEDKEYMAP the active or 
standby mapping or both can be preselected. The value is a 
two-letter script tag to set the active mapping, or it is 
prepended with "-" to set the standby mapping, or a combination.
.br
\fIExample:\fR
export MINEDKEYMAP=-gr
will set Greek keyboard mapping standby.
export MINEDKEYMAP=py-rs
will set Pinyin input method active and Radical/Stroke 
input method standby.
.br
The respective tags attached to the keyboard mappings can be 
looked up in the Input Method flag menu; the HOP function 
toggles between display of the full input method name and its tag.
.SS Smart Quotes style configuration
Smart quotes style can also be preselected with the environment 
variable MINEDQUOTES 
(in addition to command line option -q=..., 
standard locale environment variables, or additional locale 
environment variables LANGUAGE or 
TEXTLANG which also implicitly set smart quotes mode).
.br
The value of MINEDQUOTES should contain 
the opening/closing quote pair (or just the opening quote 
mark, double or single quotes) and must be UTF-8 encoded. It 
can optionally append a space and an inner quotation mark (as 
used for nested quotations) for more specific selection. It 
can also indicate French spacing as shown in the example.
.br
\fIExamples (for values of -q parameter or MINEDQUOTES variable):\fR
╗
sets ╗DanishФ quotes style and corresponding single smart quotes.
╗╗
sets ╗Finnish╗ quotes style and corresponding single smart quotes.
Ф╗ '' (where '' denotes a 
left double quotation mark U+201C)
sets ФSpanish╗ quotes style with English style inner quotation marks.
Ф ╗
sets Ф French ╗ quotes style with embedded spacing.
.br
See Smart Quotes for more options.
.SS Han info configuration
With the environment variable MINEDHANINFO, the information 
shown for Han characters can be preselected.
If the variable is defined, Han info mode is enabled.
It may contain letters to select description, pronunciation 
information, and display mode to be used:
.TP
M
show Mandarin pronunciation
.TP
C
show Cantonese pronunciation
.TP
J
show Japanese pronunciation
.TP
S
show Sino-Japanese pronunciation
.TP
H
show Hangul pronunciation
.TP
K
show Korean pronunciation
.TP
V
show Vietnamese pronunciation
.TP
P
show Hanyu Pinlu pronunciation
.TP
Y
show Hanyu Pinyin pronunciation
.TP
X
show XHC Hanyu Pinyin pronunciation
.TP
T
show Tang pronunciation
.TP
D
show character description
.TP
F
display full information (in popup-menu form); 
without F, the information will be shown on the status line 
where it is subject to truncation
.PP
.SS Common paste buffer configuration
The paste buffers, used for cut/copy/paste operations, as well as 
the inter-window paste buffer, are located in a temporary 
directory, using system conventions by default.
To maintain the inter-window paste functionality even remotely, 
mined uses the environement variables MINEDTMP and MINEDUSER 
which, in combination, point to a user-defined temporary directory 
and file name pattern to be used for buffer files:
.RS
.IP \(bu
Set MINEDTMP to refer to a common mounted network directory 
on all machines which means that the value of $MINEDTMP may have 
to be different to reflect different mount points across the network.
(On VMS, use SYS$MINEDTMP).
.IP \(bu
Set MINEDUSER to the same name within the network even if 
using different user name accounts.
.RE
For details, see also the FILES section below.
.SS Keypad configuration
Some X configuration may have to be applied to enable keyboard 
input features as used by mined:
.RS
.IP \(bu
Alt key modifier for quicker entry of "ESC" commands.
.IP \(bu
Assignment of the HOP function to the middle keypad key ("5").
.IP \(bu
Assignment of the HOP function to other keys 
(especially for convenience on laptops which do not have the 
numeric keypad), e.g. the Pause or Scroll Lock key.
.IP \(bu
Distinguish "Home" and "End" keys of the two keypads 
in order to make use of this redundancy of typical keyboard layout 
(which is actually a waste of physical resources, causing 
unnecessary wrist strain because it increase the distance to 
be moved over for reaching to the mouse).
.IP \(bu
Enable control and shift modifiers for keypad and function keys.
.IP \(bu
Enable control and shift modifiers for digit keys (for use 
as accent prefix).
.IP \(bu
Enable control modifier for punctuation keys (for use 
as accent prefix).
.RE
See the example file Xdefaults.mined in the 
Mined runtime support library for suggestions.
.SS Printing configuration
Mined uses the script uprint from the 
Mined runtime support library 
to print the current contents of the text being edited 
in any selected encoding (unless the environment variable 
MINEDPRINT is set to direct mined to use a different print command).
.br
If the support library is not installed in one of its 
standard locations (system-dependent), it should be made 
available in the usual command search path.
.br
The script offers a choice of configured printers to select 
one (using either Windows registry 
or \(->NEW\(-> CUPS lpstat).
.br
The script uses either paps or 
uniprint for actual formatting (print preprocessing).
Under Windows (cygwin/stand-alone/djgpp versions), 
mined also considers printing with notepad /p.
.br
paps is available at 
https://github.com/dov/paps and uses the Pango layout 
engine for formatting.
uniprint is part of the yudit distribution; if 
you don't have it installed on your system, there is another 
script makeprint in the support library which can be 
used to download and build the needed uniprint program.
The mined print script (uprint) prefers 
paps if it is available as it has more capabilities 
for printing a wide range of Unicode characters, and it does 
right-to-left formatting.
.br
The font to be used with uprint can be configured with 
the environment variables FONT, FONTPATH, FONTSIZE.
It is recommended to put a sufficient font in the directories of 
$FONTPATH, e.g. DroidSansMono, 
LucidaTypewriterRegular, Bitstream Cyberbit.
.br
The preferred printer can be configured as usual with 
the environment variable PRINTER.
In addition, uprint checks an environment 
variable LPR for an alternative for the 
system printing command (lpr/lp) if that is needed.
.br
\fINote:\fR If printing with uprint fails for 
some reason, mined tries to print with either the print 
command configured in the environment variable 
LPR as a fallback, or with lp/lpr as a last 
resort. Working character encoding support cannot be expected 
in this case, however.
.br
See Environment variables to configure Printing 
for further details.
.SS Display layout
Some of the special indication characters (that substitute 
non-displayable contents) and some of the colours used by mined 
for special indications and interactive elements may be 
configured to the user's preference.
.br
\fINote:\fR For the configurable character indications, two 
environment variables exist each, to configure an 8 bit value 
(Latin-1 encoded) and to configure a Unicode value (UTF-8 encoded).
The UTF-8 encoded values (e.g. MINEDUTFRET) take precedence 
in a UTF-8 terminal. In an 8 bit terminal, or if the respective 
UTF-8 variable is not configured, the Latin-1 encoded value applies.
See the example script profile.mined 
in the Mined runtime support library for 
more details and for a number of suggestions of suitable values.
Mined does not apply any default non-Latin-1 indications in order 
to avoid display problems with fonts that do not support them.
Depending on your visual preference, there are a number of suitable 
Unicode characters for use as indications especially in the Unicode 
ranges of Arrows, Geometric Shapes and Symbols (U+2190-U+2BFF).
.br
\fINote:\fR For the Latin-1 encoded configured indication 
markers (variables MINEDRET etc, not MINEDUTFRET etc), if the 
configured character is in the small letters range (actually 
 '`'...DEL) the alternate character set is used for display. 
This works also in a UTF-8 terminal, provided that the 
corresponding UTF-8-encoded indication configuration variable 
is not set, e.g. MINEDRET=j MINEDUTFRET= (or not defined) 
would indicate line-ends by displaying a graphic lower right 
corner, MINEDTAB='`' MINEDUTFTAB= (or not defined) would indicate 
Tab characters with VT100 graphics lozenge rhombs.
.br
\fINote:\fR For the UTF-8-encoded configured indication 
markers (variables MINEDUTFRET etc), if the marker is a 
double-width character, a replacement will be displayed instead.
.br
\fINote:\fR Mined reduces its assumptions about available 
graphic and special characters for display purposes with the 
options -f or -F.
The -F option also suppresses the 
interpretation of the MINEDUTF* environment variables.
.SS 	Line ends
Line ends are usually marked by a "Ф" double left angle character.
This visual indication can be changed with the environment variable 
MINEDRET (8 bit terminals) or MINEDUTFRET (UTF-8 terminals).
The default or configured marker is used as an indicator at 
the end of every text line on screen (so you can see how many 
blank spaces there are).
.br
Multi-character markers: If a second character is configured, 
it is used to fill the rest of the screen line, a third 
configured character would terminate the indication at the end 
of the screen line. ("ииФ" is a nice setting for people who 
used to work at Siemens terminals.)
Pattern:
\fC
.DS
.br
		<span>MINEDRET=123	# line end displays as 122222223
.br
.DE
\fR
Suggestion for a nice line end on UTF-8 mode terminals 
(check if character is included in your font, however!):
\fC
.DS
.br
		<span>MINEDUTFRET=\*(15	# U+23CE
.br
.DE
\fR
.PP
The indication of DOS line ends (CRLF) and Mac line ends (CR) 
may be configured with the variables MINEDDOSRET or MINEDUTFDOSRET, 
and MINEDMACRET or MINEDUTFMACRET, respectively.
They are also distinguished by different colours.
.SS 	Paragraph ends
With the option -p, mined displays 
distinct indicators for line ends and paragraph ends.
A paragraph is defined to continue while lines end with white 
space (space or Tab character).
The default paragraph marker is "Х" and is also used to indicate 
a line ending with a Unicode Paragraph Separator. It can be 
changed with the environment variable MINEDPARA or MINEDUTFPARA.
.SS 	Tab characters
Tab characters are usually indicated by a sequence of 'и' 
(middle dot) characters.
This can be changed with the environment variable MINEDTAB 
(8 bit terminal) or MINEDUTFTAB (UTF-8 terminals).
.br
Multi-character markers: If two characters are configured, 
the second is used to mark the middle of the Tab span. If three 
characters are configured, the first and last are used to mark 
the beginning and end of the Tab span.
Pattern:
\fC
.DS
.br
		<span>MINEDTAB=123	# Tab displays as 12222223
.br
		<span>MINEDTAB=12	# Tab displays as 11112111
.br
.DE
\fR
.SS 	Long lines
Lines which are too long for the screen are usually indicated 
by a '╗' double right angle (guillemot) character. If the current 
position is behind the screen margin, the line is shifted out left 
which is indicated by a 'Ф' double left angle.
These markers can be changed with the environment variable 
MINEDSHIFT or MINEDUTFSHIFT. The first character is used to 
indicate a line continued to the left of the screen, the second 
character is used to indicate a line continued to the right of 
the screen.
.SS 	Unicode characters
For a description of special display indications in UTF-8 text 
editing mode see "Unicode display" above.
The indication and highlighting mode of a non-displayable Unicode 
character (typically a UTF-8 character in a Latin-1 terminal), 
as well as the highlighting mode (colour) of the indication of 
illegal UTF-8 sequences, can be configured with the variable 
MINEDUNI.
.SS 	Display mode of indicators
It is recommended to display these indicator characters in a dim 
display mode to prevent distraction from the text contents. The 
default is a red colour which is a moderate dark red in xterm.
The display mode can be used by placing the code part of an ANSI 
display control sequence in the environment variable MINEDDIM.
E.g., MINEDDIM=31 would select the default mode, red foreground;
in xterm only, MINEDDIM="38;5;83;38;5;245" gives a moderate gray 
in either 88 or 256 color mode;
in rxvt only, MINEDDIM="38;5;83" gives a moderate gray.
.br
MINEDDIM can also be set to an 
integer percentage value (e.g. MINEDIM="50%") 
to have mined apply dim colour to the indications; the colour 
value is computed from the current foreground and background 
colours (works in xterm, or mintty from version 404). The ANSI 
colour 7 (white) is temporarily redefined for this purpose and 
restored when mined exits.
.SS 	Display mode of menu borders
The display colour of menu borders and menu headers can be 
configured with the environment variable MINEDBORDER.
Suitable values are "35" (magenta), "34" (blue) and "31" (default).
.SS 	Status line highlighting
Highlighted parts of status line messages (e.g. initial letters 
for help selection after F1) can be configured with the 
environment variable MINEDEMPH, using foreground ANSI modes.
The default is "31" (effectively red background).
.SS 	Scrollbar colour
The foreground and background colours of the scrollbar can 
be configured with MINEDSCROLLFG and MINEDSCROLLBG, respectively, 
using ANSI modes; if only the background is configured, 
the foreground is the reverse of it. In general, to support 
fine-grained scrollbar display in UTF-8 terminals, the 
foreground and background colour settings should be the 
reverse of each other.
The default for the background is "46;34;48;5;45" if 
use of 256 colour mode is enabled, or "46;34" if it is disabled.
The default for the foreground is "", meaning that the reverse 
background is used, with a workaround for hanterm (see above).
.SS 	Menu colour and border style
The highlighting background colour of the selected menu item 
can be configured with MINEDSEL, using reverse ANSI modes (i.e. 
using foreground parameters for the background) and MINEDSELFG 
for the foreground, using reverse ANSI modes. The default values 
are MINEDSELFG="43" and MINEDSEL="34", giving yellow on blue.
If selected menu items appear too dark (which mined tries to 
avoid, depending on the terminal), try one of the workarounds 
MINEDSEL="34;1" or MINEDSELFG="43;1".
.br
Menu border styles can be selected with the option 
-Q.
For a nice selection bar that extends from left to right menu 
border, the setting -QQ is 
recommended (this is the default unless the terminal is 
assumed not to provide sufficient font configuration for this 
option; it depends on certain graphic Unicode characters being 
included in the terminal font and can be disabled with 
-Qq).
.SS 	Combining character display
The highlighting background colour of combining characters 
displayed in separated mode can be configured with 
MINEDCOMBINING, using ANSI background modes.
The default value is MINEDCOMBINING=46, to change colour e.g. 
to yellow background, use MINEDCOMBINING=43.
.SS Interactive Help access
Mined looks for its help file in a number of typical directories 
for installation of the Mined runtime support library.
If it is placed in a non-standard location, the environment 
variable MINEDDIR should point to the directory.
(Mined also tries to find the help file in the directory 
where it was started from; this is especially useful for the 
DOS/Windows version.)
.PP
.SS Mined compile-time configuration
.SS 	Script highlighting
The the mined distribution contains a file 
src/colours.cfg; it contains entries with the 
script name (as listed in the Unicode data file 
Scripts.txt), blank space, and a colour index 
into the xterm 256-colour mode. (To make good use of 256 
colour mode, the terminal program should be compiled with 256 
colour support enabled. Configure xterm with 
configure --enable-256-color .)
.br
Edit colours.cfg before building mined to 
adapt coloured script display to your preferences.
.SS 	Encodings and Encoding menu
The mined distribution contains a file src/charmaps.cfg 
which defines the character encodings that mined knows and how 
they are presented in the Encoding menu, together with flags for 
indication in the Encoding flag and tags for use with the 
-E and +E 
options (and the MINEDDETECT environment variable).
.br
The configuration file allows the definition of submenus in the 
Encoding menu.
.br
Each character encoding entry charmap-name must 
correspond to an existing character mapping file 
charmaps/charmap-name.map.
Additional character mappings can be generated with the script 
mkchrmap.
.SS 	Encodings recognised by locale names
The mined distribution contains a file src/locales.cfg 
which maps locale names to associated character encodings.
While this list contains mainly locale names without explicit 
encoding suffix, mined also checks generic locale name suffix 
values and assumes the corresponding terminal encoding.
Thus the given names or suffixes can be used even on legacy 
systems without locale support to indicate the terminal 
environment and preferred text encoding properly to mined.
.SS 	Keyboard mapping (Input method)
The mined distribution contains a file src/keymaps.cfg 
and a script mkkbmap; go into the 
src directory and use the script to generate 
additional keyboard mappings:
The parameter to the mkkbmap script can be one of
.RS
.TP
path.../name.mim
a keyboard mapping file of the m17n-db multilingualization package
.TP
path.../name.kmap
a keyboard mapping file of the yudit text editor
.TP
path.../name.vim
a keyboard mapping file of the vim text editor
.TP
path.../name.cit
an input method mapping file of the cxterm terminal, 
binary form; only works if the cxterm binary/text 
conversion utility cit2tit is accessible
.TP
path.../name.tit
an input method mapping file of the cxterm terminal, 
text form; only works if the character set 
conversion utility iconv is accessible and 
works on the mapping file
.TP
path.../name.utf
an input method mapping file of the cxterm terminal, 
already converted to UTF-8 encoding (e.g. with iconv)
.TP
Cangjie [ < HKSCS Changjie table file name > ]
with this tag, a keyboard mapping for the Cangjie input method 
will be generated,
taking information from the Unihan database (unicode.org);
.br
with a second parameter, a Big5-encoded table of HKSCS 
Changjie input codes will be merged in, 
the parameter is either the file name or a + 
sign which is implicitly expanded to the relative path name
etc/charmaps/hkscs/hkscs-2004-cj.txt;
the HKSCS input codes file should be taken from 
http://info.gov.hk/digital21/eng/hkscs/
.TP
MainlandTelegraph , TaiwanTelegraph
with one of these tags, a keyboard mapping will be generated 
using one of these telegraph codes as an input method,
taking information from the Unihan database (unicode.org)
.TP
Cantonese , HanyuPinlu , Mandarin , Tang
with one of these tags, a keyboard mapping will be generated 
using the according Chinese pronunciation as an input method,
taking information from the Unihan database (unicode.org)
.TP
JapaneseKun , JapaneseOn
with one of these tags, a keyboard mapping will be generated 
using Japanese or Sino-Japanese pronunciation as an input method,
taking information from the Unihan database (unicode.org)
.TP
Korean , Vietnamese
with one of these tags, a keyboard mapping will be generated 
using Korean or Vietnamese pronunciation as an input method,
taking information from the Unihan database (unicode.org)
.TP
VIQR , VNI , Vtelex
with one of these tags, a keyboard mapping will be generated 
for the respective Vietnamese input methods,
taking character information from the Unicode database (unicode.org)
.TP
\fIscript tag\fR
for many scripts listed in the UnicodeData.txt database, 
character names listed there can build a useful 
keyboard mapping; 
mkkbmap will then generate an according 
keyboard mapping file, e.g. for Bopomofo
.RE
Each successful generation of a mapping table adds an entry 
to the configuration file keymaps.cfg; the 
entry is however initially disabled as it usually needs manual 
adjustment: edit the configuration file; enable the new 
entry by removing the leading '#' character, check the first 
element which will be the name of the mapping to appear in the 
Input Method menu, check the last element of the entry 
which is a two-letter shortcut and must be unique for all 
mappings, then move the entry to the position where you want 
it to appear in the menu. You can also group mappings by 
adding "-" lines in this configuration file.
.br
For the Unicode data version used for included keyboard mappings, 
see the mined change log.
.br
For the keyboard mappings generated from Unihan data, 
characters are sorted according to the priorities of their 
Unicode ranges (assigning lower priority to "Supplement" and 
"Extension" and "Compatibility" ranges).
So for some input mnemos, the "pick list" for the Cangjie 
input method is displayed more in order of relevance.
.br
For keyboard mappings for CJK encodings, mkkbmap will add 
appropriate punctuation mapping entries for Chinese, Japanese, 
Korean, respectively, in addition to the entries derived from 
the respective data source.
.PP
.PP
.SH ENVIRONMENT VARIABLES
Environment variables for configuration of mined are listed 
in the script file profile.mined 
in the Mined runtime support library 
together with explanations and suggested values.
.br
	Further variables used by mined in the usual meaning are:
.TP
	HOME
.TP
	USER
.TP
	SHELL
.TP
	MINEDOPT
.TP
	LC_ALL, LC_CTYPE, LANG
Locale variables affect assumed terminal encoding, 
default text encoding, and language-related features (such as quote style).
.TP
	LANGUAGE
Affects language-related features. Affects assumed text encoding 
only if it has an explicit encoding suffix (like .UTF-8).
Does not affect assumed terminal encoding.
.TP
	TEXTLANG
\fBDeprecated:\fR like LANGUAGE.
.TP
	CYGWIN
.TP
	TMPDIR
.TP
	TMP
.TP
	TEMP \fI(MSDOS)\fR
.TP
	SYS$SCRATCH \fI(VMS)\fR
.TP
	TERM
Terminal type to be assumed.
.TP
	ESCDELAY
Delay after an ESCAPE character that mined waits for 
recognition of a function key control sequence. Default is 450 ms.
.TP
	MAPDELAY \fI(non-standard)\fR
Similar delay that mined applies to wait for subsequent 
input characters when applying keyboard mapping for an 
input method. Default is 900 ms.
.TP
	LINES, COLUMNS \fI(MSDOS ANSI mode only)\fR
Line / column count of terminal to be assumed.
.TP
	windir
Used to determine if it runs under MS Windows and set some 
defaults (screen output delay) accordingly.
.PP
.SS 	Environment variables to configure Printing
.TP
	MINEDPRINT
Print command to use instead of uprint; the value 
must contain the string '%s' 
(quoting recommended) to insert the file name.
.TP
	FONT
Name of a font file, e.g. LucidaBrightRegular or bodoni.ttf 
for use with uprint/uniprint 
(the file must reside in the configured font path), or name of 
a font as specified with fontconfig (in 
$HOME/.fonts.conf or 
/etc/fonts/fonts.conf) for use with 
uprint/paps.
.TP
	FONTPATH
Directory search path (separate directory names with ":") 
for use with uprint/uniprint which uses Truetype fonts.
.TP
	FONTSIZE
Font size to be used with uprint (paps or uniprint).
.TP
	LPR
Print spooling command to be used by uprint (or 
mined itself if uprint does not work) instead of the 
system-specific print spooling command (e.g. lpr).
.TP
	PRINTER
Name of printer to spool to.
.PP
.PP
.SH FILES
.SS Unix
.TP
$MINEDDIR
directory in which the Mined runtime support library is 
installed, including the help file mined.hlp 
and the printing script uprint
.TP
mined.hlp
help file for interactive hints (F1 commands);
mined looks for the file in $MINEDDIR/help,
$0, and a number of other typical directories 
where program support files are installed on various systems
.TP
$MINEDTMP
directory for auxiliary files, first attempt
Using this variable and $MINEDUSER (see below), you can 
establish copy and paste among machines that share network 
directories but are normally configured to use separate 
(usually local) temporary directories.
.TP
$TMPDIR
directory for auxiliary files, next attempt
.TP
$TMP
directory for auxiliary files, next attempt
.TP
$TEMP
directory for auxiliary files, next attempt
.TP
/usr/tmp
directory for auxiliary files, next attempt
.TP
/tmp
directory for auxiliary files, next attempt
.TP
\fINote:\fR $MINEDUSER
user name assumed instead of $USER for building 
auxiliary file names; using this, common copy-and-paste buffers 
can be used on a network file system from different machines 
where the user possibly has different user names
.TP
$HOME/.fonts.conf
fonts configuration file for use with 
uprint/paps; for description, see 
http://fontconfig.org/fontconfig-user.html 
or man fonts.conf
.TP
minedbuf.< USER >.< PID >.< NN >
temporary file for paste buffer; 
USER is either $MINEDUSER or $USER
.TP
minedbuf.< USER >
file for inter-window paste buffer; 
USER is either $MINEDUSER or $USER; 
see descriptions of $MINEDTMP and 
$MINEDUSER above for how to set up a common 
inter-window paste buffer in a heterogeneous network
.TP
minedrecover.< USER >.< PID >
panic file to rescue text in case of crash or external signal caught
.PP
.SS VMS
.TP
SYS$MINEDTMP:$MINED$user_BUF.pid_nn
paste buffer
.TP
SYS$MINEDTMP:$MINEDBUF$user
inter-window paste buffer
.TP
SYS$SCRATCH:$MINEDRECOVER$user$pid
panic file
.TP
SYS$SCRATCH:$MINEDPRINT$user$pid$n.lis
print spool file
.TP
MINED$HELP
help file (may be configured as a logical name)
.TP
\fIIf SYS$MINEDTMP is not available, 
SYS$SCRATCH is used instead.\fR
\fIIf SYS$SCRATCH is not available, 
SYS$LOGIN is used instead.\fR
.PP
.SS MSDOS / Windows
.TP
%MINEDDIR%\\help\\mined.hlp
help file, first attempt (to find it)
.TP
mined.hlp \fI(in mined program directory)\fR
help file, next attempt
.TP
%MINEDTMP%\\minedbuf.nn
paste buffer
.TP
%MINEDTMP%\\minedbuf
inter-window paste buffer
.TP
%MINEDTMP%\\minedbuf.%MINEDUSER%
inter-window paste buffer, as configured to use the same 
file as other mined versions in a heterogeneous network; 
note, however, that %MINEDUSER% will be 
shortened to 3 characters in pure DOS
.TP
%MINEDTMP%\\minedsv_.*
panic file
.TP
\fIIf %MINEDTMP% is not available, 
%TEMP% or %TMP% or \\ are used.\fR
.PP
.PP
.PP
.SH DIAGNOSTICS
In all cases where it is considered sensible, the appropriate 
message of a system error occurred is displayed (instead of 
printing numerical hieroglyphs or indistinguished commonplace 
messages as many other UNIX tools do).
.PP
.SH BUGS
In an extremely narrow terminal window (less than 8 characters), 
if lines are shifted out of the display, moving the cursor around 
may cause positioning errors and display garbage.
.PP
(MSDOS, Windows:) With non-cygwin versions (djgpp), piped 
editing from standard input does not work for unknown reason.
.PP
(Windows:) Non-cygwin versions (djgpp) do not work in xterm, 
rxvt, or mintty.
.PP
.PP
.SH AUTHOR AND ACKNOWLEDGEMENTS
Long ago, the initial version of mined was written for the Minix 
educational operating system by Michiel Huisjes.
It was adapted to Unix by Achim MЧller who added termcap support.
Mined was later debugged, partly rewritten and enhanced and 
is now maintained by Thomas Wolff.
.br
Please send comments, suggestions, bug reports to 
mined@towo.net.
.SS Homepage
Mined information is provided on 
mined.github.io.
Download links and issue reporting can be found there.
An issue tracker is available in the development repository 
github.com/mintty/mined.
Mined also used to be hosted as a 
sourceforge project (sf.net/projects/mined).
.SS Acknowledgements
.RS
.IP \(bu
Thanks to Nadim Shaikli <\0shaikli\0@\0yahoo.com\0> for discussion 
of right-to-left issues and interworking with mlterm.
.IP \(bu
Thanks to Mike Fabian <\0mfabian\0@\0suse.de\0> 
for making the RPM package included in the SuSE distribution.
.IP \(bu
Thanks to Ziying Sherwin <\0sherwin\0@\0nlm.nih.gov\0> 
and R. P. Channing Rodgers <\0rodgers\0@\0nlm.nih.gov\0> 
for suggestions and information about CJK input method support 
and multiple choice handling (pick lists).
.IP \(bu
Thanks to Tobias Ernst <\0tobias_ernst\0@\0eml.cc\0> for 
providing a Mac OS X makefile and suggestion and information 
to implement Emacs command mode.
.IP \(bu
Thanks to \*(18\*(19\*(20 (Wu Yongwei) 
<\0yongwei\0@\0eastday.com\0> 
for suggestions and information about Pinyin input methods, 
for discussion about keyboard mappings for CJK punctuation, 
and for further maintaining the Pinyin input method.
.IP \(bu
Thanks to Ramakrishnan Muthukrishnan <\0rkrishnan\0@\0debian.org\0> 
for making the Debian package.
.IP \(bu
Thanks to Thierry Thomas <\0thierry\0@\0FreeBSD.org\0> 
for making the FreeBSD package.
.IP \(bu
Thanks to Tobias Nygren <\0tnn\0@\0NetBSD.org\0> 
for making the NetBSD package.
.IP \(bu
Thanks to Jim Breen for suggesting better overview of input 
methods and more language-specific advice for non-techy 
persons which led to the new chapter on Language support.
.RE
.PP
.PP
